// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_REG_INIT
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif // RANDOMIZE_MEM_INIT

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifdef PRINTF_COND
  `define PRINTF_COND_ (`PRINTF_COND)
`else  // PRINTF_COND
  `define PRINTF_COND_ 1
`endif // PRINTF_COND

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifdef ASSERT_VERBOSE_COND
  `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
`else  // ASSERT_VERBOSE_COND
  `define ASSERT_VERBOSE_COND_ 1
`endif // ASSERT_VERBOSE_COND

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifdef STOP_COND
  `define STOP_COND_ (`STOP_COND)
`else  // STOP_COND
  `define STOP_COND_ 1
`endif // STOP_COND

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else  // VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif // VERILATOR
`else  // RANDOMIZE
  `define INIT_RANDOM_PROLOG_
`endif // RANDOMIZE

// VCS coverage exclude_file
module rf_combMem(	// RegisterFile.scala:15:21
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  R2_addr,
  input         R2_en,
                R2_clk,
  input  [4:0]  R3_addr,
  input         R3_en,
                R3_clk,
  input  [4:0]  R4_addr,
  input         R4_en,
                R4_clk,
  input  [4:0]  R5_addr,
  input         R5_en,
                R5_clk,
  input  [4:0]  R6_addr,
  input         R6_en,
                R6_clk,
  input  [4:0]  R7_addr,
  input         R7_en,
                R7_clk,
  input  [4:0]  R8_addr,
  input         R8_en,
                R8_clk,
  input  [4:0]  R9_addr,
  input         R9_en,
                R9_clk,
  input  [4:0]  R10_addr,
  input         R10_en,
                R10_clk,
  input  [4:0]  R11_addr,
  input         R11_en,
                R11_clk,
  input  [4:0]  R12_addr,
  input         R12_en,
                R12_clk,
  input  [4:0]  R13_addr,
  input         R13_en,
                R13_clk,
  input  [4:0]  R14_addr,
  input         R14_en,
                R14_clk,
  input  [4:0]  R15_addr,
  input         R15_en,
                R15_clk,
  input  [4:0]  R16_addr,
  input         R16_en,
                R16_clk,
  input  [4:0]  R17_addr,
  input         R17_en,
                R17_clk,
  input  [4:0]  R18_addr,
  input         R18_en,
                R18_clk,
  input  [4:0]  R19_addr,
  input         R19_en,
                R19_clk,
  input  [4:0]  R20_addr,
  input         R20_en,
                R20_clk,
  input  [4:0]  R21_addr,
  input         R21_en,
                R21_clk,
  input  [4:0]  R22_addr,
  input         R22_en,
                R22_clk,
  input  [4:0]  R23_addr,
  input         R23_en,
                R23_clk,
  input  [4:0]  R24_addr,
  input         R24_en,
                R24_clk,
  input  [4:0]  R25_addr,
  input         R25_en,
                R25_clk,
  input  [4:0]  R26_addr,
  input         R26_en,
                R26_clk,
  input  [4:0]  R27_addr,
  input         R27_en,
                R27_clk,
  input  [4:0]  R28_addr,
  input         R28_en,
                R28_clk,
  input  [4:0]  R29_addr,
  input         R29_en,
                R29_clk,
  input  [4:0]  R30_addr,
  input         R30_en,
                R30_clk,
  input  [4:0]  R31_addr,
  input         R31_en,
                R31_clk,
  input  [4:0]  R32_addr,
  input         R32_en,
                R32_clk,
  input  [4:0]  R33_addr,
  input         R33_en,
                R33_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  output [63:0] R0_data,
                R1_data,
                R2_data,
                R3_data,
                R4_data,
                R5_data,
                R6_data,
                R7_data,
                R8_data,
                R9_data,
                R10_data,
                R11_data,
                R12_data,
                R13_data,
                R14_data,
                R15_data,
                R16_data,
                R17_data,
                R18_data,
                R19_data,
                R20_data,
                R21_data,
                R22_data,
                R23_data,
                R24_data,
                R25_data,
                R26_data,
                R27_data,
                R28_data,
                R29_data,
                R30_data,
                R31_data,
                R32_data,
                R33_data);

  reg [63:0] Memory[0:31];	// RegisterFile.scala:15:21
  always @(posedge W0_clk) begin	// RegisterFile.scala:15:21
    if (W0_en)	// RegisterFile.scala:15:21
      Memory[W0_addr] <= W0_data;	// RegisterFile.scala:15:21
  end // always @(posedge)
  `ifndef SYNTHESIS	// RegisterFile.scala:15:21
    `ifdef RANDOMIZE_MEM_INIT	// RegisterFile.scala:15:21
      integer initvar;	// RegisterFile.scala:15:21
      reg [63:0] _RANDOM_MEM;	// RegisterFile.scala:15:21
    `endif // RANDOMIZE_MEM_INIT
    initial begin	// RegisterFile.scala:15:21
      `INIT_RANDOM_PROLOG_	// RegisterFile.scala:15:21
      `ifdef RANDOMIZE_MEM_INIT	// RegisterFile.scala:15:21
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {{`RANDOM}, {`RANDOM}};
          Memory[initvar] = _RANDOM_MEM[63:0];
        end	// RegisterFile.scala:15:21
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // not def SYNTHESIS
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R1_data = R1_en ? Memory[R1_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R2_data = R2_en ? Memory[R2_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R3_data = R3_en ? Memory[R3_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R4_data = R4_en ? Memory[R4_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R5_data = R5_en ? Memory[R5_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R6_data = R6_en ? Memory[R6_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R7_data = R7_en ? Memory[R7_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R8_data = R8_en ? Memory[R8_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R9_data = R9_en ? Memory[R9_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R10_data = R10_en ? Memory[R10_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R11_data = R11_en ? Memory[R11_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R12_data = R12_en ? Memory[R12_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R13_data = R13_en ? Memory[R13_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R14_data = R14_en ? Memory[R14_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R15_data = R15_en ? Memory[R15_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R16_data = R16_en ? Memory[R16_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R17_data = R17_en ? Memory[R17_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R18_data = R18_en ? Memory[R18_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R19_data = R19_en ? Memory[R19_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R20_data = R20_en ? Memory[R20_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R21_data = R21_en ? Memory[R21_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R22_data = R22_en ? Memory[R22_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R23_data = R23_en ? Memory[R23_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R24_data = R24_en ? Memory[R24_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R25_data = R25_en ? Memory[R25_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R26_data = R26_en ? Memory[R26_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R27_data = R27_en ? Memory[R27_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R28_data = R28_en ? Memory[R28_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R29_data = R29_en ? Memory[R29_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R30_data = R30_en ? Memory[R30_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R31_data = R31_en ? Memory[R31_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R32_data = R32_en ? Memory[R32_addr] : 64'bx;	// RegisterFile.scala:15:21
  assign R33_data = R33_en ? Memory[R33_addr] : 64'bx;	// RegisterFile.scala:15:21
endmodule

module IFU_embedded(	// <stdin>:2:10
  input         clock,
                reset,
                io_imem_ar_ready,
                io_imem_r_valid,
  input  [63:0] io_imem_r_bits_data,
  input         io_out_ready,
  input  [63:0] io_redirect_target,
  input         io_redirect_valid,
  output        io_imem_ar_valid,
  output [31:0] io_imem_ar_bits_addr,
  output        io_imem_r_ready,
                io_out_valid,
  output [63:0] io_out_bits_instr,
                io_out_bits_pc,
                io_out_bits_pnpc,
  output [3:0]  io_flushVec);

  wire        _io_imem_r_ready_T_1;	// IFU.scala:44:41
  reg  [63:0] pc;	// IFU.scala:28:25
  wire        _T = _io_imem_r_ready_T_1 & io_imem_r_valid;	// Decoupled.scala:52:35, IFU.scala:44:41
  wire [63:0] snpc = pc + 64'h4;	// IFU.scala:28:25, :30:23
  assign _io_imem_r_ready_T_1 = io_out_ready | io_redirect_valid;	// IFU.scala:44:41
  wire        _io_out_valid_T_2 = io_imem_r_valid & ~io_redirect_valid;	// IFU.scala:51:{41,44}
  reg  [63:0] c;	// GTimer.scala:8:32
  reg  [63:0] c_1;	// GTimer.scala:8:32
  reg  [63:0] c_2;	// GTimer.scala:8:32
  always @(posedge clock) begin
    if (reset) begin
      pc <= 64'h80000000;	// IFU.scala:28:25
      c <= 64'h0;	// GTimer.scala:8:32, IFU.scala:41:17
      c_1 <= 64'h0;	// GTimer.scala:8:32, IFU.scala:41:17
      c_2 <= 64'h0;	// GTimer.scala:8:32, IFU.scala:41:17
    end
    else begin
      if (io_redirect_valid | _T) begin	// Decoupled.scala:52:35, IFU.scala:29:42
        if (io_redirect_valid)
          pc <= io_redirect_target;	// IFU.scala:28:25
        else
          pc <= snpc;	// IFU.scala:28:25, :30:23
      end
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
      c_1 <= c_1 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_2 <= c_2 + 64'h1;	// GTimer.scala:8:32, :9:24
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2:10
    always @(posedge clock) begin	// Debug.scala:34:43
      automatic logic _T_3 = _T | io_imem_ar_ready & io_out_ready;	// Decoupled.scala:52:35, IFU.scala:55:30
      automatic logic _T_9 = io_out_ready & _io_out_valid_T_2;	// Decoupled.scala:52:35, IFU.scala:51:41
      if ((`PRINTF_COND_) & _T_3 & ~reset)	// Debug.scala:34:43, IFU.scala:55:30
        $fwrite(32'h80000002, "[%d] IFU_embedded: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_3 & ~reset) begin	// Debug.scala:34:43, :35:31, IFU.scala:55:30
        automatic logic [63:0] npc = io_redirect_valid ? io_redirect_target : snpc;	// IFU.scala:30:23, :34:22
        $fwrite(32'h80000002, "[IFI] pc=%x redirect %x npc %x pc %x pnpc %x\n", pc[31:0], io_redirect_valid, npc, pc, npc);	// AXI4.scala:73:27, Debug.scala:34:43, :35:31, IFU.scala:28:25, :34:22
      end
      if ((`PRINTF_COND_) & _T_9 & ~reset)	// Debug.scala:34:43, Decoupled.scala:52:35
        $fwrite(32'h80000002, "[%d] IFU_embedded: ", c_1);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_9 & ~reset)	// Debug.scala:34:43, :35:31, Decoupled.scala:52:35
        $fwrite(32'h80000002, "[IFO] pc=%x inst=%x npc=%x ipf %x\n", pc, io_imem_r_bits_data, snpc, 1'h0);	// <stdin>:2:10, Debug.scala:34:43, :35:31, IFU.scala:28:25, :30:23
      if ((`PRINTF_COND_) & io_redirect_valid & ~reset)	// Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] IFU_embedded: ", c_2);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & io_redirect_valid & ~reset)	// Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[Redirect] target 0x%x rtype %b\n", io_redirect_target, 1'h0);	// <stdin>:2:10, Debug.scala:34:43, :35:31
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2:10
        pc = {_RANDOM_0, _RANDOM_1};	// IFU.scala:28:25
        c = {_RANDOM_2, _RANDOM_3};	// GTimer.scala:8:32
        c_1 = {_RANDOM_4, _RANDOM_5};	// GTimer.scala:8:32
        c_2 = {_RANDOM_6, _RANDOM_7};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_imem_ar_valid = io_out_ready;	// <stdin>:2:10
  assign io_imem_ar_bits_addr = pc[31:0];	// <stdin>:2:10, AXI4.scala:73:27, IFU.scala:28:25
  assign io_imem_r_ready = _io_imem_r_ready_T_1;	// <stdin>:2:10, IFU.scala:44:41
  assign io_out_valid = _io_out_valid_T_2;	// <stdin>:2:10, IFU.scala:51:41
  assign io_out_bits_instr = io_imem_r_bits_data;	// <stdin>:2:10
  assign io_out_bits_pc = pc;	// <stdin>:2:10, IFU.scala:28:25
  assign io_out_bits_pnpc = snpc;	// <stdin>:2:10, IFU.scala:30:23
  assign io_flushVec = {4{io_redirect_valid}};	// <stdin>:2:10, IFU.scala:38:27
endmodule

module Decoder(	// <stdin>:143:10, :832:10
  input         io_in_valid,
  input  [63:0] io_in_bits_instr,
                io_in_bits_pc,
                io_in_bits_pnpc,
  input         io_out_ready,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits_cf_instr,
                io_out_bits_cf_pc,
                io_out_bits_cf_pnpc,
  output        io_out_bits_cf_exceptionVec_2,
                io_out_bits_ctrl_srcAType,
                io_out_bits_ctrl_srcBType,
  output [2:0]  io_out_bits_ctrl_fuType,
  output [6:0]  io_out_bits_ctrl_fuCtrl,
  output [4:0]  io_out_bits_ctrl_rfSrcA,
                io_out_bits_ctrl_rfSrcB,
  output        io_out_bits_ctrl_rfWen,
  output [4:0]  io_out_bits_ctrl_rfDest,
  output [63:0] io_out_bits_data_imm,
  output        io_isWFI);

  wire [9:0]  _GEN = {io_in_bits_instr[14:12], io_in_bits_instr[6:0]};	// Lookup.scala:31:38
  wire        _decodeList_T_1 = _GEN == 10'h13;	// Lookup.scala:31:38
  wire [15:0] _GEN_0 = {io_in_bits_instr[31:26], io_in_bits_instr[14:12], io_in_bits_instr[6:0]};	// Lookup.scala:31:38
  wire        _decodeList_T_3 = _GEN_0 == 16'h93;	// Lookup.scala:31:38
  wire        _decodeList_T_5 = _GEN == 10'h113;	// Lookup.scala:31:38
  wire        _decodeList_T_7 = _GEN == 10'h193;	// Lookup.scala:31:38
  wire        _decodeList_T_9 = _GEN == 10'h213;	// Lookup.scala:31:38
  wire        _decodeList_T_11 = _GEN_0 == 16'h293;	// Lookup.scala:31:38
  wire        _decodeList_T_13 = _GEN_0 == 16'h4293;	// Lookup.scala:31:38
  wire        _decodeList_T_15 = _GEN == 10'h313;	// Lookup.scala:31:38
  wire        _decodeList_T_17 = _GEN == 10'h393;	// Lookup.scala:31:38
  wire [16:0] _GEN_1 = {io_in_bits_instr[31:25], io_in_bits_instr[14:12], io_in_bits_instr[6:0]};	// Lookup.scala:31:38
  wire        _decodeList_T_19 = _GEN_1 == 17'h33;	// Lookup.scala:31:38
  wire        _decodeList_T_21 = _GEN_1 == 17'h8033;	// Lookup.scala:31:38
  wire        _decodeList_T_23 = _GEN_1 == 17'hB3;	// Lookup.scala:31:38
  wire        _decodeList_T_25 = _GEN_1 == 17'h133;	// Lookup.scala:31:38
  wire        _decodeList_T_27 = _GEN_1 == 17'h1B3;	// Lookup.scala:31:38
  wire        _decodeList_T_29 = _GEN_1 == 17'h233;	// Lookup.scala:31:38
  wire        _decodeList_T_31 = _GEN_1 == 17'h2B3;	// Lookup.scala:31:38
  wire        _decodeList_T_33 = _GEN_1 == 17'h333;	// Lookup.scala:31:38
  wire        _decodeList_T_35 = _GEN_1 == 17'h3B3;	// Lookup.scala:31:38
  wire        _decodeList_T_37 = io_in_bits_instr[6:0] == 7'h37;	// IDU.scala:86:54, Lookup.scala:31:38
  wire        _decodeList_T_39 = io_in_bits_instr[6:0] == 7'h17;	// Lookup.scala:31:38, :34:39
  wire        _decodeList_T_41 = io_in_bits_instr[6:0] == 7'h6F;	// Lookup.scala:31:38
  wire        _decodeList_T_43 = _GEN == 10'h67;	// Lookup.scala:31:38
  wire        _decodeList_T_45 = _GEN == 10'h63;	// Lookup.scala:31:38
  wire        _decodeList_T_47 = _GEN == 10'hE3;	// Lookup.scala:31:38
  wire        _decodeList_T_49 = _GEN == 10'h263;	// Lookup.scala:31:38
  wire        _decodeList_T_51 = _GEN == 10'h2E3;	// Lookup.scala:31:38
  wire        _decodeList_T_53 = _GEN == 10'h363;	// Lookup.scala:31:38
  wire        _decodeList_T_55 = _GEN == 10'h3E3;	// Lookup.scala:31:38
  wire        _decodeList_T_57 = _GEN == 10'h3;	// Lookup.scala:31:38
  wire        _decodeList_T_59 = _GEN == 10'h83;	// Lookup.scala:31:38
  wire        _decodeList_T_61 = _GEN == 10'h103;	// Lookup.scala:31:38
  wire        _decodeList_T_63 = _GEN == 10'h203;	// Lookup.scala:31:38
  wire        _decodeList_T_65 = _GEN == 10'h283;	// Lookup.scala:31:38
  wire        _decodeList_T_67 = _GEN == 10'h23;	// Lookup.scala:31:38
  wire        _decodeList_T_69 = _GEN == 10'hA3;	// Lookup.scala:31:38
  wire        _decodeList_T_71 = _GEN == 10'h123;	// Lookup.scala:31:38
  wire        _decodeList_T_73 = _GEN == 10'h1B;	// Lookup.scala:31:38
  wire        _decodeList_T_75 = _GEN_1 == 17'h9B;	// Lookup.scala:31:38
  wire        _decodeList_T_77 = _GEN_1 == 17'h29B;	// Lookup.scala:31:38
  wire        _decodeList_T_79 = _GEN_1 == 17'h829B;	// Lookup.scala:31:38
  wire        _decodeList_T_81 = _GEN_1 == 17'h3B;	// Lookup.scala:31:38
  wire        _decodeList_T_83 = _GEN_1 == 17'h803B;	// Lookup.scala:31:38
  wire        _decodeList_T_85 = _GEN_1 == 17'hBB;	// Lookup.scala:31:38
  wire        _decodeList_T_87 = _GEN_1 == 17'h2BB;	// Lookup.scala:31:38
  wire        _decodeList_T_89 = _GEN_1 == 17'h82BB;	// Lookup.scala:31:38
  wire        _decodeList_T_91 = _GEN == 10'h303;	// Lookup.scala:31:38
  wire        _decodeList_T_93 = _GEN == 10'h183;	// Lookup.scala:31:38
  wire        _decodeList_T_95 = _GEN == 10'h1A3;	// Lookup.scala:31:38
  wire        _decodeList_T_97 = _GEN == 10'h6B;	// Lookup.scala:31:38
  wire        _decodeList_T_99 = _GEN_1 == 17'h433;	// Lookup.scala:31:38
  wire        _decodeList_T_101 = _GEN_1 == 17'h4B3;	// Lookup.scala:31:38
  wire        _decodeList_T_103 = _GEN_1 == 17'h533;	// Lookup.scala:31:38
  wire        _decodeList_T_105 = _GEN_1 == 17'h5B3;	// Lookup.scala:31:38
  wire        _decodeList_T_107 = _GEN_1 == 17'h633;	// Lookup.scala:31:38
  wire        _decodeList_T_109 = _GEN_1 == 17'h6B3;	// Lookup.scala:31:38
  wire        _decodeList_T_111 = _GEN_1 == 17'h733;	// Lookup.scala:31:38
  wire        _decodeList_T_113 = _GEN_1 == 17'h7B3;	// Lookup.scala:31:38
  wire        _decodeList_T_115 = _GEN_1 == 17'h43B;	// Lookup.scala:31:38
  wire        _decodeList_T_117 = _GEN_1 == 17'h63B;	// Lookup.scala:31:38
  wire        _decodeList_T_119 = _GEN_1 == 17'h6BB;	// Lookup.scala:31:38
  wire        _decodeList_T_121 = _GEN_1 == 17'h73B;	// Lookup.scala:31:38
  wire        _decodeList_T_123 = _GEN_1 == 17'h7BB;	// Lookup.scala:31:38
  wire        _decodeList_T_125 = io_in_bits_instr[31:0] == 32'h73;	// Lookup.scala:31:38
  wire        _decodeList_T_127 = io_in_bits_instr[31:0] == 32'h100073;	// Lookup.scala:31:38
  wire        _decodeList_T_129 = io_in_bits_instr[31:0] == 32'h10500073;	// Lookup.scala:31:38
  wire        _decodeList_T_131 = _GEN == 10'hF3;	// Lookup.scala:31:38
  wire        _decodeList_T_133 = _GEN == 10'h173;	// Lookup.scala:31:38
  wire        _decodeList_T_135 = _GEN == 10'h1F3;	// Lookup.scala:31:38
  wire        _decodeList_T_137 = _GEN == 10'h2F3;	// Lookup.scala:31:38
  wire        _decodeList_T_139 = _GEN == 10'h373;	// Lookup.scala:31:38
  wire        _decodeList_T_141 = _GEN == 10'h3F3;	// Lookup.scala:31:38
  wire        _GEN_2 = _decodeList_T_99 | _decodeList_T_101 | _decodeList_T_103 | _decodeList_T_105 |
                _decodeList_T_107 | _decodeList_T_109 | _decodeList_T_111 | _decodeList_T_113 |
                _decodeList_T_115 | _decodeList_T_117 | _decodeList_T_119 | _decodeList_T_121 |
                _decodeList_T_123;	// Lookup.scala:31:38, :34:39
  wire        _GEN_3 = _decodeList_T_37 | _decodeList_T_39;	// Lookup.scala:31:38, :34:39
  wire [2:0]  decodeList_0 = _decodeList_T_1 | _decodeList_T_3 | _decodeList_T_5 | _decodeList_T_7 | _decodeList_T_9 |
                _decodeList_T_11 | _decodeList_T_13 | _decodeList_T_15 | _decodeList_T_17 ? 3'h4 :
                _decodeList_T_19 | _decodeList_T_21 | _decodeList_T_23 | _decodeList_T_25 |
                _decodeList_T_27 | _decodeList_T_29 | _decodeList_T_31 | _decodeList_T_33 |
                _decodeList_T_35 ? 3'h5 : _GEN_3 ? 3'h6 : _decodeList_T_41 ? 3'h7 : _decodeList_T_43 ? 3'h4
                : _decodeList_T_45 | _decodeList_T_47 | _decodeList_T_49 | _decodeList_T_51 |
                _decodeList_T_53 | _decodeList_T_55 ? 3'h1 : _decodeList_T_57 | _decodeList_T_59 |
                _decodeList_T_61 | _decodeList_T_63 | _decodeList_T_65 ? 3'h4 : _decodeList_T_67 |
                _decodeList_T_69 | _decodeList_T_71 ? 3'h2 : _decodeList_T_73 | _decodeList_T_75 |
                _decodeList_T_77 | _decodeList_T_79 ? 3'h4 : _decodeList_T_81 | _decodeList_T_83 |
                _decodeList_T_85 | _decodeList_T_87 | _decodeList_T_89 ? 3'h5 : _decodeList_T_91 |
                _decodeList_T_93 ? 3'h4 : _decodeList_T_95 ? 3'h2 : _decodeList_T_97 ? 3'h4 : _GEN_2 ? 3'h5
                : _decodeList_T_125 | _decodeList_T_127 | _decodeList_T_129 | _decodeList_T_131 |
                _decodeList_T_133 | _decodeList_T_135 | _decodeList_T_137 | _decodeList_T_139 ? 3'h4 :
                {_decodeList_T_141, 2'h0};	// Lookup.scala:31:38, :34:39
  wire [1:0]  decodeList_1 = _decodeList_T_1 | _decodeList_T_3 | _decodeList_T_5 | _decodeList_T_7 | _decodeList_T_9 |
                _decodeList_T_11 | _decodeList_T_13 | _decodeList_T_15 | _decodeList_T_17 |
                _decodeList_T_19 | _decodeList_T_21 | _decodeList_T_23 | _decodeList_T_25 |
                _decodeList_T_27 | _decodeList_T_29 | _decodeList_T_31 | _decodeList_T_33 |
                _decodeList_T_35 | _decodeList_T_37 | _decodeList_T_39 | _decodeList_T_41 |
                _decodeList_T_43 | _decodeList_T_45 | _decodeList_T_47 | _decodeList_T_49 |
                _decodeList_T_51 | _decodeList_T_53 | _decodeList_T_55 ? 2'h0 : _decodeList_T_57 |
                _decodeList_T_59 | _decodeList_T_61 | _decodeList_T_63 | _decodeList_T_65 |
                _decodeList_T_67 | _decodeList_T_69 | _decodeList_T_71 ? 2'h1 : _decodeList_T_73 |
                _decodeList_T_75 | _decodeList_T_77 | _decodeList_T_79 | _decodeList_T_81 |
                _decodeList_T_83 | _decodeList_T_85 | _decodeList_T_87 | _decodeList_T_89 ? 2'h0 :
                _decodeList_T_91 | _decodeList_T_93 | _decodeList_T_95 ? 2'h1 : _decodeList_T_97 ? 2'h0 :
                _GEN_2 ? 2'h2 : _decodeList_T_125 ? 2'h3 : {2{_decodeList_T_127 | ~_decodeList_T_129}};	// Lookup.scala:31:38, :34:39
  wire [6:0]  decodeList_2 = _decodeList_T_1 ? 7'h40 : _decodeList_T_3 ? 7'h1 : _decodeList_T_5 ? 7'h2 : _decodeList_T_7
                ? 7'h3 : _decodeList_T_9 ? 7'h4 : _decodeList_T_11 ? 7'h5 : _decodeList_T_13 ? 7'hD :
                _decodeList_T_15 ? 7'h6 : _decodeList_T_17 ? 7'h7 : _decodeList_T_19 ? 7'h40 :
                _decodeList_T_21 ? 7'h8 : _decodeList_T_23 ? 7'h1 : _decodeList_T_25 ? 7'h2 :
                _decodeList_T_27 ? 7'h3 : _decodeList_T_29 ? 7'h4 : _decodeList_T_31 ? 7'h5 :
                _decodeList_T_33 ? 7'h6 : _decodeList_T_35 ? 7'h7 : _GEN_3 ? 7'h40 : _decodeList_T_41 ?
                7'h58 : _decodeList_T_43 ? 7'h5A : _decodeList_T_45 ? 7'h10 : _decodeList_T_47 ? 7'h11 :
                _decodeList_T_49 ? 7'h14 : _decodeList_T_51 ? 7'h15 : _decodeList_T_53 ? 7'h16 :
                _decodeList_T_55 ? 7'h17 : _decodeList_T_57 ? 7'h0 : _decodeList_T_59 ? 7'h1 :
                _decodeList_T_61 ? 7'h2 : _decodeList_T_63 ? 7'h4 : _decodeList_T_65 ? 7'h5 :
                _decodeList_T_67 ? 7'h8 : _decodeList_T_69 ? 7'h9 : _decodeList_T_71 ? 7'hA :
                _decodeList_T_73 ? 7'h60 : _decodeList_T_75 ? 7'h21 : _decodeList_T_77 ? 7'h25 :
                _decodeList_T_79 ? 7'h2D : _decodeList_T_81 ? 7'h60 : _decodeList_T_83 ? 7'h28 :
                _decodeList_T_85 ? 7'h21 : _decodeList_T_87 ? 7'h25 : _decodeList_T_89 ? 7'h2D :
                _decodeList_T_91 ? 7'h6 : _decodeList_T_93 ? 7'h3 : _decodeList_T_95 ? 7'hB :
                _decodeList_T_97 ? 7'h40 : _decodeList_T_99 ? 7'h0 : _decodeList_T_101 ? 7'h1 :
                _decodeList_T_103 ? 7'h2 : _decodeList_T_105 ? 7'h3 : _decodeList_T_107 ? 7'h4 :
                _decodeList_T_109 ? 7'h5 : _decodeList_T_111 ? 7'h6 : _decodeList_T_113 ? 7'h7 :
                _decodeList_T_115 ? 7'h8 : _decodeList_T_117 ? 7'hC : _decodeList_T_119 ? 7'hD :
                _decodeList_T_121 ? 7'hE : _decodeList_T_123 ? 7'hF : _decodeList_T_125 | _decodeList_T_127
                ? 7'h0 : _decodeList_T_129 ? 7'h40 : {4'h0, _decodeList_T_131 ? 3'h1 : _decodeList_T_133 ?
                3'h2 : _decodeList_T_135 ? 3'h3 : _decodeList_T_137 ? 3'h5 : _decodeList_T_139 ? 3'h6 :
                {3{_decodeList_T_141}}};	// Lookup.scala:31:38, :34:39
  wire        _imm_T_37 = decodeList_0 == 3'h4;	// Lookup.scala:34:39, LookupTree.scala:8:38
  wire        _imm_T_41 = decodeList_0 == 3'h6;	// Lookup.scala:34:39, LookupTree.scala:8:38
  wire        _srcAType_T_19 = _imm_T_41 | (&decodeList_0);	// Lookup.scala:34:39, LookupTree.scala:8:38, Mux.scala:27:73
  wire        _srcBType_T_19 = _imm_T_37 | _imm_T_41 | (&decodeList_0);	// Lookup.scala:34:39, LookupTree.scala:8:38, Mux.scala:27:73
  wire        _T_16 = io_in_bits_instr[11:7] == 5'h1;	// IDU.scala:48:64, :78:46
  wire        _T_17 = io_in_bits_instr[11:7] == 5'h5;	// IDU.scala:48:64, :78:61
  wire        _T_12 = decodeList_2 == 7'h58;	// IDU.scala:79:48, Lookup.scala:34:39
  wire [6:0]  _GEN_4 = (_T_16 | _T_17) & _T_12 ? 7'h5C : decodeList_2;	// IDU.scala:34:33, :78:{46,54,61}, :79:{38,48,65,91}, Lookup.scala:34:39
  assign io_in_ready = ~io_in_valid | io_out_ready & io_in_valid;	// <stdin>:143:10, :832:10, Decoupled.scala:52:35, IDU.scala:106:{24,37}
  assign io_out_valid = io_in_valid;	// <stdin>:143:10, :832:10
  assign io_out_bits_cf_instr = io_in_bits_instr;	// <stdin>:143:10, :832:10
  assign io_out_bits_cf_pc = io_in_bits_pc;	// <stdin>:143:10, :832:10
  assign io_out_bits_cf_pnpc = io_in_bits_pnpc;	// <stdin>:143:10, :832:10
  assign io_out_bits_cf_exceptionVec_2 = decodeList_0 == 3'h0 & io_in_valid;	// <stdin>:143:10, :832:10, IDU.scala:119:{65,89}, Lookup.scala:34:39
  assign io_out_bits_ctrl_srcAType = io_in_bits_instr[6:0] != 7'h37 & _srcAType_T_19;	// <stdin>:143:10, :832:10, IDU.scala:86:{41,47,54}, Mux.scala:27:73
  assign io_out_bits_ctrl_srcBType = _srcBType_T_19;	// <stdin>:143:10, :832:10, Mux.scala:27:73
  assign io_out_bits_ctrl_fuType = {1'h0, decodeList_1};	// <stdin>:143:10, :832:10, IDU.scala:33:33, Lookup.scala:34:39
  assign io_out_bits_ctrl_fuCtrl = decodeList_1 == 2'h0 ? (_T_12 ? (_T_16 | _T_17 ? 7'h5C : io_in_bits_instr[19:15] == 5'h1 |
                io_in_bits_instr[19:15] == 5'h5 ? 7'h5E : _GEN_4) : _GEN_4) : decodeList_2;	// <stdin>:143:10, :832:10, IDU.scala:34:33, :48:34, :77:{22,38}, :78:{46,54,61}, :79:{48,65,91}, :80:47, :81:{47,73}, :82:{47,73}, Lookup.scala:34:39
  assign io_out_bits_ctrl_rfSrcA = _srcAType_T_19 ? 5'h0 : io_in_bits_instr[19:15];	// <stdin>:143:10, :832:10, IDU.scala:48:34, :57:39, Mux.scala:27:73
  assign io_out_bits_ctrl_rfSrcB = _srcBType_T_19 ? 5'h0 : io_in_bits_instr[24:20];	// <stdin>:143:10, :832:10, IDU.scala:48:49, :57:39, :58:39, Mux.scala:27:73
  assign io_out_bits_ctrl_rfWen = decodeList_0[2];	// <stdin>:143:10, :832:10, InstrDecode.scala:23:55, Lookup.scala:34:39
  assign io_out_bits_ctrl_rfDest = decodeList_0[2] ? io_in_bits_instr[11:7] : 5'h0;	// <stdin>:143:10, :832:10, IDU.scala:48:64, :57:39, :60:39, InstrDecode.scala:23:55, Lookup.scala:34:39
  assign io_out_bits_data_imm = (_imm_T_37 ? {{52{io_in_bits_instr[31]}}, io_in_bits_instr[31:20]} : 64'h0) | (decodeList_0
                == 3'h2 ? {{52{io_in_bits_instr[31]}}, io_in_bits_instr[31:25], io_in_bits_instr[11:7]} :
                64'h0) | (decodeList_0 == 3'h1 ? {{52{io_in_bits_instr[31]}}, io_in_bits_instr[7],
                io_in_bits_instr[30:25], io_in_bits_instr[11:8], 1'h0} : 64'h0) | (_imm_T_41 ?
                {{32{io_in_bits_instr[31]}}, io_in_bits_instr[31:12], 12'h0} : 64'h0) | ((&decodeList_0) ?
                {{44{io_in_bits_instr[31]}}, io_in_bits_instr[19:12], io_in_bits_instr[20],
                io_in_bits_instr[30:21], 1'h0} : 64'h0);	// <stdin>:143:10, :832:10, BitUtils.scala:17:32, Bitwise.scala:77:12, Cat.scala:33:92, IDU.scala:48:64, :64:41, :65:45, :67:{45,56,66,81}, :68:45, :69:{56,71,82}, Lookup.scala:34:39, LookupTree.scala:8:38, Mux.scala:27:73
  assign io_isWFI = io_in_bits_instr[31:0] == 32'h10500073 & io_in_valid;	// <stdin>:143:10, :832:10, IDU.scala:122:{28,49}, Lookup.scala:31:38
endmodule

module IDU(	// <stdin>:1521:10
  input         io_in_0_valid,
  input  [63:0] io_in_0_bits_instr,
                io_in_0_bits_pc,
                io_in_0_bits_pnpc,
  input         io_out_0_ready,
                io_out_1_ready,
  output        io_in_0_ready,
                io_out_0_valid,
  output [63:0] io_out_0_bits_cf_instr,
                io_out_0_bits_cf_pc,
                io_out_0_bits_cf_pnpc,
  output        io_out_0_bits_cf_exceptionVec_2,
                io_out_0_bits_ctrl_srcAType,
                io_out_0_bits_ctrl_srcBType,
  output [2:0]  io_out_0_bits_ctrl_fuType,
  output [6:0]  io_out_0_bits_ctrl_fuCtrl,
  output [4:0]  io_out_0_bits_ctrl_rfSrcA,
                io_out_0_bits_ctrl_rfSrcB,
  output        io_out_0_bits_ctrl_rfWen,
  output [4:0]  io_out_0_bits_ctrl_rfDest,
  output [63:0] io_out_0_bits_data_imm,
  output        io_out_1_valid,
  output [63:0] io_out_1_bits_cf_instr,
                io_out_1_bits_cf_pc,
                io_out_1_bits_cf_pnpc,
  output        io_out_1_bits_cf_exceptionVec_2,
                io_out_1_bits_ctrl_srcAType,
                io_out_1_bits_ctrl_srcBType,
  output [2:0]  io_out_1_bits_ctrl_fuType,
  output [6:0]  io_out_1_bits_ctrl_fuCtrl,
  output [4:0]  io_out_1_bits_ctrl_rfSrcA,
                io_out_1_bits_ctrl_rfSrcB,
  output        io_out_1_bits_ctrl_rfWen,
  output [4:0]  io_out_1_bits_ctrl_rfDest,
  output [63:0] io_out_1_bits_data_imm);

  wire _decoder2_io_in_ready;	// IDU.scala:134:30
  wire _decoder2_io_isWFI;	// IDU.scala:134:30
  wire _decoder1_io_isWFI;	// IDU.scala:133:30
  wire _WIRE = _decoder1_io_isWFI | _decoder2_io_isWFI;	// <stdin>:1547:5, IDU.scala:133:30, :134:30, :151:66
  Decoder decoder1 (	// IDU.scala:133:30
    .io_in_valid                   (io_in_0_valid),
    .io_in_bits_instr              (io_in_0_bits_instr),
    .io_in_bits_pc                 (io_in_0_bits_pc),
    .io_in_bits_pnpc               (io_in_0_bits_pnpc),
    .io_out_ready                  (io_out_0_ready),
    .io_in_ready                   (io_in_0_ready),
    .io_out_valid                  (io_out_0_valid),
    .io_out_bits_cf_instr          (io_out_0_bits_cf_instr),
    .io_out_bits_cf_pc             (io_out_0_bits_cf_pc),
    .io_out_bits_cf_pnpc           (io_out_0_bits_cf_pnpc),
    .io_out_bits_cf_exceptionVec_2 (io_out_0_bits_cf_exceptionVec_2),
    .io_out_bits_ctrl_srcAType     (io_out_0_bits_ctrl_srcAType),
    .io_out_bits_ctrl_srcBType     (io_out_0_bits_ctrl_srcBType),
    .io_out_bits_ctrl_fuType       (io_out_0_bits_ctrl_fuType),
    .io_out_bits_ctrl_fuCtrl       (io_out_0_bits_ctrl_fuCtrl),
    .io_out_bits_ctrl_rfSrcA       (io_out_0_bits_ctrl_rfSrcA),
    .io_out_bits_ctrl_rfSrcB       (io_out_0_bits_ctrl_rfSrcB),
    .io_out_bits_ctrl_rfWen        (io_out_0_bits_ctrl_rfWen),
    .io_out_bits_ctrl_rfDest       (io_out_0_bits_ctrl_rfDest),
    .io_out_bits_data_imm          (io_out_0_bits_data_imm),
    .io_isWFI                      (_decoder1_io_isWFI)
  );
  Decoder decoder2 (	// IDU.scala:134:30
    .io_in_valid                   (1'h0),	// <stdin>:1521:10
    .io_in_bits_instr              (64'h0),	// <stdin>:1521:10
    .io_in_bits_pc                 (64'h0),	// <stdin>:1521:10
    .io_in_bits_pnpc               (64'h0),	// <stdin>:1521:10
    .io_out_ready                  (io_out_1_ready),
    .io_in_ready                   (_decoder2_io_in_ready),
    .io_out_valid                  (io_out_1_valid),
    .io_out_bits_cf_instr          (io_out_1_bits_cf_instr),
    .io_out_bits_cf_pc             (io_out_1_bits_cf_pc),
    .io_out_bits_cf_pnpc           (io_out_1_bits_cf_pnpc),
    .io_out_bits_cf_exceptionVec_2 (io_out_1_bits_cf_exceptionVec_2),
    .io_out_bits_ctrl_srcAType     (io_out_1_bits_ctrl_srcAType),
    .io_out_bits_ctrl_srcBType     (io_out_1_bits_ctrl_srcBType),
    .io_out_bits_ctrl_fuType       (io_out_1_bits_ctrl_fuType),
    .io_out_bits_ctrl_fuCtrl       (io_out_1_bits_ctrl_fuCtrl),
    .io_out_bits_ctrl_rfSrcA       (io_out_1_bits_ctrl_rfSrcA),
    .io_out_bits_ctrl_rfSrcB       (io_out_1_bits_ctrl_rfSrcB),
    .io_out_bits_ctrl_rfWen        (io_out_1_bits_ctrl_rfWen),
    .io_out_bits_ctrl_rfDest       (io_out_1_bits_ctrl_rfDest),
    .io_out_bits_data_imm          (io_out_1_bits_data_imm),
    .io_isWFI                      (_decoder2_io_isWFI)
  );
endmodule

module Frontend_embedded(	// <stdin>:1550:10
  input         clock,
                reset,
                io_imem_ar_ready,
                io_imem_r_valid,
  input  [63:0] io_imem_r_bits_data,
  input         io_out_0_ready,
                io_out_1_ready,
  input  [63:0] io_redirect_target,
  input         io_redirect_valid,
  output        io_imem_ar_valid,
  output [31:0] io_imem_ar_bits_addr,
  output        io_imem_r_ready,
                io_out_0_valid,
  output [63:0] io_out_0_bits_cf_instr,
                io_out_0_bits_cf_pc,
                io_out_0_bits_cf_pnpc,
  output        io_out_0_bits_cf_exceptionVec_2,
                io_out_0_bits_ctrl_srcAType,
                io_out_0_bits_ctrl_srcBType,
  output [2:0]  io_out_0_bits_ctrl_fuType,
  output [6:0]  io_out_0_bits_ctrl_fuCtrl,
  output [4:0]  io_out_0_bits_ctrl_rfSrcA,
                io_out_0_bits_ctrl_rfSrcB,
  output        io_out_0_bits_ctrl_rfWen,
  output [4:0]  io_out_0_bits_ctrl_rfDest,
  output [63:0] io_out_0_bits_data_imm,
  output        io_out_1_valid,
  output [63:0] io_out_1_bits_cf_instr,
                io_out_1_bits_cf_pc,
                io_out_1_bits_cf_pnpc,
  output        io_out_1_bits_cf_exceptionVec_2,
                io_out_1_bits_ctrl_srcAType,
                io_out_1_bits_ctrl_srcBType,
  output [2:0]  io_out_1_bits_ctrl_fuType,
  output [6:0]  io_out_1_bits_ctrl_fuCtrl,
  output [4:0]  io_out_1_bits_ctrl_rfSrcA,
                io_out_1_bits_ctrl_rfSrcB,
  output        io_out_1_bits_ctrl_rfWen,
  output [4:0]  io_out_1_bits_ctrl_rfDest,
  output [63:0] io_out_1_bits_data_imm,
  output [3:0]  io_flushVec);

  wire        _idu_io_in_0_ready;	// Frontend.scala:24:25
  wire        _idu_io_out_0_valid;	// Frontend.scala:24:25
  wire        _ifu_io_out_valid;	// Frontend.scala:23:25
  wire [63:0] _ifu_io_out_bits_instr;	// Frontend.scala:23:25
  wire [63:0] _ifu_io_out_bits_pc;	// Frontend.scala:23:25
  wire [63:0] _ifu_io_out_bits_pnpc;	// Frontend.scala:23:25
  wire [3:0]  _ifu_io_flushVec;	// Frontend.scala:23:25
  reg         valid;	// Pipeline.scala:10:28
  reg  [63:0] idu_io_in_0_bits_r_instr;	// Reg.scala:19:16
  reg  [63:0] idu_io_in_0_bits_r_pc;	// Reg.scala:19:16
  reg  [63:0] idu_io_in_0_bits_r_pnpc;	// Reg.scala:19:16
  reg  [63:0] c;	// GTimer.scala:8:32
  reg  [63:0] c_1;	// GTimer.scala:8:32
  reg  [63:0] c_2;	// GTimer.scala:8:32
  reg  [63:0] c_3;	// GTimer.scala:8:32
  always @(posedge clock) begin
    automatic logic _idu_io_in_0_bits_T;	// Pipeline.scala:12:26
    _idu_io_in_0_bits_T = _ifu_io_out_valid & _idu_io_in_0_ready;	// Frontend.scala:23:25, :24:25, Pipeline.scala:12:26
    if (reset) begin
      valid <= 1'h0;	// <stdin>:1550:10, Pipeline.scala:10:28
      c <= 64'h0;	// <stdin>:1550:10, GTimer.scala:8:32
      c_1 <= 64'h0;	// <stdin>:1550:10, GTimer.scala:8:32
      c_2 <= 64'h0;	// <stdin>:1550:10, GTimer.scala:8:32
      c_3 <= 64'h0;	// <stdin>:1550:10, GTimer.scala:8:32
    end
    else begin
      valid <= ~(_ifu_io_flushVec[0]) & (_idu_io_in_0_bits_T | ~(io_out_0_ready & _idu_io_out_0_valid) &
                                                valid);	// Decoupled.scala:52:35, Frontend.scala:23:25, :24:25, :26:86, Pipeline.scala:10:28, :11:{29,37}, :12:{26,42,50}, :13:{24,32}
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
      c_1 <= c_1 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_2 <= c_2 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_3 <= c_3 + 64'h1;	// GTimer.scala:8:32, :9:24
    end
    if (_idu_io_in_0_bits_T) begin	// Pipeline.scala:12:26
      idu_io_in_0_bits_r_instr <= _ifu_io_out_bits_instr;	// Frontend.scala:23:25, Reg.scala:19:16
      idu_io_in_0_bits_r_pc <= _ifu_io_out_bits_pc;	// Frontend.scala:23:25, Reg.scala:19:16
      idu_io_in_0_bits_r_pnpc <= _ifu_io_out_bits_pnpc;	// Frontend.scala:23:25, Reg.scala:19:16
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1550:10
    always @(posedge clock) begin	// Debug.scala:34:43
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] Frontend_embedded: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "---------------------- Frontend ----------------------\n");	// Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] Frontend_embedded: ", c_1);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "flush = %b, ifu:(%d,%d), idu:(%d,%d)\n", _ifu_io_flushVec, _ifu_io_out_valid, _idu_io_in_0_ready, valid, _idu_io_in_0_ready);	// Debug.scala:34:43, :35:31, Frontend.scala:23:25, :24:25, Pipeline.scala:10:28
      if ((`PRINTF_COND_) & _ifu_io_out_valid & ~reset)	// Debug.scala:34:43, Frontend.scala:23:25
        $fwrite(32'h80000002, "[%d] Frontend_embedded: ", c_2);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _ifu_io_out_valid & ~reset)	// Debug.scala:34:43, :35:31, Frontend.scala:23:25
        $fwrite(32'h80000002, "IFU: pc = 0x%x, instr = 0x%x\n", _ifu_io_out_bits_pc, _ifu_io_out_bits_instr);	// Debug.scala:34:43, :35:31, Frontend.scala:23:25
      if ((`PRINTF_COND_) & valid & ~reset)	// Debug.scala:34:43, Pipeline.scala:10:28
        $fwrite(32'h80000002, "[%d] Frontend_embedded: ", c_3);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & valid & ~reset)	// Debug.scala:34:43, :35:31, Pipeline.scala:10:28
        $fwrite(32'h80000002, "IDU1: pc = 0x%x, instr = 0x%x, pnpc = 0x%x\n", idu_io_in_0_bits_r_pc, idu_io_in_0_bits_r_instr, idu_io_in_0_bits_r_pnpc);	// Debug.scala:34:43, :35:31, Reg.scala:19:16
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1550:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1550:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:1550:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:1550:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1550:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1550:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1550:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_1 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_2 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_3 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_4 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_5 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_6 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_7 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_8 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_9 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_10 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_11 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_12 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_13 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_14 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_15 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_16 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_17 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_18 = `RANDOM;	// <stdin>:1550:10
        _RANDOM_19 = `RANDOM;	// <stdin>:1550:10
        valid = _RANDOM_0[0];	// Pipeline.scala:10:28
        idu_io_in_0_bits_r_instr = {_RANDOM_0[31:1], _RANDOM_1, _RANDOM_2[0]};	// Pipeline.scala:10:28, Reg.scala:19:16
        idu_io_in_0_bits_r_pc = {_RANDOM_2[31:1], _RANDOM_3, _RANDOM_4[0]};	// Reg.scala:19:16
        idu_io_in_0_bits_r_pnpc = {_RANDOM_4[31:1], _RANDOM_5, _RANDOM_6[0]};	// Reg.scala:19:16
        c = {_RANDOM_11[31:6], _RANDOM_12, _RANDOM_13[5:0]};	// GTimer.scala:8:32
        c_1 = {_RANDOM_13[31:6], _RANDOM_14, _RANDOM_15[5:0]};	// GTimer.scala:8:32
        c_2 = {_RANDOM_15[31:6], _RANDOM_16, _RANDOM_17[5:0]};	// GTimer.scala:8:32
        c_3 = {_RANDOM_17[31:6], _RANDOM_18, _RANDOM_19[5:0]};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1550:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1550:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  IFU_embedded ifu (	// Frontend.scala:23:25
    .clock                (clock),
    .reset                (reset),
    .io_imem_ar_ready     (io_imem_ar_ready),
    .io_imem_r_valid      (io_imem_r_valid),
    .io_imem_r_bits_data  (io_imem_r_bits_data),
    .io_out_ready         (_idu_io_in_0_ready),	// Frontend.scala:24:25
    .io_redirect_target   (io_redirect_target),
    .io_redirect_valid    (io_redirect_valid),
    .io_imem_ar_valid     (io_imem_ar_valid),
    .io_imem_ar_bits_addr (io_imem_ar_bits_addr),
    .io_imem_r_ready      (io_imem_r_ready),
    .io_out_valid         (_ifu_io_out_valid),
    .io_out_bits_instr    (_ifu_io_out_bits_instr),
    .io_out_bits_pc       (_ifu_io_out_bits_pc),
    .io_out_bits_pnpc     (_ifu_io_out_bits_pnpc),
    .io_flushVec          (_ifu_io_flushVec)
  );
  IDU idu (	// Frontend.scala:24:25
    .io_in_0_valid                   (valid),	// Pipeline.scala:10:28
    .io_in_0_bits_instr              (idu_io_in_0_bits_r_instr),	// Reg.scala:19:16
    .io_in_0_bits_pc                 (idu_io_in_0_bits_r_pc),	// Reg.scala:19:16
    .io_in_0_bits_pnpc               (idu_io_in_0_bits_r_pnpc),	// Reg.scala:19:16
    .io_out_0_ready                  (io_out_0_ready),
    .io_out_1_ready                  (io_out_1_ready),
    .io_in_0_ready                   (_idu_io_in_0_ready),
    .io_out_0_valid                  (_idu_io_out_0_valid),
    .io_out_0_bits_cf_instr          (io_out_0_bits_cf_instr),
    .io_out_0_bits_cf_pc             (io_out_0_bits_cf_pc),
    .io_out_0_bits_cf_pnpc           (io_out_0_bits_cf_pnpc),
    .io_out_0_bits_cf_exceptionVec_2 (io_out_0_bits_cf_exceptionVec_2),
    .io_out_0_bits_ctrl_srcAType     (io_out_0_bits_ctrl_srcAType),
    .io_out_0_bits_ctrl_srcBType     (io_out_0_bits_ctrl_srcBType),
    .io_out_0_bits_ctrl_fuType       (io_out_0_bits_ctrl_fuType),
    .io_out_0_bits_ctrl_fuCtrl       (io_out_0_bits_ctrl_fuCtrl),
    .io_out_0_bits_ctrl_rfSrcA       (io_out_0_bits_ctrl_rfSrcA),
    .io_out_0_bits_ctrl_rfSrcB       (io_out_0_bits_ctrl_rfSrcB),
    .io_out_0_bits_ctrl_rfWen        (io_out_0_bits_ctrl_rfWen),
    .io_out_0_bits_ctrl_rfDest       (io_out_0_bits_ctrl_rfDest),
    .io_out_0_bits_data_imm          (io_out_0_bits_data_imm),
    .io_out_1_valid                  (io_out_1_valid),
    .io_out_1_bits_cf_instr          (io_out_1_bits_cf_instr),
    .io_out_1_bits_cf_pc             (io_out_1_bits_cf_pc),
    .io_out_1_bits_cf_pnpc           (io_out_1_bits_cf_pnpc),
    .io_out_1_bits_cf_exceptionVec_2 (io_out_1_bits_cf_exceptionVec_2),
    .io_out_1_bits_ctrl_srcAType     (io_out_1_bits_ctrl_srcAType),
    .io_out_1_bits_ctrl_srcBType     (io_out_1_bits_ctrl_srcBType),
    .io_out_1_bits_ctrl_fuType       (io_out_1_bits_ctrl_fuType),
    .io_out_1_bits_ctrl_fuCtrl       (io_out_1_bits_ctrl_fuCtrl),
    .io_out_1_bits_ctrl_rfSrcA       (io_out_1_bits_ctrl_rfSrcA),
    .io_out_1_bits_ctrl_rfSrcB       (io_out_1_bits_ctrl_rfSrcB),
    .io_out_1_bits_ctrl_rfWen        (io_out_1_bits_ctrl_rfWen),
    .io_out_1_bits_ctrl_rfDest       (io_out_1_bits_ctrl_rfDest),
    .io_out_1_bits_data_imm          (io_out_1_bits_data_imm)
  );
  assign io_out_0_valid = _idu_io_out_0_valid;	// <stdin>:1550:10, Frontend.scala:24:25
  assign io_flushVec = _ifu_io_flushVec;	// <stdin>:1550:10, Frontend.scala:23:25
endmodule

module ISU(	// <stdin>:1741:10
  input         clock,
                reset,
                io_in_0_valid,
  input  [63:0] io_in_0_bits_cf_instr,
                io_in_0_bits_cf_pc,
                io_in_0_bits_cf_pnpc,
  input         io_in_0_bits_cf_exceptionVec_2,
                io_in_0_bits_ctrl_srcAType,
                io_in_0_bits_ctrl_srcBType,
  input  [2:0]  io_in_0_bits_ctrl_fuType,
  input  [6:0]  io_in_0_bits_ctrl_fuCtrl,
  input  [4:0]  io_in_0_bits_ctrl_rfSrcA,
                io_in_0_bits_ctrl_rfSrcB,
  input         io_in_0_bits_ctrl_rfWen,
  input  [4:0]  io_in_0_bits_ctrl_rfDest,
  input  [63:0] io_in_0_bits_data_imm,
  input         io_out_ready,
                io_wb_rfWen,
  input  [4:0]  io_wb_rfDest,
  input  [63:0] io_wb_rfData,
  input         io_forward_valid,
                io_forward_wb_rfWen,
  input  [4:0]  io_forward_wb_rfDest,
  input  [63:0] io_forward_wb_rfData,
  input  [2:0]  io_forward_fuType,
  input         io_flush,
  output        io_in_0_ready,
                io_out_valid,
  output [63:0] io_out_bits_cf_instr,
                io_out_bits_cf_pc,
                io_out_bits_cf_pnpc,
  output        io_out_bits_cf_exceptionVec_2,
  output [2:0]  io_out_bits_ctrl_fuType,
  output [6:0]  io_out_bits_ctrl_fuCtrl,
  output        io_out_bits_ctrl_rfWen,
  output [4:0]  io_out_bits_ctrl_rfDest,
  output [63:0] io_out_bits_data_srcA,
                io_out_bits_data_srcB,
                io_out_bits_data_imm,
                io_gpr_regs_1,
                io_gpr_regs_2,
                io_gpr_regs_3,
                io_gpr_regs_4,
                io_gpr_regs_5,
                io_gpr_regs_6,
                io_gpr_regs_7,
                io_gpr_regs_8,
                io_gpr_regs_9,
                io_gpr_regs_10,
                io_gpr_regs_11,
                io_gpr_regs_12,
                io_gpr_regs_13,
                io_gpr_regs_14,
                io_gpr_regs_15,
                io_gpr_regs_16,
                io_gpr_regs_17,
                io_gpr_regs_18,
                io_gpr_regs_19,
                io_gpr_regs_20,
                io_gpr_regs_21,
                io_gpr_regs_22,
                io_gpr_regs_23,
                io_gpr_regs_24,
                io_gpr_regs_25,
                io_gpr_regs_26,
                io_gpr_regs_27,
                io_gpr_regs_28,
                io_gpr_regs_29,
                io_gpr_regs_30,
                io_gpr_regs_31);

  wire [63:0] _rf_ext_R0_data;	// RegisterFile.scala:15:21
  wire [63:0] _rf_ext_R32_data;	// RegisterFile.scala:15:21
  wire [63:0] _rf_ext_R33_data;	// RegisterFile.scala:15:21
  wire        forwardRfWen = io_forward_wb_rfWen & io_forward_valid;	// ISU.scala:32:48
  wire        dontForward = (|io_forward_fuType) & io_forward_fuType != 3'h1;	// ISU.scala:33:{46,62,84}
  wire        srcADependEX = (|io_in_0_bits_ctrl_rfSrcA) & io_in_0_bits_ctrl_rfSrcA == io_forward_wb_rfDest &
                forwardRfWen;	// ISU.scala:30:{75,94,106}, :32:48
  wire        srcBDependEX = (|io_in_0_bits_ctrl_rfSrcB) & io_in_0_bits_ctrl_rfSrcB == io_forward_wb_rfDest &
                forwardRfWen;	// ISU.scala:30:{75,94,106}, :32:48
  wire        srcAForwardNextCycle = srcADependEX & ~dontForward;	// ISU.scala:30:106, :33:62, :39:{49,52}
  wire        srcBForwardNextCycle = srcBDependEX & ~dontForward;	// ISU.scala:30:106, :33:62, :39:52, :40:49
  wire        srcAForward = (|io_in_0_bits_ctrl_rfSrcA) & io_in_0_bits_ctrl_rfSrcA == io_wb_rfDest & io_wb_rfWen &
                (~dontForward | ~srcADependEX);	// ISU.scala:30:{75,94,106}, :33:62, :41:{40,46,60}
  wire        srcBForward = (|io_in_0_bits_ctrl_rfSrcB) & io_in_0_bits_ctrl_rfSrcB == io_wb_rfDest & io_wb_rfWen &
                (~dontForward | ~srcBDependEX);	// ISU.scala:30:{75,94,106}, :33:62, :41:46, :42:{40,46,60}
  reg  [31:0] busy;	// RegisterFile.scala:27:27
  wire [31:0] _srcAReady_T = busy >> io_in_0_bits_ctrl_rfSrcA;	// RegisterFile.scala:27:27, :28:43
  wire [31:0] _srcBReady_T = busy >> io_in_0_bits_ctrl_rfSrcB;	// RegisterFile.scala:27:27, :28:43
  wire        _io_out_valid_T_1 = io_in_0_valid & (~(_srcAReady_T[0]) | srcAForwardNextCycle | srcAForward) &
                (~(_srcBReady_T[0]) | srcBForwardNextCycle | srcBForward);	// ISU.scala:39:49, :40:49, :41:40, :42:40, :45:{25,68}, :46:{25,68}, :47:53, RegisterFile.scala:28:43
  wire        _io_in_0_ready_T_1 = io_out_ready & _io_out_valid_T_1;	// Decoupled.scala:52:35, ISU.scala:47:53
  always @(posedge clock) begin
    if (reset)
      busy <= 32'h0;	// RegisterFile.scala:27:27
    else if (io_flush)
      busy <= 32'h0;	// RegisterFile.scala:27:27
    else begin
      automatic logic [62:0] _wbClearMask_T_6 = 63'h1 << io_wb_rfDest;	// RegisterFile.scala:29:45
      automatic logic [62:0] _isuFireSetMask_T_1 = 63'h1 << io_in_0_bits_ctrl_rfDest;	// RegisterFile.scala:29:45
      busy <= {busy[31:1] & ~(io_wb_rfWen & ~((|io_wb_rfDest) & io_wb_rfDest == io_forward_wb_rfDest &
                                                forwardRfWen) ? _wbClearMask_T_6[31:1] : 31'h0) | (_io_in_0_ready_T_1 ?
                                                _isuFireSetMask_T_1[31:1] : 31'h0), 1'h0};	// <stdin>:1741:10, Cat.scala:33:92, Decoupled.scala:52:35, ISU.scala:30:{75,94,106}, :32:48, :83:{30,43,46}, :84:33, RegisterFile.scala:27:27, :29:{45,52}, :35:{36,38,50}
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:1741:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:1741:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:1741:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:1741:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:1741:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:1741:10
        `INIT_RANDOM_PROLOG_	// <stdin>:1741:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:1741:10
        _RANDOM_0 = `RANDOM;	// <stdin>:1741:10
        busy = _RANDOM_0;	// RegisterFile.scala:27:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:1741:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:1741:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  rf_combMem rf_ext (	// RegisterFile.scala:15:21
    .R0_addr  (5'h0),	// RegisterFile.scala:16:63
    .R0_en    (1'h1),	// <stdin>:1741:10
    .R0_clk   (clock),
    .R1_addr  (5'hA),	// RegisterFile.scala:16:63
    .R1_en    (1'h1),	// <stdin>:1741:10
    .R1_clk   (clock),
    .R2_addr  (5'hB),	// RegisterFile.scala:16:63
    .R2_en    (1'h1),	// <stdin>:1741:10
    .R2_clk   (clock),
    .R3_addr  (5'hC),	// RegisterFile.scala:16:63
    .R3_en    (1'h1),	// <stdin>:1741:10
    .R3_clk   (clock),
    .R4_addr  (5'hD),	// RegisterFile.scala:16:63
    .R4_en    (1'h1),	// <stdin>:1741:10
    .R4_clk   (clock),
    .R5_addr  (5'hE),	// RegisterFile.scala:16:63
    .R5_en    (1'h1),	// <stdin>:1741:10
    .R5_clk   (clock),
    .R6_addr  (5'hF),	// RegisterFile.scala:16:63
    .R6_en    (1'h1),	// <stdin>:1741:10
    .R6_clk   (clock),
    .R7_addr  (5'h10),	// RegisterFile.scala:16:47
    .R7_en    (1'h1),	// <stdin>:1741:10
    .R7_clk   (clock),
    .R8_addr  (5'h11),	// RegisterFile.scala:16:47
    .R8_en    (1'h1),	// <stdin>:1741:10
    .R8_clk   (clock),
    .R9_addr  (5'h12),	// RegisterFile.scala:16:47
    .R9_en    (1'h1),	// <stdin>:1741:10
    .R9_clk   (clock),
    .R10_addr (5'h13),	// RegisterFile.scala:16:47
    .R10_en   (1'h1),	// <stdin>:1741:10
    .R10_clk  (clock),
    .R11_addr (5'h1),	// RegisterFile.scala:16:63
    .R11_en   (1'h1),	// <stdin>:1741:10
    .R11_clk  (clock),
    .R12_addr (5'h14),	// RegisterFile.scala:16:47
    .R12_en   (1'h1),	// <stdin>:1741:10
    .R12_clk  (clock),
    .R13_addr (5'h15),	// RegisterFile.scala:16:47
    .R13_en   (1'h1),	// <stdin>:1741:10
    .R13_clk  (clock),
    .R14_addr (5'h16),	// RegisterFile.scala:16:47
    .R14_en   (1'h1),	// <stdin>:1741:10
    .R14_clk  (clock),
    .R15_addr (5'h17),	// RegisterFile.scala:16:47
    .R15_en   (1'h1),	// <stdin>:1741:10
    .R15_clk  (clock),
    .R16_addr (5'h18),	// RegisterFile.scala:16:47
    .R16_en   (1'h1),	// <stdin>:1741:10
    .R16_clk  (clock),
    .R17_addr (5'h19),	// RegisterFile.scala:16:47
    .R17_en   (1'h1),	// <stdin>:1741:10
    .R17_clk  (clock),
    .R18_addr (5'h1A),	// RegisterFile.scala:16:47
    .R18_en   (1'h1),	// <stdin>:1741:10
    .R18_clk  (clock),
    .R19_addr (5'h1B),	// RegisterFile.scala:16:47
    .R19_en   (1'h1),	// <stdin>:1741:10
    .R19_clk  (clock),
    .R20_addr (5'h1C),	// RegisterFile.scala:16:47
    .R20_en   (1'h1),	// <stdin>:1741:10
    .R20_clk  (clock),
    .R21_addr (5'h1D),	// RegisterFile.scala:16:47
    .R21_en   (1'h1),	// <stdin>:1741:10
    .R21_clk  (clock),
    .R22_addr (5'h2),	// RegisterFile.scala:16:63
    .R22_en   (1'h1),	// <stdin>:1741:10
    .R22_clk  (clock),
    .R23_addr (5'h1E),	// RegisterFile.scala:16:47
    .R23_en   (1'h1),	// <stdin>:1741:10
    .R23_clk  (clock),
    .R24_addr (5'h1F),	// RegisterFile.scala:16:47
    .R24_en   (1'h1),	// <stdin>:1741:10
    .R24_clk  (clock),
    .R25_addr (5'h3),	// RegisterFile.scala:16:63
    .R25_en   (1'h1),	// <stdin>:1741:10
    .R25_clk  (clock),
    .R26_addr (5'h4),	// RegisterFile.scala:16:63
    .R26_en   (1'h1),	// <stdin>:1741:10
    .R26_clk  (clock),
    .R27_addr (5'h5),	// RegisterFile.scala:16:63
    .R27_en   (1'h1),	// <stdin>:1741:10
    .R27_clk  (clock),
    .R28_addr (5'h6),	// RegisterFile.scala:16:63
    .R28_en   (1'h1),	// <stdin>:1741:10
    .R28_clk  (clock),
    .R29_addr (5'h7),	// RegisterFile.scala:16:63
    .R29_en   (1'h1),	// <stdin>:1741:10
    .R29_clk  (clock),
    .R30_addr (5'h8),	// RegisterFile.scala:16:63
    .R30_en   (1'h1),	// <stdin>:1741:10
    .R30_clk  (clock),
    .R31_addr (5'h9),	// RegisterFile.scala:16:63
    .R31_en   (1'h1),	// <stdin>:1741:10
    .R31_clk  (clock),
    .R32_addr (io_in_0_bits_ctrl_rfSrcA),
    .R32_en   (1'h1),	// <stdin>:1741:10
    .R32_clk  (clock),
    .R33_addr (io_in_0_bits_ctrl_rfSrcB),
    .R33_en   (1'h1),	// <stdin>:1741:10
    .R33_clk  (clock),
    .W0_addr  (io_wb_rfDest),
    .W0_en    (io_wb_rfWen),
    .W0_clk   (clock),
    .W0_data  (io_wb_rfData),
    .R0_data  (_rf_ext_R0_data),
    .R1_data  (io_gpr_regs_10),
    .R2_data  (io_gpr_regs_11),
    .R3_data  (io_gpr_regs_12),
    .R4_data  (io_gpr_regs_13),
    .R5_data  (io_gpr_regs_14),
    .R6_data  (io_gpr_regs_15),
    .R7_data  (io_gpr_regs_16),
    .R8_data  (io_gpr_regs_17),
    .R9_data  (io_gpr_regs_18),
    .R10_data (io_gpr_regs_19),
    .R11_data (io_gpr_regs_1),
    .R12_data (io_gpr_regs_20),
    .R13_data (io_gpr_regs_21),
    .R14_data (io_gpr_regs_22),
    .R15_data (io_gpr_regs_23),
    .R16_data (io_gpr_regs_24),
    .R17_data (io_gpr_regs_25),
    .R18_data (io_gpr_regs_26),
    .R19_data (io_gpr_regs_27),
    .R20_data (io_gpr_regs_28),
    .R21_data (io_gpr_regs_29),
    .R22_data (io_gpr_regs_2),
    .R23_data (io_gpr_regs_30),
    .R24_data (io_gpr_regs_31),
    .R25_data (io_gpr_regs_3),
    .R26_data (io_gpr_regs_4),
    .R27_data (io_gpr_regs_5),
    .R28_data (io_gpr_regs_6),
    .R29_data (io_gpr_regs_7),
    .R30_data (io_gpr_regs_8),
    .R31_data (io_gpr_regs_9),
    .R32_data (_rf_ext_R32_data),
    .R33_data (_rf_ext_R33_data)
  );
  assign io_in_0_ready = ~io_in_0_valid | _io_in_0_ready_T_1;	// <stdin>:1741:10, Decoupled.scala:52:35, ISU.scala:88:{27,43}
  assign io_out_valid = _io_out_valid_T_1;	// <stdin>:1741:10, ISU.scala:47:53
  assign io_out_bits_cf_instr = io_in_0_bits_cf_instr;	// <stdin>:1741:10
  assign io_out_bits_cf_pc = io_in_0_bits_cf_pc;	// <stdin>:1741:10
  assign io_out_bits_cf_pnpc = io_in_0_bits_cf_pnpc;	// <stdin>:1741:10
  assign io_out_bits_cf_exceptionVec_2 = io_in_0_bits_cf_exceptionVec_2;	// <stdin>:1741:10
  assign io_out_bits_ctrl_fuType = io_in_0_bits_ctrl_fuType;	// <stdin>:1741:10
  assign io_out_bits_ctrl_fuCtrl = io_in_0_bits_ctrl_fuCtrl;	// <stdin>:1741:10
  assign io_out_bits_ctrl_rfWen = io_in_0_bits_ctrl_rfWen;	// <stdin>:1741:10
  assign io_out_bits_ctrl_rfDest = io_in_0_bits_ctrl_rfDest;	// <stdin>:1741:10
  assign io_out_bits_data_srcA = (io_in_0_bits_ctrl_srcAType ? io_in_0_bits_cf_pc : 64'h0) | (srcAForwardNextCycle ?
                io_forward_wb_rfData : 64'h0) | (srcAForward & ~srcAForwardNextCycle ? io_wb_rfData :
                64'h0) | (io_in_0_bits_ctrl_srcAType | srcAForwardNextCycle | srcAForward |
                io_in_0_bits_ctrl_rfSrcA == 5'h0 ? 64'h0 : _rf_ext_R32_data);	// <stdin>:1741:10, ISU.scala:39:49, :41:40, :65:{30,33}, Mux.scala:27:73, RegisterFile.scala:15:21, :16:{47,63}
  assign io_out_bits_data_srcB = (io_in_0_bits_ctrl_srcBType ? io_in_0_bits_data_imm : 64'h0) | (srcBForwardNextCycle ?
                io_forward_wb_rfData : 64'h0) | (srcBForward & ~srcBForwardNextCycle ? io_wb_rfData :
                64'h0) | (io_in_0_bits_ctrl_srcBType | srcBForwardNextCycle | srcBForward |
                io_in_0_bits_ctrl_rfSrcB == 5'h0 ? 64'h0 : _rf_ext_R33_data);	// <stdin>:1741:10, ISU.scala:40:49, :42:40, :71:{30,33}, Mux.scala:27:73, RegisterFile.scala:15:21, :16:{47,63}
  assign io_out_bits_data_imm = io_in_0_bits_data_imm;	// <stdin>:1741:10
endmodule

module ALU(	// <stdin>:2062:10
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_srcA,
                io_in_bits_srcB,
  input  [6:0]  io_in_bits_ctrl,
  input  [63:0] io_cfIn_instr,
                io_cfIn_pc,
                io_cfIn_pnpc,
                io_offset,
  output        io_out_valid,
  output [63:0] io_out_bits,
                io_redirect_target,
  output        io_redirect_valid);

  wire [64:0]  adderRes = {1'h0, io_in_bits_srcA} + {1'h0, io_in_bits_srcB ^ {64{~(io_in_bits_ctrl[6])}}} + {64'h0,
                ~(io_in_bits_ctrl[6])};	// <stdin>:2062:10, ALU.scala:48:37, :77:27, :78:{33,42,68}, Bitwise.scala:77:12
  wire [63:0]  xorRes = io_in_bits_srcA ^ io_in_bits_srcB;	// ALU.scala:79:40
  wire         slt = xorRes[63] ^ ~(adderRes[64]);	// ALU.scala:78:68, :79:40, :80:{35,44}, :81:{41,50}
  wire [63:0]  shsrcA = io_in_bits_ctrl == 7'h2D ? {{32{io_in_bits_srcA[31]}}, io_in_bits_srcA[31:0]} :
                io_in_bits_ctrl == 7'h25 ? {32'h0, io_in_bits_srcA[31:0]} : io_in_bits_srcA;	// ALU.scala:87:56, BitUtils.scala:17:32, Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire [5:0]   shamt = io_in_bits_ctrl[5] ? {1'h0, io_in_bits_srcB[4:0]} : io_in_bits_srcB[5:0];	// <stdin>:2062:10, ALU.scala:50:40, :91:{24,53,81}
  wire [126:0] _res_T_1 = {63'h0, shsrcA} << shamt;	// ALU.scala:91:24, :96:61, Cat.scala:33:92, Mux.scala:81:58
  wire [63:0]  _GEN = {58'h0, shamt};	// ALU.scala:91:24, :100:60
  wire [63:0]  _GEN_0 = io_in_bits_ctrl[3:0] == 4'hD ? $signed($signed(shsrcA) >>> _GEN) : io_in_bits_ctrl[3:0] ==
                4'h7 ? io_in_bits_srcA & io_in_bits_srcB : io_in_bits_ctrl[3:0] == 4'h6 ? io_in_bits_srcA |
                io_in_bits_srcB : io_in_bits_ctrl[3:0] == 4'h5 ? shsrcA >> _GEN : io_in_bits_ctrl[3:0] ==
                4'h4 ? xorRes : io_in_bits_ctrl[3:0] == 4'h3 ? {63'h0, ~(adderRes[64])} :
                io_in_bits_ctrl[3:0] == 4'h2 ? {63'h0, slt} : io_in_bits_ctrl[3:0] == 4'h1 ? _res_T_1[63:0]
                : adderRes[63:0];	// ALU.scala:78:68, :79:40, :80:{35,44}, :81:50, :93:21, :96:{61,70}, :100:60, :101:58, :102:58, :103:68, Cat.scala:33:92, Mux.scala:81:{58,61}
  wire         taken = (io_in_bits_ctrl[2:1] == 2'h0 & xorRes == 64'h0 | io_in_bits_ctrl[2:1] == 2'h2 & slt |
                (&(io_in_bits_ctrl[2:1])) & ~(adderRes[64])) ^ io_in_bits_ctrl[0];	// ALU.scala:53:45, :54:46, :78:68, :79:40, :80:{35,44}, :81:50, :109:68, :123:76, Bitwise.scala:77:12, LookupTree.scala:8:38, Mux.scala:27:73, :81:61
  wire         _predictWrong_T_1 = ~taken & ~(io_in_bits_ctrl[3]);	// ALU.scala:52:{36,41}, :123:76, :125:{32,39}
  reg  [63:0]  c;	// GTimer.scala:8:32
  wire [63:0]  _io_redirect_target_T_7 = taken | io_in_bits_ctrl[3] ? (io_in_bits_ctrl[3] ? adderRes[63:0] : io_cfIn_pc + io_offset)
                : (&(io_cfIn_instr[1:0])) ? io_cfIn_pc + 64'h4 : io_cfIn_pc + 64'h2;	// ALU.scala:52:41, :78:68, :123:76, :124:{25,61}, :126:{35,42}, :131:{34,58,77,95}
  wire         _T_38 = io_in_valid & io_in_bits_ctrl[4];	// ALU.scala:51:37, :133:36
  wire         _io_redirect_valid_T_1 = _T_38 & ~_predictWrong_T_1;	// ALU.scala:125:{31,39}, :133:{36,45}
  reg  [63:0]  c_1;	// GTimer.scala:8:32
  reg  [63:0]  c_2;	// GTimer.scala:8:32
  reg  [63:0]  c_3;	// GTimer.scala:8:32
  reg  [63:0]  c_4;	// GTimer.scala:8:32
  always @(posedge clock) begin
    if (reset) begin
      c <= 64'h0;	// Bitwise.scala:77:12, GTimer.scala:8:32
      c_1 <= 64'h0;	// Bitwise.scala:77:12, GTimer.scala:8:32
      c_2 <= 64'h0;	// Bitwise.scala:77:12, GTimer.scala:8:32
      c_3 <= 64'h0;	// Bitwise.scala:77:12, GTimer.scala:8:32
      c_4 <= 64'h0;	// Bitwise.scala:77:12, GTimer.scala:8:32
    end
    else begin
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
      c_1 <= c_1 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_2 <= c_2 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_3 <= c_3 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_4 <= c_4 + 64'h1;	// GTimer.scala:8:32, :9:24
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2062:10
    always @(posedge clock) begin	// ALU.scala:127:15
      automatic logic _T_15 = io_in_valid & (&(io_cfIn_instr[1:0])) != (&(io_cfIn_instr[1:0]));	// ALU.scala:126:{35,42}, :128:{21,45,58}
      if (~reset & ~((&(io_cfIn_instr[1:0])) | ~(&(io_cfIn_instr[1:0])) | ~io_in_valid)) begin	// ALU.scala:126:{35,42}, :127:{15,36,57,60}
        if (`ASSERT_VERBOSE_COND_)	// ALU.scala:127:15
          $error("Assertion failed\n    at ALU.scala:127 assert(io.cfIn.instr(1, 0) === \"b11\".U || isRVC || !valid)\n");	// ALU.scala:127:15
        if (`STOP_COND_)	// ALU.scala:127:15
          $fatal;	// ALU.scala:127:15
      end
      if ((`PRINTF_COND_) & _T_15 & ~reset)	// ALU.scala:128:21, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] ALU: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_15 & ~reset)	// ALU.scala:128:21, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[ERROR] pc %x inst %x rvc %x\n", io_cfIn_pc, io_cfIn_instr, ~(&(io_cfIn_instr[1:0])));	// ALU.scala:126:{35,42}, Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & _T_38 & ~reset)	// ALU.scala:133:36, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] ALU: ", c_1);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_38 & ~reset)	// ALU.scala:133:36, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "tgt %x valid %d npc %x pdwrong %x\n", _io_redirect_target_T_7, _io_redirect_valid_T_1, io_cfIn_pnpc, ~_predictWrong_T_1);	// ALU.scala:125:{31,39}, :131:34, :133:45, Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & _T_38 & ~reset)	// ALU.scala:133:36, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] ALU: ", c_2);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_38 & ~reset)	// ALU.scala:133:36, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "taken %d addrRes %x srcA %x srcB %x ctrl %x\n", taken, adderRes, io_in_bits_srcA, io_in_bits_srcB, io_in_bits_ctrl);	// ALU.scala:78:68, :123:76, Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & _T_38 & ~reset)	// ALU.scala:133:36, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] ALU: ", c_3);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_38 & ~reset)	// ALU.scala:133:36, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[BPW] pc %x tgt %x npc %x pdWrong %x type %x%x%x%x\n", io_cfIn_pc, _io_redirect_target_T_7, io_cfIn_pnpc, ~_predictWrong_T_1, ~(io_in_bits_ctrl[3]), io_in_bits_ctrl == 7'h58 | io_in_bits_ctrl == 7'h5C, io_in_bits_ctrl == 7'h5A, io_in_bits_ctrl == 7'h5E);	// ALU.scala:52:{36,41}, :125:{31,39}, :131:34, :158:{23,39,47}, :159:{22,45}, Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] ALU: ", c_4);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "valid %d isBru %d isBranch %d\n", io_in_valid, io_in_bits_ctrl[4], ~(io_in_bits_ctrl[3]));	// ALU.scala:51:37, :52:{36,41}, Debug.scala:34:43, :35:31
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2062:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2062:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:2062:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:2062:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2062:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2062:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2062:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_8 = `RANDOM;	// <stdin>:2062:10
        _RANDOM_9 = `RANDOM;	// <stdin>:2062:10
        c = {_RANDOM_0, _RANDOM_1};	// GTimer.scala:8:32
        c_1 = {_RANDOM_2, _RANDOM_3};	// GTimer.scala:8:32
        c_2 = {_RANDOM_4, _RANDOM_5};	// GTimer.scala:8:32
        c_3 = {_RANDOM_6, _RANDOM_7};	// GTimer.scala:8:32
        c_4 = {_RANDOM_8, _RANDOM_9};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2062:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2062:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_out_valid = io_in_valid;	// <stdin>:2062:10
  assign io_out_bits = io_in_bits_ctrl[4] ? ((&(io_cfIn_instr[1:0])) ? io_cfIn_pc + 64'h4 : io_cfIn_pc + 64'h2) :
                io_in_bits_ctrl[5] ? {{32{_GEN_0[31]}}, _GEN_0[31:0]} : _GEN_0;	// <stdin>:2062:10, ALU.scala:50:40, :51:37, :106:{25,61}, :126:{35,42}, :131:{77,95}, :145:{27,38,77,114}, BitUtils.scala:17:32, Bitwise.scala:77:12, Mux.scala:81:58
  assign io_redirect_target = _io_redirect_target_T_7;	// <stdin>:2062:10, ALU.scala:131:34
  assign io_redirect_valid = _io_redirect_valid_T_1;	// <stdin>:2062:10, ALU.scala:133:45
endmodule

module LSExecUnit(	// <stdin>:2290:10
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_srcA,
  input  [6:0]  io_in_bits_ctrl,
  input  [63:0] io_wdata,
  input         io_dmem_aw_ready,
                io_dmem_w_ready,
                io_dmem_b_valid,
                io_dmem_ar_ready,
                io_dmem_r_valid,
  input  [63:0] io_dmem_r_bits_data,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits,
  output        io_dmem_aw_valid,
  output [31:0] io_dmem_aw_bits_addr,
  output        io_dmem_w_valid,
  output [63:0] io_dmem_w_bits_data,
  output [7:0]  io_dmem_w_bits_strb,
  output        io_dmem_b_ready,
                io_dmem_ar_valid,
  output [31:0] io_dmem_ar_bits_addr,
  output        io_dmem_r_ready,
                io_ioLoadAddrMisaligned,
                io_ioStoreAddrMisaligned);

  wire        _io_ioStoreAddrMisaligned_T_2;	// UnpipelinedLSU.scala:294:54
  wire        _io_ioLoadAddrMisaligned_T_3;	// UnpipelinedLSU.scala:293:55
  reg  [63:0] addrLatch;	// UnpipelinedLSU.scala:179:32
  wire        isStore = io_in_valid & io_in_bits_ctrl[3];	// LSU.scala:25:45, UnpipelinedLSU.scala:180:29
  wire        partialLoad = ~isStore & io_in_bits_ctrl != 7'h3;	// UnpipelinedLSU.scala:180:29, :181:{27,36,45}
  reg  [1:0]  state_load;	// UnpipelinedLSU.scala:185:33
  reg         state_store;	// UnpipelinedLSU.scala:186:34
  wire        _io_in_ready_T = state_load == 2'h0;	// UnpipelinedLSU.scala:185:33, :188:29
  reg  [63:0] c;	// GTimer.scala:8:32
  wire        _reqWmask_T_1 = io_in_bits_ctrl[1:0] == 2'h1;	// LookupTree.scala:8:38, UnpipelinedLSU.scala:191:44, :222:27
  wire        _reqWmask_T_2 = io_in_bits_ctrl[1:0] == 2'h2;	// LookupTree.scala:8:38, UnpipelinedLSU.scala:197:50, :222:27
  wire [14:0] reqWmask = {7'h0, {4'h0, {2'h0, {1'h0, ~(|(io_in_bits_ctrl[1:0]))} | {2{_reqWmask_T_1}}} |
                {4{_reqWmask_T_2}}} | {8{&(io_in_bits_ctrl[1:0])}}} << io_in_bits_srcA[2:0];	// LookupTree.scala:8:38, Mux.scala:27:73, UnpipelinedLSU.scala:150:{20,27}, :179:32, :185:33, :222:27
  wire        wValid = io_in_valid & ~state_store & isStore & ~_io_ioLoadAddrMisaligned_T_3 &
                ~_io_ioStoreAddrMisaligned_T_2;	// UnpipelinedLSU.scala:180:29, :186:34, :204:30, :228:{71,96,99}, :293:55, :294:54
  wire        rValid = io_in_valid & _io_in_ready_T & ~isStore & ~_io_ioLoadAddrMisaligned_T_3 &
                ~_io_ioStoreAddrMisaligned_T_2;	// UnpipelinedLSU.scala:180:29, :181:27, :188:29, :228:{71,99}, :229:96, :293:55, :294:54
  wire        _io_out_valid_T_3 = state_load == 2'h1;	// UnpipelinedLSU.scala:185:33, :191:44, :235:36
  wire        _T_41 = _io_ioLoadAddrMisaligned_T_3 | _io_ioStoreAddrMisaligned_T_2;	// UnpipelinedLSU.scala:238:41, :293:55, :294:54
  wire        _T_34 = _io_out_valid_T_3 & io_dmem_r_valid;	// Decoupled.scala:52:35, UnpipelinedLSU.scala:235:36
  wire        _T_25 = state_store & io_dmem_b_valid;	// Decoupled.scala:52:35, UnpipelinedLSU.scala:186:34
  wire        _io_out_valid_T_10 = _T_41 | (partialLoad ? state_load == 2'h2 : _T_34 & _io_out_valid_T_3 | _T_25 &
                state_store);	// Decoupled.scala:52:35, UnpipelinedLSU.scala:181:36, :185:33, :186:34, :197:50, :235:36, :237:28, :238:41, :239:28, :240:36, :241:{38,70}, :242:38
  reg  [63:0] c_1;	// GTimer.scala:8:32
  reg  [63:0] rdataLatch;	// UnpipelinedLSU.scala:253:33
  wire [31:0] _GEN = (addrLatch[2:0] == 3'h1 ? rdataLatch[39:8] : 32'h0) | (addrLatch[2:0] == 3'h2 ?
                rdataLatch[47:16] : 32'h0) | (addrLatch[2:0] == 3'h3 ? rdataLatch[55:24] : 32'h0) |
                (addrLatch[2:0] == 3'h4 ? rdataLatch[63:32] : 32'h0);	// Bitwise.scala:77:12, LookupTree.scala:8:38, Mux.scala:27:73, UnpipelinedLSU.scala:179:32, :253:33, :254:46, :256:46, :257:46, :258:46, :259:46
  wire [23:0] _GEN_0 = _GEN[23:0] | (addrLatch[2:0] == 3'h5 ? rdataLatch[63:40] : 24'h0);	// LookupTree.scala:8:38, Mux.scala:27:73, UnpipelinedLSU.scala:179:32, :253:33, :254:46, :260:46
  wire [15:0] _GEN_1 = _GEN_0[15:0] | (addrLatch[2:0] == 3'h6 ? rdataLatch[63:48] : 16'h0);	// LookupTree.scala:8:38, Mux.scala:27:73, UnpipelinedLSU.scala:179:32, :253:33, :254:46, :261:46
  wire [31:0] _rdataPartialLoad_T_20 = (addrLatch[2:0] == 3'h0 ? rdataLatch[31:0] : 32'h0) | {_GEN[31:24], _GEN_0[23:16],
                _GEN_1[15:8], _GEN_1[7:0] | ((&(addrLatch[2:0])) ? rdataLatch[63:56] : 8'h0)};	// Bitwise.scala:77:12, LookupTree.scala:8:38, Mux.scala:27:73, UnpipelinedLSU.scala:179:32, :253:33, :254:46, :262:46
  wire        _addrAligned_T_17 = ~(|(io_in_bits_ctrl[1:0])) | io_in_bits_ctrl[1:0] == 2'h1 & ~(io_in_bits_srcA[0]) |
                io_in_bits_ctrl[1:0] == 2'h2 & io_in_bits_srcA[1:0] == 2'h0 | (&(io_in_bits_ctrl[1:0])) &
                io_in_bits_srcA[2:0] == 3'h0;	// LookupTree.scala:8:38, Mux.scala:27:73, UnpipelinedLSU.scala:150:27, :185:33, :191:44, :197:50, :222:27, :281:{33,37}, :282:{33,40}, :283:40
  reg  [63:0] c_2;	// GTimer.scala:8:32
  assign _io_ioLoadAddrMisaligned_T_3 = io_in_valid & ~isStore & ~_addrAligned_T_17;	// Mux.scala:27:73, UnpipelinedLSU.scala:180:29, :181:27, :293:{55,58}
  assign _io_ioStoreAddrMisaligned_T_2 = io_in_valid & isStore & ~_addrAligned_T_17;	// Mux.scala:27:73, UnpipelinedLSU.scala:180:29, :293:58, :294:54
  reg  [63:0] c_3;	// GTimer.scala:8:32
  always @(posedge clock) begin
    addrLatch <= io_in_bits_srcA;	// UnpipelinedLSU.scala:179:32
    rdataLatch <= io_dmem_r_bits_data;	// UnpipelinedLSU.scala:253:33
    if (reset) begin
      state_load <= 2'h0;	// UnpipelinedLSU.scala:185:33
      state_store <= 1'h0;	// UnpipelinedLSU.scala:179:32, :186:34
      c <= 64'h0;	// GTimer.scala:8:32
      c_1 <= 64'h0;	// GTimer.scala:8:32
      c_2 <= 64'h0;	// GTimer.scala:8:32
      c_3 <= 64'h0;	// GTimer.scala:8:32
    end
    else begin
      automatic logic [3:0][1:0] _GEN_2;	// UnpipelinedLSU.scala:185:33, :188:29, :190:57, :196:44, :201:50
      _GEN_2 = {{state_load}, {2'h0}, {_io_out_valid_T_3 & io_dmem_r_valid ? {partialLoad, 1'h0} :
                                                state_load}, {io_dmem_ar_ready & rValid & ~isStore ? 2'h1 : state_load}};	// Decoupled.scala:52:35, UnpipelinedLSU.scala:179:32, :180:29, :181:{27,36}, :185:33, :188:29, :190:{44,57}, :191:44, :196:44, :197:{44,50}, :201:50, :229:96, :235:36
      state_load <= _GEN_2[state_load];	// UnpipelinedLSU.scala:185:33, :188:29, :190:57, :196:44, :201:50
      if (state_store)	// UnpipelinedLSU.scala:186:34
        state_store <= (~state_store | ~(state_store & io_dmem_b_valid)) & state_store;	// Decoupled.scala:52:35, UnpipelinedLSU.scala:186:34, :204:30, :212:{44,58}
      else	// UnpipelinedLSU.scala:186:34
        state_store <= io_dmem_aw_ready & wValid & io_dmem_w_ready & isStore | state_store;	// UnpipelinedLSU.scala:180:29, :186:34, :206:{59,71}, :207:45, :228:96
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
      c_1 <= c_1 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_2 <= c_2 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_3 <= c_3 + 64'h1;	// GTimer.scala:8:32, :9:24
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2290:10
    always @(posedge clock) begin	// Debug.scala:34:43
      automatic logic _T_31 = io_dmem_aw_ready & io_dmem_w_ready;	// UnpipelinedLSU.scala:220:28
      automatic logic _T_32 = io_dmem_ar_ready & _io_out_valid_T_3;	// UnpipelinedLSU.scala:220:59, :235:36
      automatic logic _T_18 = _T_31 | _T_32;	// UnpipelinedLSU.scala:220:{28,43,59}
      automatic logic _T_35 = _T_31 | _T_32;	// UnpipelinedLSU.scala:220:{28,59}, :286:43
      if ((`PRINTF_COND_) & _T_18 & ~reset)	// Debug.scala:34:43, UnpipelinedLSU.scala:220:43
        $fwrite(32'h80000002, "[%d] LSExecUnit: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_18 & ~reset)	// Debug.scala:34:43, :35:31, UnpipelinedLSU.scala:220:43
        $fwrite(32'h80000002, "[LSU] addr %x, size %x, wdata_raw %x, isStore %x\n", io_in_bits_srcA, io_in_bits_ctrl[1:0], io_wdata, isStore);	// Debug.scala:34:43, :35:31, UnpipelinedLSU.scala:180:29, :222:27
      if ((`PRINTF_COND_) & _io_out_valid_T_10 & ~reset)	// Debug.scala:34:43, UnpipelinedLSU.scala:237:28
        $fwrite(32'h80000002, "[%d] LSExecUnit: ", c_1);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _io_out_valid_T_10 & ~reset)	// Debug.scala:34:43, :35:31, UnpipelinedLSU.scala:237:28
        $fwrite(32'h80000002, "[LSU-EXECUNIT] statels (%x,%x) rResp %x wResp %x lm %x sm %x\n", state_load, state_store, _T_34, _T_25, _io_ioLoadAddrMisaligned_T_3, _io_ioStoreAddrMisaligned_T_2);	// Debug.scala:34:43, :35:31, Decoupled.scala:52:35, UnpipelinedLSU.scala:185:33, :186:34, :293:55, :294:54
      if ((`PRINTF_COND_) & _T_35 & ~reset)	// Debug.scala:34:43, UnpipelinedLSU.scala:286:43
        $fwrite(32'h80000002, "[%d] LSExecUnit: ", c_2);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_35 & ~reset)	// Debug.scala:34:43, :35:31, UnpipelinedLSU.scala:286:43
        $fwrite(32'h80000002, "[LSU] statels (%x,%x) Raddr %x rFire %x Rdata %x RdataLatch %x\n", state_load, state_store, io_in_bits_srcA[31:0], _T_34, io_dmem_r_bits_data, rdataLatch);	// AXI4.scala:73:27, Debug.scala:34:43, :35:31, Decoupled.scala:52:35, UnpipelinedLSU.scala:185:33, :186:34, :253:33
      if ((`PRINTF_COND_) & _T_41 & ~reset)	// Debug.scala:34:43, UnpipelinedLSU.scala:238:41
        $fwrite(32'h80000002, "[%d] LSExecUnit: ", c_3);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_41 & ~reset)	// Debug.scala:34:43, :35:31, UnpipelinedLSU.scala:238:41
        $fwrite(32'h80000002, "[EXCEPTION] misaligned addr detected\n");	// Debug.scala:34:43, :35:31
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2290:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2290:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:2290:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:2290:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2290:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2290:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2290:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_8 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_9 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_10 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_11 = `RANDOM;	// <stdin>:2290:10
        _RANDOM_12 = `RANDOM;	// <stdin>:2290:10
        addrLatch = {_RANDOM_0, _RANDOM_1};	// UnpipelinedLSU.scala:179:32
        state_load = _RANDOM_2[1:0];	// UnpipelinedLSU.scala:185:33
        state_store = _RANDOM_2[2];	// UnpipelinedLSU.scala:185:33, :186:34
        c = {_RANDOM_2[31:3], _RANDOM_3, _RANDOM_4[2:0]};	// GTimer.scala:8:32, UnpipelinedLSU.scala:185:33
        c_1 = {_RANDOM_4[31:3], _RANDOM_5, _RANDOM_6[2:0]};	// GTimer.scala:8:32
        rdataLatch = {_RANDOM_6[31:3], _RANDOM_7, _RANDOM_8[2:0]};	// GTimer.scala:8:32, UnpipelinedLSU.scala:253:33
        c_2 = {_RANDOM_8[31:3], _RANDOM_9, _RANDOM_10[2:0]};	// GTimer.scala:8:32, UnpipelinedLSU.scala:253:33
        c_3 = {_RANDOM_10[31:3], _RANDOM_11, _RANDOM_12[2:0]};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2290:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2290:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_in_ready = _io_in_ready_T & ~state_store;	// <stdin>:2290:10, UnpipelinedLSU.scala:186:34, :188:29, :204:30, :245:47
  assign io_out_valid = _io_out_valid_T_10;	// <stdin>:2290:10, UnpipelinedLSU.scala:237:28
  assign io_out_bits = partialLoad ? (io_in_bits_ctrl == 7'h0 ? {{56{_rdataPartialLoad_T_20[7]}},
                _rdataPartialLoad_T_20[7:0]} : 64'h0) | (io_in_bits_ctrl == 7'h1 ?
                {{48{_rdataPartialLoad_T_20[15]}}, _rdataPartialLoad_T_20[15:0]} : 64'h0) |
                (io_in_bits_ctrl == 7'h2 ? {{32{_rdataPartialLoad_T_20[31]}}, _rdataPartialLoad_T_20} :
                64'h0) | (io_in_bits_ctrl == 7'h4 ? {{56{_rdataPartialLoad_T_20[7]}},
                _rdataPartialLoad_T_20[7:0]} : 64'h0) | (io_in_bits_ctrl == 7'h5 ?
                {{48{_rdataPartialLoad_T_20[15]}}, _rdataPartialLoad_T_20[15:0]} : 64'h0) |
                (io_in_bits_ctrl == 7'h6 ? {{32{_rdataPartialLoad_T_20[31]}}, _rdataPartialLoad_T_20} :
                64'h0) : io_dmem_r_bits_data;	// <stdin>:2290:10, BitUtils.scala:17:32, Bitwise.scala:77:12, Cat.scala:33:92, GTimer.scala:8:32, LookupTree.scala:8:38, Mux.scala:27:73, UnpipelinedLSU.scala:150:20, :181:36, :272:52, :273:52, :291:27
  assign io_dmem_aw_valid = wValid;	// <stdin>:2290:10, UnpipelinedLSU.scala:228:96
  assign io_dmem_aw_bits_addr = io_in_bits_srcA[31:0];	// <stdin>:2290:10, AXI4.scala:73:27
  assign io_dmem_w_valid = wValid;	// <stdin>:2290:10, UnpipelinedLSU.scala:228:96
  assign io_dmem_w_bits_data = ((|(io_in_bits_ctrl[1:0])) ? 64'h0 : {2{{2{{2{io_wdata[7:0]}}}}}}) | (_reqWmask_T_1 ?
                {2{{2{io_wdata[15:0]}}}} : 64'h0) | (_reqWmask_T_2 ? {2{io_wdata[31:0]}} : 64'h0) |
                ((&(io_in_bits_ctrl[1:0])) ? io_wdata : 64'h0);	// <stdin>:2290:10, Cat.scala:33:92, GTimer.scala:8:32, LookupTree.scala:8:38, Mux.scala:27:73, UnpipelinedLSU.scala:155:48, :156:48, :157:48, :222:27
  assign io_dmem_w_bits_strb = reqWmask[7:0];	// <stdin>:2290:10, AXI4.scala:83:27, UnpipelinedLSU.scala:150:20
  assign io_dmem_b_ready = state_store;	// <stdin>:2290:10, UnpipelinedLSU.scala:186:34
  assign io_dmem_ar_valid = rValid;	// <stdin>:2290:10, UnpipelinedLSU.scala:229:96
  assign io_dmem_ar_bits_addr = io_in_bits_srcA[31:0];	// <stdin>:2290:10, AXI4.scala:73:27
  assign io_dmem_r_ready = _io_out_valid_T_3;	// <stdin>:2290:10, UnpipelinedLSU.scala:235:36
  assign io_ioLoadAddrMisaligned = _io_ioLoadAddrMisaligned_T_3;	// <stdin>:2290:10, UnpipelinedLSU.scala:293:55
  assign io_ioStoreAddrMisaligned = _io_ioStoreAddrMisaligned_T_2;	// <stdin>:2290:10, UnpipelinedLSU.scala:294:54
endmodule

module UnpipelinedLSU(	// <stdin>:2631:10
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_srcA,
                io_in_bits_srcB,
  input  [6:0]  io_in_bits_ctrl,
  input  [63:0] io_wdata,
  input         io_dmem_aw_ready,
                io_dmem_w_ready,
                io_dmem_b_valid,
                io_dmem_ar_ready,
                io_dmem_r_valid,
  input  [63:0] io_dmem_r_bits_data,
  output        io_out_valid,
  output [63:0] io_out_bits,
  output        io_dmem_aw_valid,
  output [31:0] io_dmem_aw_bits_addr,
  output        io_dmem_w_valid,
  output [63:0] io_dmem_w_bits_data,
  output [7:0]  io_dmem_w_bits_strb,
  output        io_dmem_b_ready,
                io_dmem_ar_valid,
  output [31:0] io_dmem_ar_bits_addr,
  output        io_dmem_r_ready,
                io_ioLoadAddrMisaligned,
                io_ioStoreAddrMisaligned);

  wire        _lsExecUnit_io_in_ready;	// UnpipelinedLSU.scala:32:32
  wire        _lsExecUnit_io_out_valid;	// UnpipelinedLSU.scala:32:32
  reg  [63:0] c;	// GTimer.scala:8:32
  always @(posedge clock) begin
    if (reset)
      c <= 64'h0;	// GTimer.scala:8:32
    else
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2631:10
    always @(posedge clock) begin	// Debug.scala:34:43
      if ((`PRINTF_COND_) & _lsExecUnit_io_out_valid & ~reset)	// Debug.scala:34:43, UnpipelinedLSU.scala:32:32
        $fwrite(32'h80000002, "[%d] UnpipelinedLSU: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _lsExecUnit_io_out_valid & ~reset)	// Debug.scala:34:43, :35:31, UnpipelinedLSU.scala:32:32
        $fwrite(32'h80000002, "[LSU-AGU] state %x inv %x inr %x\n", 2'h0, io_in_valid, _lsExecUnit_io_in_ready);	// Debug.scala:34:43, :35:31, UnpipelinedLSU.scala:32:32, :45:28
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2631:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2631:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2631:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2631:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2631:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2631:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2631:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2631:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2631:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2631:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2631:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2631:10
        c = {_RANDOM_0[31:2], _RANDOM_1, _RANDOM_2[1:0]};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2631:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2631:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  LSExecUnit lsExecUnit (	// UnpipelinedLSU.scala:32:32
    .clock                    (clock),
    .reset                    (reset),
    .io_in_valid              (io_in_valid),
    .io_in_bits_srcA          (io_in_bits_srcA + io_in_bits_srcB),	// UnpipelinedLSU.scala:76:73
    .io_in_bits_ctrl          (io_in_bits_ctrl),
    .io_wdata                 (io_wdata),
    .io_dmem_aw_ready         (io_dmem_aw_ready),
    .io_dmem_w_ready          (io_dmem_w_ready),
    .io_dmem_b_valid          (io_dmem_b_valid),
    .io_dmem_ar_ready         (io_dmem_ar_ready),
    .io_dmem_r_valid          (io_dmem_r_valid),
    .io_dmem_r_bits_data      (io_dmem_r_bits_data),
    .io_in_ready              (_lsExecUnit_io_in_ready),
    .io_out_valid             (_lsExecUnit_io_out_valid),
    .io_out_bits              (io_out_bits),
    .io_dmem_aw_valid         (io_dmem_aw_valid),
    .io_dmem_aw_bits_addr     (io_dmem_aw_bits_addr),
    .io_dmem_w_valid          (io_dmem_w_valid),
    .io_dmem_w_bits_data      (io_dmem_w_bits_data),
    .io_dmem_w_bits_strb      (io_dmem_w_bits_strb),
    .io_dmem_b_ready          (io_dmem_b_ready),
    .io_dmem_ar_valid         (io_dmem_ar_valid),
    .io_dmem_ar_bits_addr     (io_dmem_ar_bits_addr),
    .io_dmem_r_ready          (io_dmem_r_ready),
    .io_ioLoadAddrMisaligned  (io_ioLoadAddrMisaligned),
    .io_ioStoreAddrMisaligned (io_ioStoreAddrMisaligned)
  );
  assign io_out_valid = _lsExecUnit_io_out_valid;	// <stdin>:2631:10, UnpipelinedLSU.scala:32:32
endmodule

module Multiplier(	// <stdin>:2752:10
  input  [64:0]  io_in_bits_0,
                 io_in_bits_1,
  output [129:0] io_out_bits);

  assign io_out_bits = {{65{io_in_bits_0[64]}}, io_in_bits_0} * {{65{io_in_bits_1[64]}}, io_in_bits_1};	// <stdin>:2752:10, MDU.scala:48:44
endmodule

module Divider(	// <stdin>:2765:10
  input  [63:0]  io_in_bits_0,
                 io_in_bits_1,
  output [127:0] io_out_bits);

  assign io_out_bits = {63'h0, $signed({io_in_bits_0[63], io_in_bits_0}) / $signed({io_in_bits_1[63],
                io_in_bits_1})};	// <stdin>:2765:10, MDU.scala:57:{21,46}
endmodule

module MDU(	// <stdin>:2778:10
  input  [63:0] io_in_bits_srcA,
                io_in_bits_srcB,
  input  [6:0]  io_in_bits_ctrl,
  output [63:0] io_out_bits);

  wire [127:0] _div_io_out_bits;	// MDU.scala:82:25
  wire [129:0] _mul_io_out_bits;	// MDU.scala:81:25
  wire         isDivSign = io_in_bits_ctrl[2] & ~(io_in_bits_ctrl[0]);	// MDU.scala:33:33, :34:{45,48,51}
  wire [64:0]  _mul_io_in_bits_0_T_4 = {1'h0, io_in_bits_srcA};	// Cat.scala:33:92, MDU.scala:34:48
  wire [64:0]  _mul_io_in_bits_1_T_4 = {1'h0, io_in_bits_srcB};	// Cat.scala:33:92, MDU.scala:34:48
  wire [63:0]  res = io_in_bits_ctrl[2] ? (io_in_bits_ctrl[1] ? _div_io_out_bits[127:64] :
                _div_io_out_bits[63:0]) : (|(io_in_bits_ctrl[1:0])) ? _mul_io_out_bits[127:64] :
                _mul_io_out_bits[63:0];	// LookupTree.scala:8:38, MDU.scala:33:33, :81:25, :82:25, :96:45, :110:21, :112:32, :113:32, :115:21, :116:21, :117:32, :118:32, :120:18
  Multiplier mul (	// MDU.scala:81:25
    .io_in_bits_0 (((|(io_in_bits_ctrl[1:0])) ? 65'h0 : _mul_io_in_bits_0_T_4) | (io_in_bits_ctrl[1:0] == 2'h1
                ? {io_in_bits_srcA[63], io_in_bits_srcA} : 65'h0) | (io_in_bits_ctrl[1:0] == 2'h2 ?
                {io_in_bits_srcA[63], io_in_bits_srcA} : 65'h0) | ((&(io_in_bits_ctrl[1:0])) ?
                _mul_io_in_bits_0_T_4 : 65'h0)),	// BitUtils.scala:17:32, Cat.scala:33:92, LookupTree.scala:8:38, MDU.scala:96:45, Mux.scala:27:73
    .io_in_bits_1 (((|(io_in_bits_ctrl[1:0])) ? 65'h0 : _mul_io_in_bits_1_T_4) | (io_in_bits_ctrl[1:0] == 2'h1
                ? {io_in_bits_srcB[63], io_in_bits_srcB} : 65'h0) | (io_in_bits_ctrl[1:0] == 2'h2 ?
                _mul_io_in_bits_1_T_4 : 65'h0) | ((&(io_in_bits_ctrl[1:0])) ? _mul_io_in_bits_1_T_4 :
                65'h0)),	// BitUtils.scala:17:32, Cat.scala:33:92, LookupTree.scala:8:38, MDU.scala:96:45, Mux.scala:27:73
    .io_out_bits  (_mul_io_out_bits)
  );
  Divider div (	// MDU.scala:82:25
    .io_in_bits_0 (io_in_bits_ctrl[3] ? {isDivSign ? {32{io_in_bits_srcA[31]}} : 32'h0, io_in_bits_srcA[31:0]}
                : io_in_bits_srcA),	// BitUtils.scala:17:32, Bitwise.scala:77:12, Cat.scala:33:92, MDU.scala:34:45, :35:31, :99:40, :101:{20,41}
    .io_in_bits_1 (io_in_bits_ctrl[3] ? {isDivSign ? {32{io_in_bits_srcB[31]}} : 32'h0, io_in_bits_srcB[31:0]}
                : io_in_bits_srcB),	// BitUtils.scala:17:32, Bitwise.scala:77:12, Cat.scala:33:92, MDU.scala:34:45, :35:31, :99:40, :101:{20,41}
    .io_out_bits  (_div_io_out_bits)
  );
  assign io_out_bits = io_in_bits_ctrl[3] ? {{32{res[31]}}, res[31:0]} : res;	// <stdin>:2778:10, BitUtils.scala:17:32, Bitwise.scala:77:12, Cat.scala:33:92, MDU.scala:35:31, :120:18, :121:{27,44}
endmodule

module CSR(	// <stdin>:2887:10
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_srcA,
                io_in_bits_srcB,
  input  [6:0]  io_in_bits_ctrl,
  input  [63:0] io_cfIn_instr,
                io_cfIn_pc,
  input         io_cfIn_exceptionVec_2,
                io_cfIn_exceptionVec_4,
                io_cfIn_exceptionVec_6,
                io_instrValid,
  output [63:0] io_out_bits,
                io_redirect_target,
  output        io_redirect_valid,
                io_wenFix,
  output [63:0] io_csr_regs_0,
                io_csr_regs_1,
                io_csr_regs_2,
                io_csr_regs_3);

  wire [63:0] _rdata_T_18;	// Mux.scala:27:73
  reg  [63:0] mtvec;	// CSR.scala:172:34
  reg  [63:0] mcause;	// CSR.scala:173:34
  reg  [63:0] mepc;	// CSR.scala:175:34
  reg  [63:0] mstatus;	// CSR.scala:176:34
  reg  [63:0] satp;	// CSR.scala:206:27
  reg  [1:0]  priviledgeMode;	// CSR.scala:213:37
  wire [63:0] csri = {59'h0, io_cfIn_instr[19:15]};	// CSR.scala:232:41, Cat.scala:33:92
  wire        _justRead_T = io_in_bits_ctrl == 7'h2;	// LookupTree.scala:8:38
  wire        _justRead_T_1 = io_in_bits_ctrl == 7'h6;	// LookupTree.scala:8:38
  wire [63:0] _wdata_T_22 = (io_in_bits_ctrl == 7'h1 ? io_in_bits_srcA : 64'h0) | (_justRead_T ? _rdata_T_18 |
                io_in_bits_srcA : 64'h0) | (io_in_bits_ctrl == 7'h3 ? _rdata_T_18 & ~io_in_bits_srcA :
                64'h0) | (io_in_bits_ctrl == 7'h5 ? csri : 64'h0) | (_justRead_T_1 ? _rdata_T_18 | csri :
                64'h0) | (io_in_bits_ctrl == 7'h7 ? _rdata_T_18 & {59'h7FFFFFFFFFFFFFF,
                ~(io_cfIn_instr[19:15])} : 64'h0);	// <stdin>:2887:10, CSR.scala:232:41, :235:43, :236:{43,45}, :238:43, :239:{43,45}, Cat.scala:33:92, LookupTree.scala:8:38, Mux.scala:27:73
  wire        _wen_T_4 = io_in_valid & (|io_in_bits_ctrl) & (io_in_bits_srcB[11:0] != 12'h180 | _wdata_T_22[63:60]
                == 4'h0 | _wdata_T_22[63:60] == 4'h8);	// <stdin>:2887:10, CSR.scala:230:24, :243:{44,66,93,115}, :246:{34,51,60,71}, Mux.scala:27:73
  wire        isIllegalAccess = priviledgeMode < io_in_bits_srcB[9:8] | _wen_T_4 & (&(io_in_bits_srcB[11:10])) &
                ~((_justRead_T | _justRead_T_1) & io_in_bits_srcA == 64'h0);	// <stdin>:2887:10, CSR.scala:213:37, :246:51, :247:{44,50}, :248:{46,72,80}, :249:{42,51,64,67}, :250:45, LookupTree.scala:8:38
  wire        _resetSatp_T = io_in_bits_srcB[11:0] == 12'h180;	// CSR.scala:230:24, :246:60, LookupTree.scala:8:38
  wire        _isIllegalAddr_illegalAddr_T_2 = io_in_bits_srcB[11:0] == 12'h342;	// CSR.scala:230:24, LookupTree.scala:8:38
  wire        _isIllegalAddr_illegalAddr_T_4 = io_in_bits_srcB[11:0] == 12'h305;	// CSR.scala:230:24, LookupTree.scala:8:38
  wire        _isIllegalAddr_illegalAddr_T_6 = io_in_bits_srcB[11:0] == 12'h300;	// CSR.scala:230:24, LookupTree.scala:8:38
  wire        _isIllegalAddr_illegalAddr_T_8 = io_in_bits_srcB[11:0] == 12'h341;	// CSR.scala:230:24, LookupTree.scala:8:38
  assign _rdata_T_18 = (_resetSatp_T ? satp : 64'h0) | (_isIllegalAddr_illegalAddr_T_2 ? mcause : 64'h0) |
                (_isIllegalAddr_illegalAddr_T_4 ? mtvec : 64'h0) | (_isIllegalAddr_illegalAddr_T_6 ?
                mstatus : 64'h0) | (_isIllegalAddr_illegalAddr_T_8 ? mepc : 64'h0);	// <stdin>:2887:10, CSR.scala:172:34, :173:34, :175:34, :176:34, :206:27, LookupTree.scala:8:38, Mux.scala:27:73
  wire        resetSatp = _resetSatp_T & _wen_T_4;	// CSR.scala:246:51, :254:41, LookupTree.scala:8:38
  wire        _io_redirect_valid_T = io_in_bits_ctrl == 7'h0;	// CSR.scala:246:34, :259:52
  wire        _isEcall_T_2 = io_in_bits_srcB[11:0] == 12'h0 & _io_redirect_valid_T;	// CSR.scala:230:24, :259:52, :260:{28,42}
  wire        _csrExpectionVec_3_T = io_in_valid & io_in_bits_srcB[11:0] == 12'h1 & _io_redirect_valid_T;	// CSR.scala:230:24, :259:{29,52}, :272:52
  wire        _csrExpectionVec_11_T_2 = (&priviledgeMode) & io_in_valid & _isEcall_T_2;	// CSR.scala:213:37, :260:42, :273:{47,72}
  wire        _csrExpectionVec_9_T_2 = priviledgeMode == 2'h1 & io_in_valid & _isEcall_T_2;	// CSR.scala:213:37, :260:42, :274:{51,76}
  wire        _csrExpectionVec_8_T_2 = priviledgeMode == 2'h0 & io_in_valid & _isEcall_T_2;	// CSR.scala:213:37, :260:42, :275:{51,76}, :279:74
  wire        _exceptionNO_T_20 = (~_isIllegalAddr_illegalAddr_T_8 & ~_isIllegalAddr_illegalAddr_T_6 &
                ~_isIllegalAddr_illegalAddr_T_4 & ~_isIllegalAddr_illegalAddr_T_2 & ~_resetSatp_T |
                isIllegalAccess) & _wen_T_4 | io_cfIn_exceptionVec_2;	// CSR.scala:246:51, :250:45, :276:{57,77}, :279:56, LookupTree.scala:8:38, Mux.scala:81:58
  wire [6:0]  _GEN = {_csrExpectionVec_11_T_2, _csrExpectionVec_9_T_2, _csrExpectionVec_8_T_2,
                io_cfIn_exceptionVec_6, io_cfIn_exceptionVec_4, _csrExpectionVec_3_T, _exceptionNO_T_20};	// CSR.scala:272:52, :273:72, :274:76, :275:76, :279:56
  wire        raiseExceptionIntr = (|_GEN) & io_instrValid;	// CSR.scala:279:56, :280:48, :287:64
  always @(posedge clock) begin
    if (reset) begin
      mtvec <= 64'h0;	// <stdin>:2887:10, CSR.scala:172:34
      mcause <= 64'h0;	// <stdin>:2887:10, CSR.scala:173:34
      mepc <= 64'h0;	// <stdin>:2887:10, CSR.scala:175:34
      mstatus <= 64'hA00001800;	// CSR.scala:176:34
      satp <= 64'h0;	// <stdin>:2887:10, CSR.scala:206:27
      priviledgeMode <= 2'h3;	// CSR.scala:213:37
    end
    else begin
      automatic logic _T_10;	// CSR.scala:252:57
      _T_10 = _wen_T_4 & ~isIllegalAccess;	// CSR.scala:246:51, :250:45, :252:{57,60}
      if (_T_10 & _isIllegalAddr_illegalAddr_T_4)	// CSR.scala:252:57, LookupTree.scala:8:38, RegMap.scala:34:74
        mtvec <= _wdata_T_22;	// CSR.scala:172:34, Mux.scala:27:73
      if (raiseExceptionIntr) begin	// CSR.scala:287:64
        mcause <= {60'h0, _csrExpectionVec_3_T ? 4'h3 : _exceptionNO_T_20 ? 4'h2 : _csrExpectionVec_8_T_2 ?
                                                                4'h8 : _csrExpectionVec_9_T_2 ? 4'h9 : _csrExpectionVec_11_T_2 ? 4'hB :
                                                                io_cfIn_exceptionVec_6 ? 4'h6 : {1'h0, io_cfIn_exceptionVec_4, 2'h0}};	// <stdin>:2887:10, CSR.scala:173:34, :243:115, :267:75, :272:52, :273:72, :274:76, :275:76, :279:{56,74}, :281:80, :284:47
        mepc <= io_cfIn_pc;	// CSR.scala:175:34
        mstatus <= {mstatus[63:13], priviledgeMode, mstatus[10:8], mstatus[3], mstatus[6:4], 1'h0,
                                                                mstatus[2:0]};	// <stdin>:2887:10, CSR.scala:176:34, :213:37, :310:39, :316:59, :329:39
        priviledgeMode <= 2'h3;	// CSR.scala:213:37
      end
      else begin	// CSR.scala:287:64
        if (_T_10 & _isIllegalAddr_illegalAddr_T_2)	// CSR.scala:252:57, LookupTree.scala:8:38, RegMap.scala:34:74
          mcause <= _wdata_T_22;	// CSR.scala:173:34, Mux.scala:27:73
        if (_T_10 & _isIllegalAddr_illegalAddr_T_8)	// CSR.scala:252:57, LookupTree.scala:8:38, RegMap.scala:34:74
          mepc <= _wdata_T_22;	// CSR.scala:175:34, Mux.scala:27:73
        if (io_in_valid & io_in_bits_srcB[11:0] == 12'h302 & _io_redirect_valid_T) begin	// CSR.scala:230:24, :259:52, :261:27, :303:21
          mstatus <= {mstatus[63:13], 2'h0, mstatus[10:8], 1'h1, mstatus[6:4], mstatus[7], mstatus[2:0]};	// <stdin>:2887:10, CSR.scala:176:34, :279:74, :304:59, :310:39
          priviledgeMode <= mstatus[12:11];	// CSR.scala:176:34, :213:37, :304:59
        end
        else if (_T_10 & _isIllegalAddr_illegalAddr_T_6)	// CSR.scala:230:24, :252:57, :259:52, :261:27, :303:21, LookupTree.scala:8:38, RegMap.scala:34:74
          mstatus <= {&(_wdata_T_22[14:13]), _wdata_T_22[62:0]};	// CSR.scala:176:34, :200:59, :201:{52,72}, Cat.scala:33:92, Mux.scala:27:73
      end
      if (_T_10 & _resetSatp_T)	// CSR.scala:252:57, LookupTree.scala:8:38, RegMap.scala:34:74
        satp <= _wdata_T_22;	// CSR.scala:206:27, Mux.scala:27:73
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:2887:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:2887:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:2887:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:2887:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:2887:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:2887:10
        `INIT_RANDOM_PROLOG_	// <stdin>:2887:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:2887:10
        _RANDOM_0 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_1 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_2 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_3 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_4 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_5 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_6 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_7 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_8 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_9 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_10 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_11 = `RANDOM;	// <stdin>:2887:10
        _RANDOM_12 = `RANDOM;	// <stdin>:2887:10
        mtvec = {_RANDOM_2, _RANDOM_3};	// CSR.scala:172:34
        mcause = {_RANDOM_4, _RANDOM_5};	// CSR.scala:173:34
        mepc = {_RANDOM_6, _RANDOM_7};	// CSR.scala:175:34
        mstatus = {_RANDOM_8, _RANDOM_9};	// CSR.scala:176:34
        satp = {_RANDOM_10, _RANDOM_11};	// CSR.scala:206:27
        priviledgeMode = _RANDOM_12[1:0];	// CSR.scala:213:37
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:2887:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:2887:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_out_bits = _rdata_T_18;	// <stdin>:2887:10, Mux.scala:27:73
  assign io_redirect_target = resetSatp ? io_cfIn_pc + 64'h4 : raiseExceptionIntr ? mtvec : mepc;	// <stdin>:2887:10, CSR.scala:172:34, :175:34, :254:41, :287:64, :292:{34,57,67}
  assign io_redirect_valid = io_in_valid & _io_redirect_valid_T | raiseExceptionIntr | resetSatp;	// <stdin>:2887:10, CSR.scala:254:41, :259:52, :287:64, :290:{37,84}
  assign io_wenFix = |_GEN;	// <stdin>:2887:10, CSR.scala:279:56, :280:48
  assign io_csr_regs_0 = mstatus;	// <stdin>:2887:10, CSR.scala:176:34
  assign io_csr_regs_1 = mtvec;	// <stdin>:2887:10, CSR.scala:172:34
  assign io_csr_regs_2 = mepc;	// <stdin>:2887:10, CSR.scala:175:34
  assign io_csr_regs_3 = mcause;	// <stdin>:2887:10, CSR.scala:173:34
endmodule

module EXU(	// <stdin>:3625:10
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_cf_instr,
                io_in_bits_cf_pc,
                io_in_bits_cf_pnpc,
  input         io_in_bits_cf_exceptionVec_2,
  input  [2:0]  io_in_bits_ctrl_fuType,
  input  [6:0]  io_in_bits_ctrl_fuCtrl,
  input         io_in_bits_ctrl_rfWen,
  input  [4:0]  io_in_bits_ctrl_rfDest,
  input  [63:0] io_in_bits_data_srcA,
                io_in_bits_data_srcB,
                io_in_bits_data_imm,
  input         io_flush,
                io_dmem_aw_ready,
                io_dmem_w_ready,
                io_dmem_b_valid,
                io_dmem_ar_ready,
                io_dmem_r_valid,
  input  [63:0] io_dmem_r_bits_data,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits_decode_cf_instr,
                io_out_bits_decode_cf_pc,
                io_out_bits_decode_cf_pnpc,
                io_out_bits_decode_cf_redirect_target,
  output        io_out_bits_decode_cf_redirect_valid,
  output [2:0]  io_out_bits_decode_ctrl_fuType,
  output        io_out_bits_decode_ctrl_rfWen,
  output [4:0]  io_out_bits_decode_ctrl_rfDest,
  output [63:0] io_out_bits_commits_0,
                io_out_bits_commits_1,
                io_out_bits_commits_2,
                io_out_bits_commits_3,
  output        io_dmem_aw_valid,
  output [31:0] io_dmem_aw_bits_addr,
  output        io_dmem_w_valid,
  output [63:0] io_dmem_w_bits_data,
  output [7:0]  io_dmem_w_bits_strb,
  output        io_dmem_b_ready,
                io_dmem_ar_valid,
  output [31:0] io_dmem_ar_bits_addr,
  output        io_dmem_r_ready,
                io_forward_valid,
                io_forward_wb_rfWen,
  output [4:0]  io_forward_wb_rfDest,
  output [63:0] io_forward_wb_rfData,
  output [2:0]  io_forward_fuType,
  output [63:0] io_csr_regs_0,
                io_csr_regs_1,
                io_csr_regs_2,
                io_csr_regs_3);

  wire [63:0] _csr_io_redirect_target;	// EXU.scala:57:25
  wire        _csr_io_redirect_valid;	// EXU.scala:57:25
  wire        _csr_io_wenFix;	// EXU.scala:57:25
  wire        _lsu_io_out_valid;	// EXU.scala:42:25
  wire [63:0] _lsu_io_out_bits;	// EXU.scala:42:25
  wire        _lsu_io_ioLoadAddrMisaligned;	// EXU.scala:42:25
  wire        _lsu_io_ioStoreAddrMisaligned;	// EXU.scala:42:25
  wire        _alu_io_out_valid;	// EXU.scala:33:25
  wire [63:0] _alu_io_out_bits;	// EXU.scala:33:25
  wire [63:0] _alu_io_redirect_target;	// EXU.scala:33:25
  wire        _alu_io_redirect_valid;	// EXU.scala:33:25
  wire        _io_out_valid_T = io_in_bits_ctrl_fuType == 3'h1;	// EXU.scala:30:63
  wire        _fuValids_1_T_3 = _io_out_valid_T & io_in_valid & ~io_flush;	// EXU.scala:30:{63,87,90}
  wire        _fuValids_3_T_3 = io_in_bits_ctrl_fuType == 3'h3 & io_in_valid & ~io_flush;	// EXU.scala:30:{63,87,90}
  reg  [63:0] c;	// GTimer.scala:8:32
  wire        _io_out_valid_T_4 = io_in_valid & (io_in_bits_ctrl_fuType == 3'h2 | ~_io_out_valid_T | _lsu_io_out_valid);	// EXU.scala:30:63, :42:25, :91:37, Mux.scala:81:58
  always @(posedge clock) begin
    if (reset)
      c <= 64'h0;	// <stdin>:3625:10, GTimer.scala:8:32
    else
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:3625:10
    always @(posedge clock) begin	// Debug.scala:34:43
      automatic logic _T_1 = _csr_io_redirect_valid | _alu_io_redirect_valid;	// EXU.scala:33:25, :57:25, :86:37
      if ((`PRINTF_COND_) & _T_1 & ~reset)	// Debug.scala:34:43, EXU.scala:86:37
        $fwrite(32'h80000002, "[%d] EXU: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _T_1 & ~reset)	// Debug.scala:34:43, :35:31, EXU.scala:86:37
        $fwrite(32'h80000002, "[REDIRECT] flush: %d csr (%b,%x) alu (%b,%x)\n", io_flush, _csr_io_redirect_valid, _csr_io_redirect_target, _alu_io_redirect_valid, _alu_io_redirect_target);	// Debug.scala:34:43, :35:31, EXU.scala:33:25, :57:25
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3625:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3625:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3625:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:3625:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:3625:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3625:10
        `INIT_RANDOM_PROLOG_	// <stdin>:3625:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3625:10
        _RANDOM_0 = `RANDOM;	// <stdin>:3625:10
        _RANDOM_1 = `RANDOM;	// <stdin>:3625:10
        c = {_RANDOM_0, _RANDOM_1};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3625:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:3625:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ALU alu (	// EXU.scala:33:25
    .clock              (clock),
    .reset              (reset),
    .io_in_valid        (io_in_bits_ctrl_fuType == 3'h0 & io_in_valid & ~io_flush),	// EXU.scala:30:{63,87,90}
    .io_in_bits_srcA    (io_in_bits_data_srcA),
    .io_in_bits_srcB    (io_in_bits_data_srcB),
    .io_in_bits_ctrl    (io_in_bits_ctrl_fuCtrl),
    .io_cfIn_instr      (io_in_bits_cf_instr),
    .io_cfIn_pc         (io_in_bits_cf_pc),
    .io_cfIn_pnpc       (io_in_bits_cf_pnpc),
    .io_offset          (io_in_bits_data_imm),
    .io_out_valid       (_alu_io_out_valid),
    .io_out_bits        (_alu_io_out_bits),
    .io_redirect_target (_alu_io_redirect_target),
    .io_redirect_valid  (_alu_io_redirect_valid)
  );
  UnpipelinedLSU lsu (	// EXU.scala:42:25
    .clock                    (clock),
    .reset                    (reset),
    .io_in_valid              (_fuValids_1_T_3),	// EXU.scala:30:87
    .io_in_bits_srcA          (io_in_bits_data_srcA),
    .io_in_bits_srcB          (io_in_bits_data_imm),
    .io_in_bits_ctrl          (io_in_bits_ctrl_fuCtrl),
    .io_wdata                 (io_in_bits_data_srcB),
    .io_dmem_aw_ready         (io_dmem_aw_ready),
    .io_dmem_w_ready          (io_dmem_w_ready),
    .io_dmem_b_valid          (io_dmem_b_valid),
    .io_dmem_ar_ready         (io_dmem_ar_ready),
    .io_dmem_r_valid          (io_dmem_r_valid),
    .io_dmem_r_bits_data      (io_dmem_r_bits_data),
    .io_out_valid             (_lsu_io_out_valid),
    .io_out_bits              (_lsu_io_out_bits),
    .io_dmem_aw_valid         (io_dmem_aw_valid),
    .io_dmem_aw_bits_addr     (io_dmem_aw_bits_addr),
    .io_dmem_w_valid          (io_dmem_w_valid),
    .io_dmem_w_bits_data      (io_dmem_w_bits_data),
    .io_dmem_w_bits_strb      (io_dmem_w_bits_strb),
    .io_dmem_b_ready          (io_dmem_b_ready),
    .io_dmem_ar_valid         (io_dmem_ar_valid),
    .io_dmem_ar_bits_addr     (io_dmem_ar_bits_addr),
    .io_dmem_r_ready          (io_dmem_r_ready),
    .io_ioLoadAddrMisaligned  (_lsu_io_ioLoadAddrMisaligned),
    .io_ioStoreAddrMisaligned (_lsu_io_ioStoreAddrMisaligned)
  );
  MDU mdu (	// EXU.scala:52:25
    .io_in_bits_srcA (io_in_bits_data_srcA),
    .io_in_bits_srcB (io_in_bits_data_srcB),
    .io_in_bits_ctrl (io_in_bits_ctrl_fuCtrl),
    .io_out_bits     (io_out_bits_commits_2)
  );
  CSR csr (	// EXU.scala:57:25
    .clock                  (clock),
    .reset                  (reset),
    .io_in_valid            (_fuValids_3_T_3),	// EXU.scala:30:87
    .io_in_bits_srcA        (io_in_bits_data_srcA),
    .io_in_bits_srcB        (io_in_bits_data_srcB),
    .io_in_bits_ctrl        (io_in_bits_ctrl_fuCtrl),
    .io_cfIn_instr          (io_in_bits_cf_instr),
    .io_cfIn_pc             (io_in_bits_cf_pc),
    .io_cfIn_exceptionVec_2 (io_in_bits_cf_exceptionVec_2),
    .io_cfIn_exceptionVec_4 (_lsu_io_ioLoadAddrMisaligned),	// EXU.scala:42:25
    .io_cfIn_exceptionVec_6 (_lsu_io_ioStoreAddrMisaligned),	// EXU.scala:42:25
    .io_instrValid          (io_in_valid & ~io_flush),	// EXU.scala:30:90, :62:42
    .io_out_bits            (io_out_bits_commits_3),
    .io_redirect_target     (_csr_io_redirect_target),
    .io_redirect_valid      (_csr_io_redirect_valid),
    .io_wenFix              (_csr_io_wenFix),
    .io_csr_regs_0          (io_csr_regs_0),
    .io_csr_regs_1          (io_csr_regs_1),
    .io_csr_regs_2          (io_csr_regs_2),
    .io_csr_regs_3          (io_csr_regs_3)
  );
  assign io_in_ready = ~io_in_valid | _io_out_valid_T_4;	// <stdin>:3625:10, EXU.scala:91:37, :102:{24,37}
  assign io_out_valid = _io_out_valid_T_4;	// <stdin>:3625:10, EXU.scala:91:37
  assign io_out_bits_decode_cf_instr = io_in_bits_cf_instr;	// <stdin>:3625:10
  assign io_out_bits_decode_cf_pc = io_in_bits_cf_pc;	// <stdin>:3625:10
  assign io_out_bits_decode_cf_pnpc = io_in_bits_cf_pnpc;	// <stdin>:3625:10
  assign io_out_bits_decode_cf_redirect_target = _csr_io_redirect_valid ? _csr_io_redirect_target : _alu_io_redirect_target;	// <stdin>:3625:10, EXU.scala:33:25, :57:25, :84:20
  assign io_out_bits_decode_cf_redirect_valid = _csr_io_redirect_valid ? _csr_io_redirect_valid : _alu_io_redirect_valid;	// <stdin>:3625:10, EXU.scala:33:25, :57:25, :84:20
  assign io_out_bits_decode_ctrl_fuType = io_in_bits_ctrl_fuType;	// <stdin>:3625:10
  assign io_out_bits_decode_ctrl_rfWen = io_in_bits_ctrl_rfWen & (~_lsu_io_ioLoadAddrMisaligned & ~_lsu_io_ioStoreAddrMisaligned |
                ~_fuValids_1_T_3) & ~(_csr_io_wenFix & _fuValids_3_T_3);	// <stdin>:3625:10, EXU.scala:30:87, :42:25, :57:25, :75:{40,69,72,102,105,128,131,147}
  assign io_out_bits_decode_ctrl_rfDest = io_in_bits_ctrl_rfDest;	// <stdin>:3625:10
  assign io_out_bits_commits_0 = _alu_io_out_bits;	// <stdin>:3625:10, EXU.scala:33:25
  assign io_out_bits_commits_1 = _lsu_io_out_bits;	// <stdin>:3625:10, EXU.scala:42:25
  assign io_forward_valid = io_in_valid;	// <stdin>:3625:10
  assign io_forward_wb_rfWen = io_in_bits_ctrl_rfWen;	// <stdin>:3625:10
  assign io_forward_wb_rfDest = io_in_bits_ctrl_rfDest;	// <stdin>:3625:10
  assign io_forward_wb_rfData = _alu_io_out_valid ? _alu_io_out_bits : _lsu_io_out_bits;	// <stdin>:3625:10, EXU.scala:33:25, :42:25, :107:36
  assign io_forward_fuType = io_in_bits_ctrl_fuType;	// <stdin>:3625:10
endmodule

module WBU(	// <stdin>:3906:10
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_decode_cf_instr,
                io_in_bits_decode_cf_pc,
                io_in_bits_decode_cf_pnpc,
                io_in_bits_decode_cf_redirect_target,
  input         io_in_bits_decode_cf_redirect_valid,
  input  [2:0]  io_in_bits_decode_ctrl_fuType,
  input         io_in_bits_decode_ctrl_rfWen,
  input  [4:0]  io_in_bits_decode_ctrl_rfDest,
  input  [63:0] io_in_bits_commits_0,
                io_in_bits_commits_1,
                io_in_bits_commits_2,
                io_in_bits_commits_3,
  output        io_wb_rfWen,
  output [4:0]  io_wb_rfDest,
  output [63:0] io_wb_rfData,
                io_redirect_target,
  output        io_redirect_valid,
                io_difftest_commit_valid,
  output [63:0] io_difftest_commit_bits_decode_cf_pnpc,
                io_difftest_redirect_target,
  output        io_difftest_redirect_valid);

  wire             _io_wb_rfWen_T = io_in_bits_decode_ctrl_rfWen & io_in_valid;	// WBU.scala:19:53
  wire [4:0][63:0] _GEN = {{64'h0}, {io_in_bits_commits_3}, {io_in_bits_commits_2}, {io_in_bits_commits_1},
                {io_in_bits_commits_0}};	// <stdin>:3906:10, WBU.scala:21:22
  wire [63:0]      _GEN_0;	// WBU.scala:21:22
  /* synopsys infer_mux_override */
  assign _GEN_0 = _GEN[io_in_bits_decode_ctrl_fuType] /* cadence map_to_mux */;	// WBU.scala:21:22
  wire [63:0]      _GEN_1 = io_in_bits_decode_ctrl_fuType > 3'h4 ? io_in_bits_commits_0 : _GEN_0;	// WBU.scala:21:22
  wire             _io_difftest_redirect_valid_T = io_in_bits_decode_cf_redirect_valid & io_in_valid;	// WBU.scala:27:66
  reg  [63:0]      c;	// GTimer.scala:8:32
  always @(posedge clock) begin
    if (reset)
      c <= 64'h0;	// <stdin>:3906:10, GTimer.scala:8:32
    else
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:3906:10
    always @(posedge clock) begin	// Debug.scala:34:43
      if ((`PRINTF_COND_) & io_in_valid & ~reset)	// Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] WBU: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & io_in_valid & ~reset)	// Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[COMMIT] pc = 0x%x inst %x wen %x wdst %x wdata %x mmio %x intrNO %x\n", io_in_bits_decode_cf_pc, io_in_bits_decode_cf_instr, _io_wb_rfWen_T, io_in_bits_decode_ctrl_rfDest, _GEN_1, 1'h0, 64'h0);	// <stdin>:3906:10, Debug.scala:34:43, :35:31, WBU.scala:19:53, :21:22
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3906:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3906:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3906:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:3906:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:3906:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3906:10
        `INIT_RANDOM_PROLOG_	// <stdin>:3906:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3906:10
        _RANDOM_0 = `RANDOM;	// <stdin>:3906:10
        _RANDOM_1 = `RANDOM;	// <stdin>:3906:10
        c = {_RANDOM_0, _RANDOM_1};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3906:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:3906:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_wb_rfWen = _io_wb_rfWen_T;	// <stdin>:3906:10, WBU.scala:19:53
  assign io_wb_rfDest = io_in_bits_decode_ctrl_rfDest;	// <stdin>:3906:10
  assign io_wb_rfData = _GEN_1;	// <stdin>:3906:10, WBU.scala:21:22
  assign io_redirect_target = io_in_bits_decode_cf_redirect_target;	// <stdin>:3906:10
  assign io_redirect_valid = _io_difftest_redirect_valid_T;	// <stdin>:3906:10, WBU.scala:27:66
  assign io_difftest_commit_valid = io_in_valid;	// <stdin>:3906:10
  assign io_difftest_commit_bits_decode_cf_pnpc = io_in_bits_decode_cf_pnpc;	// <stdin>:3906:10
  assign io_difftest_redirect_target = io_in_bits_decode_cf_redirect_target;	// <stdin>:3906:10
  assign io_difftest_redirect_valid = _io_difftest_redirect_valid_T;	// <stdin>:3906:10, WBU.scala:27:66
endmodule

module Backend_inorder(	// <stdin>:3941:10
  input         clock,
                reset,
                io_in_0_valid,
  input  [63:0] io_in_0_bits_cf_instr,
                io_in_0_bits_cf_pc,
                io_in_0_bits_cf_pnpc,
  input         io_in_0_bits_cf_exceptionVec_2,
                io_in_0_bits_ctrl_srcAType,
                io_in_0_bits_ctrl_srcBType,
  input  [2:0]  io_in_0_bits_ctrl_fuType,
  input  [6:0]  io_in_0_bits_ctrl_fuCtrl,
  input  [4:0]  io_in_0_bits_ctrl_rfSrcA,
                io_in_0_bits_ctrl_rfSrcB,
  input         io_in_0_bits_ctrl_rfWen,
  input  [4:0]  io_in_0_bits_ctrl_rfDest,
  input  [63:0] io_in_0_bits_data_imm,
  input         io_in_1_valid,
  input  [1:0]  io_flush,
  input         io_dmem_aw_ready,
                io_dmem_w_ready,
                io_dmem_b_valid,
                io_dmem_ar_ready,
                io_dmem_r_valid,
  input  [63:0] io_dmem_r_bits_data,
  output        io_in_0_ready,
                io_dmem_aw_valid,
  output [31:0] io_dmem_aw_bits_addr,
  output        io_dmem_w_valid,
  output [63:0] io_dmem_w_bits_data,
  output [7:0]  io_dmem_w_bits_strb,
  output        io_dmem_b_ready,
                io_dmem_ar_valid,
  output [31:0] io_dmem_ar_bits_addr,
  output        io_dmem_r_ready,
  output [63:0] io_redirect_target,
  output        io_redirect_valid,
  output [63:0] io_gpr_regs_1,
                io_gpr_regs_2,
                io_gpr_regs_3,
                io_gpr_regs_4,
                io_gpr_regs_5,
                io_gpr_regs_6,
                io_gpr_regs_7,
                io_gpr_regs_8,
                io_gpr_regs_9,
                io_gpr_regs_10,
                io_gpr_regs_11,
                io_gpr_regs_12,
                io_gpr_regs_13,
                io_gpr_regs_14,
                io_gpr_regs_15,
                io_gpr_regs_16,
                io_gpr_regs_17,
                io_gpr_regs_18,
                io_gpr_regs_19,
                io_gpr_regs_20,
                io_gpr_regs_21,
                io_gpr_regs_22,
                io_gpr_regs_23,
                io_gpr_regs_24,
                io_gpr_regs_25,
                io_gpr_regs_26,
                io_gpr_regs_27,
                io_gpr_regs_28,
                io_gpr_regs_29,
                io_gpr_regs_30,
                io_gpr_regs_31,
                io_csr_regs_0,
                io_csr_regs_1,
                io_csr_regs_2,
                io_csr_regs_3,
  output        io_difftest_commit_valid,
  output [63:0] io_difftest_commit_bits_decode_cf_pnpc,
                io_difftest_redirect_target,
  output        io_difftest_redirect_valid);

  wire        _wbu_io_wb_rfWen;	// Backend.scala:29:25
  wire [4:0]  _wbu_io_wb_rfDest;	// Backend.scala:29:25
  wire [63:0] _wbu_io_wb_rfData;	// Backend.scala:29:25
  wire        _exu_io_in_ready;	// Backend.scala:28:25
  wire        _exu_io_out_valid;	// Backend.scala:28:25
  wire [63:0] _exu_io_out_bits_decode_cf_instr;	// Backend.scala:28:25
  wire [63:0] _exu_io_out_bits_decode_cf_pc;	// Backend.scala:28:25
  wire [63:0] _exu_io_out_bits_decode_cf_pnpc;	// Backend.scala:28:25
  wire [63:0] _exu_io_out_bits_decode_cf_redirect_target;	// Backend.scala:28:25
  wire        _exu_io_out_bits_decode_cf_redirect_valid;	// Backend.scala:28:25
  wire [2:0]  _exu_io_out_bits_decode_ctrl_fuType;	// Backend.scala:28:25
  wire        _exu_io_out_bits_decode_ctrl_rfWen;	// Backend.scala:28:25
  wire [4:0]  _exu_io_out_bits_decode_ctrl_rfDest;	// Backend.scala:28:25
  wire [63:0] _exu_io_out_bits_commits_0;	// Backend.scala:28:25
  wire [63:0] _exu_io_out_bits_commits_1;	// Backend.scala:28:25
  wire [63:0] _exu_io_out_bits_commits_2;	// Backend.scala:28:25
  wire [63:0] _exu_io_out_bits_commits_3;	// Backend.scala:28:25
  wire        _exu_io_forward_valid;	// Backend.scala:28:25
  wire        _exu_io_forward_wb_rfWen;	// Backend.scala:28:25
  wire [4:0]  _exu_io_forward_wb_rfDest;	// Backend.scala:28:25
  wire [63:0] _exu_io_forward_wb_rfData;	// Backend.scala:28:25
  wire [2:0]  _exu_io_forward_fuType;	// Backend.scala:28:25
  wire        _isu_io_out_valid;	// Backend.scala:27:25
  wire [63:0] _isu_io_out_bits_cf_instr;	// Backend.scala:27:25
  wire [63:0] _isu_io_out_bits_cf_pc;	// Backend.scala:27:25
  wire [63:0] _isu_io_out_bits_cf_pnpc;	// Backend.scala:27:25
  wire        _isu_io_out_bits_cf_exceptionVec_2;	// Backend.scala:27:25
  wire [2:0]  _isu_io_out_bits_ctrl_fuType;	// Backend.scala:27:25
  wire [6:0]  _isu_io_out_bits_ctrl_fuCtrl;	// Backend.scala:27:25
  wire        _isu_io_out_bits_ctrl_rfWen;	// Backend.scala:27:25
  wire [4:0]  _isu_io_out_bits_ctrl_rfDest;	// Backend.scala:27:25
  wire [63:0] _isu_io_out_bits_data_srcA;	// Backend.scala:27:25
  wire [63:0] _isu_io_out_bits_data_srcB;	// Backend.scala:27:25
  wire [63:0] _isu_io_out_bits_data_imm;	// Backend.scala:27:25
  reg         valid;	// Pipeline.scala:10:28
  reg  [63:0] exu_io_in_bits_r_cf_instr;	// Reg.scala:19:16
  reg  [63:0] exu_io_in_bits_r_cf_pc;	// Reg.scala:19:16
  reg  [63:0] exu_io_in_bits_r_cf_pnpc;	// Reg.scala:19:16
  reg         exu_io_in_bits_r_cf_exceptionVec_2;	// Reg.scala:19:16
  reg  [2:0]  exu_io_in_bits_r_ctrl_fuType;	// Reg.scala:19:16
  reg  [6:0]  exu_io_in_bits_r_ctrl_fuCtrl;	// Reg.scala:19:16
  reg         exu_io_in_bits_r_ctrl_rfWen;	// Reg.scala:19:16
  reg  [4:0]  exu_io_in_bits_r_ctrl_rfDest;	// Reg.scala:19:16
  reg  [63:0] exu_io_in_bits_r_data_srcA;	// Reg.scala:19:16
  reg  [63:0] exu_io_in_bits_r_data_srcB;	// Reg.scala:19:16
  reg  [63:0] exu_io_in_bits_r_data_imm;	// Reg.scala:19:16
  reg         valid_1;	// Pipeline.scala:10:28
  reg  [63:0] wbu_io_in_bits_r_decode_cf_instr;	// Reg.scala:19:16
  reg  [63:0] wbu_io_in_bits_r_decode_cf_pc;	// Reg.scala:19:16
  reg  [63:0] wbu_io_in_bits_r_decode_cf_pnpc;	// Reg.scala:19:16
  reg  [63:0] wbu_io_in_bits_r_decode_cf_redirect_target;	// Reg.scala:19:16
  reg         wbu_io_in_bits_r_decode_cf_redirect_valid;	// Reg.scala:19:16
  reg  [2:0]  wbu_io_in_bits_r_decode_ctrl_fuType;	// Reg.scala:19:16
  reg         wbu_io_in_bits_r_decode_ctrl_rfWen;	// Reg.scala:19:16
  reg  [4:0]  wbu_io_in_bits_r_decode_ctrl_rfDest;	// Reg.scala:19:16
  reg  [63:0] wbu_io_in_bits_r_commits_0;	// Reg.scala:19:16
  reg  [63:0] wbu_io_in_bits_r_commits_1;	// Reg.scala:19:16
  reg  [63:0] wbu_io_in_bits_r_commits_2;	// Reg.scala:19:16
  reg  [63:0] wbu_io_in_bits_r_commits_3;	// Reg.scala:19:16
  reg  [63:0] c;	// GTimer.scala:8:32
  reg  [63:0] c_1;	// GTimer.scala:8:32
  always @(posedge clock) begin
    automatic logic _exu_io_in_bits_T;	// Pipeline.scala:12:26
    _exu_io_in_bits_T = _isu_io_out_valid & _exu_io_in_ready;	// Backend.scala:27:25, :28:25, Pipeline.scala:12:26
    if (reset) begin
      valid <= 1'h0;	// <stdin>:3941:10, Pipeline.scala:10:28
      valid_1 <= 1'h0;	// <stdin>:3941:10, Pipeline.scala:10:28
      c <= 64'h0;	// <stdin>:3941:10, GTimer.scala:8:32
      c_1 <= 64'h0;	// <stdin>:3941:10, GTimer.scala:8:32
    end
    else begin
      valid <= ~(io_flush[0]) & (_exu_io_in_bits_T | ~_exu_io_out_valid & valid);	// Backend.scala:28:25, :31:73, Pipeline.scala:10:28, :11:{29,37}, :12:{26,42,50}, :13:{24,32}
      valid_1 <= ~(io_flush[1]) & _exu_io_out_valid;	// Backend.scala:28:25, :32:64, Pipeline.scala:10:28, :12:42, :13:{24,32}
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
      c_1 <= c_1 + 64'h1;	// GTimer.scala:8:32, :9:24
    end
    if (_exu_io_in_bits_T) begin	// Pipeline.scala:12:26
      exu_io_in_bits_r_cf_instr <= _isu_io_out_bits_cf_instr;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_cf_pc <= _isu_io_out_bits_cf_pc;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_cf_pnpc <= _isu_io_out_bits_cf_pnpc;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_cf_exceptionVec_2 <= _isu_io_out_bits_cf_exceptionVec_2;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_ctrl_fuType <= _isu_io_out_bits_ctrl_fuType;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_ctrl_fuCtrl <= _isu_io_out_bits_ctrl_fuCtrl;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_ctrl_rfWen <= _isu_io_out_bits_ctrl_rfWen;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_ctrl_rfDest <= _isu_io_out_bits_ctrl_rfDest;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_data_srcA <= _isu_io_out_bits_data_srcA;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_data_srcB <= _isu_io_out_bits_data_srcB;	// Backend.scala:27:25, Reg.scala:19:16
      exu_io_in_bits_r_data_imm <= _isu_io_out_bits_data_imm;	// Backend.scala:27:25, Reg.scala:19:16
    end
    if (_exu_io_out_valid) begin	// Backend.scala:28:25
      wbu_io_in_bits_r_decode_cf_instr <= _exu_io_out_bits_decode_cf_instr;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_decode_cf_pc <= _exu_io_out_bits_decode_cf_pc;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_decode_cf_pnpc <= _exu_io_out_bits_decode_cf_pnpc;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_decode_cf_redirect_target <= _exu_io_out_bits_decode_cf_redirect_target;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_decode_cf_redirect_valid <= _exu_io_out_bits_decode_cf_redirect_valid;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_decode_ctrl_fuType <= _exu_io_out_bits_decode_ctrl_fuType;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_decode_ctrl_rfWen <= _exu_io_out_bits_decode_ctrl_rfWen;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_decode_ctrl_rfDest <= _exu_io_out_bits_decode_ctrl_rfDest;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_commits_0 <= _exu_io_out_bits_commits_0;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_commits_1 <= _exu_io_out_bits_commits_1;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_commits_2 <= _exu_io_out_bits_commits_2;	// Backend.scala:28:25, Reg.scala:19:16
      wbu_io_in_bits_r_commits_3 <= _exu_io_out_bits_commits_3;	// Backend.scala:28:25, Reg.scala:19:16
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:3941:10
    always @(posedge clock) begin	// Debug.scala:34:43
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] Backend_inorder: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "---------------------- Backend ----------------------\n");	// Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] Backend_inorder: ", c_1);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "flush = %b, isu:(%d,%d), exu:(%d,%d)\n", io_flush, _isu_io_out_valid, _exu_io_in_ready, _exu_io_out_valid, 1'h1);	// <stdin>:3941:10, Backend.scala:27:25, :28:25, Debug.scala:34:43, :35:31
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3941:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3941:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_21;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_22;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_23;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_24;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_25;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_26;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_27;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_28;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_29;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_30;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_31;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_32;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_33;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_34;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_35;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_36;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_37;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_38;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_39;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_40;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_41;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_42;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_43;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_44;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_45;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_46;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_47;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_48;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_49;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_50;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_51;	// <stdin>:3941:10
      automatic logic [31:0] _RANDOM_52;	// <stdin>:3941:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3941:10
        `INIT_RANDOM_PROLOG_	// <stdin>:3941:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3941:10
        _RANDOM_0 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_1 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_2 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_3 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_4 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_5 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_6 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_7 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_8 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_9 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_10 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_11 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_12 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_13 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_14 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_15 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_16 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_17 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_18 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_19 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_20 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_21 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_22 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_23 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_24 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_25 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_26 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_27 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_28 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_29 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_30 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_31 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_32 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_33 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_34 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_35 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_36 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_37 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_38 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_39 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_40 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_41 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_42 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_43 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_44 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_45 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_46 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_47 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_48 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_49 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_50 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_51 = `RANDOM;	// <stdin>:3941:10
        _RANDOM_52 = `RANDOM;	// <stdin>:3941:10
        valid = _RANDOM_0[0];	// Pipeline.scala:10:28
        exu_io_in_bits_r_cf_instr = {_RANDOM_0[31:1], _RANDOM_1, _RANDOM_2[0]};	// Pipeline.scala:10:28, Reg.scala:19:16
        exu_io_in_bits_r_cf_pc = {_RANDOM_2[31:1], _RANDOM_3, _RANDOM_4[0]};	// Reg.scala:19:16
        exu_io_in_bits_r_cf_pnpc = {_RANDOM_4[31:1], _RANDOM_5, _RANDOM_6[0]};	// Reg.scala:19:16
        exu_io_in_bits_r_cf_exceptionVec_2 = _RANDOM_8[5];	// Reg.scala:19:16
        exu_io_in_bits_r_ctrl_fuType = _RANDOM_11[10:8];	// Reg.scala:19:16
        exu_io_in_bits_r_ctrl_fuCtrl = _RANDOM_11[17:11];	// Reg.scala:19:16
        exu_io_in_bits_r_ctrl_rfWen = _RANDOM_11[28];	// Reg.scala:19:16
        exu_io_in_bits_r_ctrl_rfDest = {_RANDOM_11[31:29], _RANDOM_12[1:0]};	// Reg.scala:19:16
        exu_io_in_bits_r_data_srcA = {_RANDOM_12[31:7], _RANDOM_13, _RANDOM_14[6:0]};	// Reg.scala:19:16
        exu_io_in_bits_r_data_srcB = {_RANDOM_14[31:7], _RANDOM_15, _RANDOM_16[6:0]};	// Reg.scala:19:16
        exu_io_in_bits_r_data_imm = {_RANDOM_16[31:7], _RANDOM_17, _RANDOM_18[6:0]};	// Reg.scala:19:16
        valid_1 = _RANDOM_18[7];	// Pipeline.scala:10:28, Reg.scala:19:16
        wbu_io_in_bits_r_decode_cf_instr = {_RANDOM_18[31:8], _RANDOM_19, _RANDOM_20[7:0]};	// Reg.scala:19:16
        wbu_io_in_bits_r_decode_cf_pc = {_RANDOM_20[31:8], _RANDOM_21, _RANDOM_22[7:0]};	// Reg.scala:19:16
        wbu_io_in_bits_r_decode_cf_pnpc = {_RANDOM_22[31:8], _RANDOM_23, _RANDOM_24[7:0]};	// Reg.scala:19:16
        wbu_io_in_bits_r_decode_cf_redirect_target = {_RANDOM_24[31:8], _RANDOM_25, _RANDOM_26[7:0]};	// Reg.scala:19:16
        wbu_io_in_bits_r_decode_cf_redirect_valid = _RANDOM_26[9];	// Reg.scala:19:16
        wbu_io_in_bits_r_decode_ctrl_fuType = _RANDOM_29[17:15];	// Reg.scala:19:16
        wbu_io_in_bits_r_decode_ctrl_rfWen = _RANDOM_30[3];	// Reg.scala:19:16
        wbu_io_in_bits_r_decode_ctrl_rfDest = _RANDOM_30[8:4];	// Reg.scala:19:16
        wbu_io_in_bits_r_commits_0 = {_RANDOM_38[31:15], _RANDOM_39, _RANDOM_40[14:0]};	// Reg.scala:19:16
        wbu_io_in_bits_r_commits_1 = {_RANDOM_40[31:15], _RANDOM_41, _RANDOM_42[14:0]};	// Reg.scala:19:16
        wbu_io_in_bits_r_commits_2 = {_RANDOM_42[31:15], _RANDOM_43, _RANDOM_44[14:0]};	// Reg.scala:19:16
        wbu_io_in_bits_r_commits_3 = {_RANDOM_44[31:15], _RANDOM_45, _RANDOM_46[14:0]};	// Reg.scala:19:16
        c = {_RANDOM_48[31:15], _RANDOM_49, _RANDOM_50[14:0]};	// GTimer.scala:8:32
        c_1 = {_RANDOM_50[31:15], _RANDOM_51, _RANDOM_52[14:0]};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3941:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:3941:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  ISU isu (	// Backend.scala:27:25
    .clock                          (clock),
    .reset                          (reset),
    .io_in_0_valid                  (io_in_0_valid),
    .io_in_0_bits_cf_instr          (io_in_0_bits_cf_instr),
    .io_in_0_bits_cf_pc             (io_in_0_bits_cf_pc),
    .io_in_0_bits_cf_pnpc           (io_in_0_bits_cf_pnpc),
    .io_in_0_bits_cf_exceptionVec_2 (io_in_0_bits_cf_exceptionVec_2),
    .io_in_0_bits_ctrl_srcAType     (io_in_0_bits_ctrl_srcAType),
    .io_in_0_bits_ctrl_srcBType     (io_in_0_bits_ctrl_srcBType),
    .io_in_0_bits_ctrl_fuType       (io_in_0_bits_ctrl_fuType),
    .io_in_0_bits_ctrl_fuCtrl       (io_in_0_bits_ctrl_fuCtrl),
    .io_in_0_bits_ctrl_rfSrcA       (io_in_0_bits_ctrl_rfSrcA),
    .io_in_0_bits_ctrl_rfSrcB       (io_in_0_bits_ctrl_rfSrcB),
    .io_in_0_bits_ctrl_rfWen        (io_in_0_bits_ctrl_rfWen),
    .io_in_0_bits_ctrl_rfDest       (io_in_0_bits_ctrl_rfDest),
    .io_in_0_bits_data_imm          (io_in_0_bits_data_imm),
    .io_out_ready                   (_exu_io_in_ready),	// Backend.scala:28:25
    .io_wb_rfWen                    (_wbu_io_wb_rfWen),	// Backend.scala:29:25
    .io_wb_rfDest                   (_wbu_io_wb_rfDest),	// Backend.scala:29:25
    .io_wb_rfData                   (_wbu_io_wb_rfData),	// Backend.scala:29:25
    .io_forward_valid               (_exu_io_forward_valid),	// Backend.scala:28:25
    .io_forward_wb_rfWen            (_exu_io_forward_wb_rfWen),	// Backend.scala:28:25
    .io_forward_wb_rfDest           (_exu_io_forward_wb_rfDest),	// Backend.scala:28:25
    .io_forward_wb_rfData           (_exu_io_forward_wb_rfData),	// Backend.scala:28:25
    .io_forward_fuType              (_exu_io_forward_fuType),	// Backend.scala:28:25
    .io_flush                       (io_flush[0]),	// Backend.scala:31:73
    .io_in_0_ready                  (io_in_0_ready),
    .io_out_valid                   (_isu_io_out_valid),
    .io_out_bits_cf_instr           (_isu_io_out_bits_cf_instr),
    .io_out_bits_cf_pc              (_isu_io_out_bits_cf_pc),
    .io_out_bits_cf_pnpc            (_isu_io_out_bits_cf_pnpc),
    .io_out_bits_cf_exceptionVec_2  (_isu_io_out_bits_cf_exceptionVec_2),
    .io_out_bits_ctrl_fuType        (_isu_io_out_bits_ctrl_fuType),
    .io_out_bits_ctrl_fuCtrl        (_isu_io_out_bits_ctrl_fuCtrl),
    .io_out_bits_ctrl_rfWen         (_isu_io_out_bits_ctrl_rfWen),
    .io_out_bits_ctrl_rfDest        (_isu_io_out_bits_ctrl_rfDest),
    .io_out_bits_data_srcA          (_isu_io_out_bits_data_srcA),
    .io_out_bits_data_srcB          (_isu_io_out_bits_data_srcB),
    .io_out_bits_data_imm           (_isu_io_out_bits_data_imm),
    .io_gpr_regs_1                  (io_gpr_regs_1),
    .io_gpr_regs_2                  (io_gpr_regs_2),
    .io_gpr_regs_3                  (io_gpr_regs_3),
    .io_gpr_regs_4                  (io_gpr_regs_4),
    .io_gpr_regs_5                  (io_gpr_regs_5),
    .io_gpr_regs_6                  (io_gpr_regs_6),
    .io_gpr_regs_7                  (io_gpr_regs_7),
    .io_gpr_regs_8                  (io_gpr_regs_8),
    .io_gpr_regs_9                  (io_gpr_regs_9),
    .io_gpr_regs_10                 (io_gpr_regs_10),
    .io_gpr_regs_11                 (io_gpr_regs_11),
    .io_gpr_regs_12                 (io_gpr_regs_12),
    .io_gpr_regs_13                 (io_gpr_regs_13),
    .io_gpr_regs_14                 (io_gpr_regs_14),
    .io_gpr_regs_15                 (io_gpr_regs_15),
    .io_gpr_regs_16                 (io_gpr_regs_16),
    .io_gpr_regs_17                 (io_gpr_regs_17),
    .io_gpr_regs_18                 (io_gpr_regs_18),
    .io_gpr_regs_19                 (io_gpr_regs_19),
    .io_gpr_regs_20                 (io_gpr_regs_20),
    .io_gpr_regs_21                 (io_gpr_regs_21),
    .io_gpr_regs_22                 (io_gpr_regs_22),
    .io_gpr_regs_23                 (io_gpr_regs_23),
    .io_gpr_regs_24                 (io_gpr_regs_24),
    .io_gpr_regs_25                 (io_gpr_regs_25),
    .io_gpr_regs_26                 (io_gpr_regs_26),
    .io_gpr_regs_27                 (io_gpr_regs_27),
    .io_gpr_regs_28                 (io_gpr_regs_28),
    .io_gpr_regs_29                 (io_gpr_regs_29),
    .io_gpr_regs_30                 (io_gpr_regs_30),
    .io_gpr_regs_31                 (io_gpr_regs_31)
  );
  EXU exu (	// Backend.scala:28:25
    .clock                                 (clock),
    .reset                                 (reset),
    .io_in_valid                           (valid),	// Pipeline.scala:10:28
    .io_in_bits_cf_instr                   (exu_io_in_bits_r_cf_instr),	// Reg.scala:19:16
    .io_in_bits_cf_pc                      (exu_io_in_bits_r_cf_pc),	// Reg.scala:19:16
    .io_in_bits_cf_pnpc                    (exu_io_in_bits_r_cf_pnpc),	// Reg.scala:19:16
    .io_in_bits_cf_exceptionVec_2          (exu_io_in_bits_r_cf_exceptionVec_2),	// Reg.scala:19:16
    .io_in_bits_ctrl_fuType                (exu_io_in_bits_r_ctrl_fuType),	// Reg.scala:19:16
    .io_in_bits_ctrl_fuCtrl                (exu_io_in_bits_r_ctrl_fuCtrl),	// Reg.scala:19:16
    .io_in_bits_ctrl_rfWen                 (exu_io_in_bits_r_ctrl_rfWen),	// Reg.scala:19:16
    .io_in_bits_ctrl_rfDest                (exu_io_in_bits_r_ctrl_rfDest),	// Reg.scala:19:16
    .io_in_bits_data_srcA                  (exu_io_in_bits_r_data_srcA),	// Reg.scala:19:16
    .io_in_bits_data_srcB                  (exu_io_in_bits_r_data_srcB),	// Reg.scala:19:16
    .io_in_bits_data_imm                   (exu_io_in_bits_r_data_imm),	// Reg.scala:19:16
    .io_flush                              (io_flush[1]),	// Backend.scala:32:64
    .io_dmem_aw_ready                      (io_dmem_aw_ready),
    .io_dmem_w_ready                       (io_dmem_w_ready),
    .io_dmem_b_valid                       (io_dmem_b_valid),
    .io_dmem_ar_ready                      (io_dmem_ar_ready),
    .io_dmem_r_valid                       (io_dmem_r_valid),
    .io_dmem_r_bits_data                   (io_dmem_r_bits_data),
    .io_in_ready                           (_exu_io_in_ready),
    .io_out_valid                          (_exu_io_out_valid),
    .io_out_bits_decode_cf_instr           (_exu_io_out_bits_decode_cf_instr),
    .io_out_bits_decode_cf_pc              (_exu_io_out_bits_decode_cf_pc),
    .io_out_bits_decode_cf_pnpc            (_exu_io_out_bits_decode_cf_pnpc),
    .io_out_bits_decode_cf_redirect_target (_exu_io_out_bits_decode_cf_redirect_target),
    .io_out_bits_decode_cf_redirect_valid  (_exu_io_out_bits_decode_cf_redirect_valid),
    .io_out_bits_decode_ctrl_fuType        (_exu_io_out_bits_decode_ctrl_fuType),
    .io_out_bits_decode_ctrl_rfWen         (_exu_io_out_bits_decode_ctrl_rfWen),
    .io_out_bits_decode_ctrl_rfDest        (_exu_io_out_bits_decode_ctrl_rfDest),
    .io_out_bits_commits_0                 (_exu_io_out_bits_commits_0),
    .io_out_bits_commits_1                 (_exu_io_out_bits_commits_1),
    .io_out_bits_commits_2                 (_exu_io_out_bits_commits_2),
    .io_out_bits_commits_3                 (_exu_io_out_bits_commits_3),
    .io_dmem_aw_valid                      (io_dmem_aw_valid),
    .io_dmem_aw_bits_addr                  (io_dmem_aw_bits_addr),
    .io_dmem_w_valid                       (io_dmem_w_valid),
    .io_dmem_w_bits_data                   (io_dmem_w_bits_data),
    .io_dmem_w_bits_strb                   (io_dmem_w_bits_strb),
    .io_dmem_b_ready                       (io_dmem_b_ready),
    .io_dmem_ar_valid                      (io_dmem_ar_valid),
    .io_dmem_ar_bits_addr                  (io_dmem_ar_bits_addr),
    .io_dmem_r_ready                       (io_dmem_r_ready),
    .io_forward_valid                      (_exu_io_forward_valid),
    .io_forward_wb_rfWen                   (_exu_io_forward_wb_rfWen),
    .io_forward_wb_rfDest                  (_exu_io_forward_wb_rfDest),
    .io_forward_wb_rfData                  (_exu_io_forward_wb_rfData),
    .io_forward_fuType                     (_exu_io_forward_fuType),
    .io_csr_regs_0                         (io_csr_regs_0),
    .io_csr_regs_1                         (io_csr_regs_1),
    .io_csr_regs_2                         (io_csr_regs_2),
    .io_csr_regs_3                         (io_csr_regs_3)
  );
  WBU wbu (	// Backend.scala:29:25
    .clock                                  (clock),
    .reset                                  (reset),
    .io_in_valid                            (valid_1),	// Pipeline.scala:10:28
    .io_in_bits_decode_cf_instr             (wbu_io_in_bits_r_decode_cf_instr),	// Reg.scala:19:16
    .io_in_bits_decode_cf_pc                (wbu_io_in_bits_r_decode_cf_pc),	// Reg.scala:19:16
    .io_in_bits_decode_cf_pnpc              (wbu_io_in_bits_r_decode_cf_pnpc),	// Reg.scala:19:16
    .io_in_bits_decode_cf_redirect_target   (wbu_io_in_bits_r_decode_cf_redirect_target),	// Reg.scala:19:16
    .io_in_bits_decode_cf_redirect_valid    (wbu_io_in_bits_r_decode_cf_redirect_valid),	// Reg.scala:19:16
    .io_in_bits_decode_ctrl_fuType          (wbu_io_in_bits_r_decode_ctrl_fuType),	// Reg.scala:19:16
    .io_in_bits_decode_ctrl_rfWen           (wbu_io_in_bits_r_decode_ctrl_rfWen),	// Reg.scala:19:16
    .io_in_bits_decode_ctrl_rfDest          (wbu_io_in_bits_r_decode_ctrl_rfDest),	// Reg.scala:19:16
    .io_in_bits_commits_0                   (wbu_io_in_bits_r_commits_0),	// Reg.scala:19:16
    .io_in_bits_commits_1                   (wbu_io_in_bits_r_commits_1),	// Reg.scala:19:16
    .io_in_bits_commits_2                   (wbu_io_in_bits_r_commits_2),	// Reg.scala:19:16
    .io_in_bits_commits_3                   (wbu_io_in_bits_r_commits_3),	// Reg.scala:19:16
    .io_wb_rfWen                            (_wbu_io_wb_rfWen),
    .io_wb_rfDest                           (_wbu_io_wb_rfDest),
    .io_wb_rfData                           (_wbu_io_wb_rfData),
    .io_redirect_target                     (io_redirect_target),
    .io_redirect_valid                      (io_redirect_valid),
    .io_difftest_commit_valid               (io_difftest_commit_valid),
    .io_difftest_commit_bits_decode_cf_pnpc (io_difftest_commit_bits_decode_cf_pnpc),
    .io_difftest_redirect_target            (io_difftest_redirect_target),
    .io_difftest_redirect_valid             (io_difftest_redirect_valid)
  );
endmodule

module Core(	// <stdin>:4164:10
  input         clock,
                reset,
                io_imem_ar_ready,
                io_imem_r_valid,
  input  [63:0] io_imem_r_bits_data,
  input         io_dmem_aw_ready,
                io_dmem_w_ready,
                io_dmem_b_valid,
                io_dmem_ar_ready,
                io_dmem_r_valid,
  input  [63:0] io_dmem_r_bits_data,
  output        io_imem_ar_valid,
  output [31:0] io_imem_ar_bits_addr,
  output        io_imem_r_ready,
                io_dmem_aw_valid,
  output [31:0] io_dmem_aw_bits_addr,
  output        io_dmem_w_valid,
  output [63:0] io_dmem_w_bits_data,
  output [7:0]  io_dmem_w_bits_strb,
  output        io_dmem_b_ready,
                io_dmem_ar_valid,
  output [31:0] io_dmem_ar_bits_addr,
  output        io_dmem_r_ready,
  output [63:0] io_gpr_regs_1,
                io_gpr_regs_2,
                io_gpr_regs_3,
                io_gpr_regs_4,
                io_gpr_regs_5,
                io_gpr_regs_6,
                io_gpr_regs_7,
                io_gpr_regs_8,
                io_gpr_regs_9,
                io_gpr_regs_10,
                io_gpr_regs_11,
                io_gpr_regs_12,
                io_gpr_regs_13,
                io_gpr_regs_14,
                io_gpr_regs_15,
                io_gpr_regs_16,
                io_gpr_regs_17,
                io_gpr_regs_18,
                io_gpr_regs_19,
                io_gpr_regs_20,
                io_gpr_regs_21,
                io_gpr_regs_22,
                io_gpr_regs_23,
                io_gpr_regs_24,
                io_gpr_regs_25,
                io_gpr_regs_26,
                io_gpr_regs_27,
                io_gpr_regs_28,
                io_gpr_regs_29,
                io_gpr_regs_30,
                io_gpr_regs_31,
                io_csr_regs_0,
                io_csr_regs_1,
                io_csr_regs_2,
                io_csr_regs_3,
  output        io_difftest_commit_valid,
  output [63:0] io_difftest_commit_bits_decode_cf_pnpc,
                io_difftest_redirect_target,
  output        io_difftest_redirect_valid);

  wire        _backend_io_in_0_ready;	// TopMain.scala:39:37
  wire [63:0] _backend_io_redirect_target;	// TopMain.scala:39:37
  wire        _backend_io_redirect_valid;	// TopMain.scala:39:37
  wire        _frontend_io_out_0_valid;	// TopMain.scala:31:50
  wire [63:0] _frontend_io_out_0_bits_cf_instr;	// TopMain.scala:31:50
  wire [63:0] _frontend_io_out_0_bits_cf_pc;	// TopMain.scala:31:50
  wire [63:0] _frontend_io_out_0_bits_cf_pnpc;	// TopMain.scala:31:50
  wire        _frontend_io_out_0_bits_cf_exceptionVec_2;	// TopMain.scala:31:50
  wire        _frontend_io_out_0_bits_ctrl_srcAType;	// TopMain.scala:31:50
  wire        _frontend_io_out_0_bits_ctrl_srcBType;	// TopMain.scala:31:50
  wire [2:0]  _frontend_io_out_0_bits_ctrl_fuType;	// TopMain.scala:31:50
  wire [6:0]  _frontend_io_out_0_bits_ctrl_fuCtrl;	// TopMain.scala:31:50
  wire [4:0]  _frontend_io_out_0_bits_ctrl_rfSrcA;	// TopMain.scala:31:50
  wire [4:0]  _frontend_io_out_0_bits_ctrl_rfSrcB;	// TopMain.scala:31:50
  wire        _frontend_io_out_0_bits_ctrl_rfWen;	// TopMain.scala:31:50
  wire [4:0]  _frontend_io_out_0_bits_ctrl_rfDest;	// TopMain.scala:31:50
  wire [63:0] _frontend_io_out_0_bits_data_imm;	// TopMain.scala:31:50
  wire        _frontend_io_out_1_valid;	// TopMain.scala:31:50
  wire [63:0] _frontend_io_out_1_bits_cf_instr;	// TopMain.scala:31:50
  wire [63:0] _frontend_io_out_1_bits_cf_pc;	// TopMain.scala:31:50
  wire [63:0] _frontend_io_out_1_bits_cf_pnpc;	// TopMain.scala:31:50
  wire        _frontend_io_out_1_bits_cf_exceptionVec_2;	// TopMain.scala:31:50
  wire        _frontend_io_out_1_bits_ctrl_srcAType;	// TopMain.scala:31:50
  wire        _frontend_io_out_1_bits_ctrl_srcBType;	// TopMain.scala:31:50
  wire [2:0]  _frontend_io_out_1_bits_ctrl_fuType;	// TopMain.scala:31:50
  wire [6:0]  _frontend_io_out_1_bits_ctrl_fuCtrl;	// TopMain.scala:31:50
  wire [4:0]  _frontend_io_out_1_bits_ctrl_rfSrcA;	// TopMain.scala:31:50
  wire [4:0]  _frontend_io_out_1_bits_ctrl_rfSrcB;	// TopMain.scala:31:50
  wire        _frontend_io_out_1_bits_ctrl_rfWen;	// TopMain.scala:31:50
  wire [4:0]  _frontend_io_out_1_bits_ctrl_rfDest;	// TopMain.scala:31:50
  wire [63:0] _frontend_io_out_1_bits_data_imm;	// TopMain.scala:31:50
  wire [3:0]  _frontend_io_flushVec;	// TopMain.scala:31:50
  reg  [63:0] dataBuffer_0_cf_instr;	// PipelineVector.scala:12:41
  reg  [63:0] dataBuffer_0_cf_pc;	// PipelineVector.scala:12:41
  reg  [63:0] dataBuffer_0_cf_pnpc;	// PipelineVector.scala:12:41
  reg         dataBuffer_0_cf_exceptionVec_2;	// PipelineVector.scala:12:41
  reg         dataBuffer_0_ctrl_srcAType;	// PipelineVector.scala:12:41
  reg         dataBuffer_0_ctrl_srcBType;	// PipelineVector.scala:12:41
  reg  [2:0]  dataBuffer_0_ctrl_fuType;	// PipelineVector.scala:12:41
  reg  [6:0]  dataBuffer_0_ctrl_fuCtrl;	// PipelineVector.scala:12:41
  reg  [4:0]  dataBuffer_0_ctrl_rfSrcA;	// PipelineVector.scala:12:41
  reg  [4:0]  dataBuffer_0_ctrl_rfSrcB;	// PipelineVector.scala:12:41
  reg         dataBuffer_0_ctrl_rfWen;	// PipelineVector.scala:12:41
  reg  [4:0]  dataBuffer_0_ctrl_rfDest;	// PipelineVector.scala:12:41
  reg  [63:0] dataBuffer_0_data_imm;	// PipelineVector.scala:12:41
  reg         ringBufferHead;	// PipelineVector.scala:13:45
  reg         ringBufferTail;	// PipelineVector.scala:14:45
  wire        ringBufferAllowin = ringBufferHead - 1'h1 != ringBufferTail & {1'h0, ringBufferHead} - 2'h2 != {1'h0,
                ringBufferTail};	// <stdin>:4164:10, PipelineVector.scala:13:45, :14:45, :16:{75,86,137}
  wire [1:0]  enqueueSize = {1'h0, _frontend_io_out_0_valid} + {1'h0, _frontend_io_out_1_valid};	// <stdin>:4164:10, PipelineVector.scala:23:56, TopMain.scala:31:50
  wire        _frontend_io_out_0_ready_T_1 = ringBufferAllowin | ~_frontend_io_out_0_valid;	// PipelineVector.scala:16:137, :33:{48,51}, TopMain.scala:31:50
  wire        _frontend_io_out_1_ready_T_1 = ringBufferAllowin | ~_frontend_io_out_1_valid;	// PipelineVector.scala:16:137, :34:{48,51}, TopMain.scala:31:50
  wire        _backend_io_in_0_valid_T = ringBufferHead != ringBufferTail;	// PipelineVector.scala:13:45, :14:45, :39:46
  wire        _backend_io_in_1_valid_T_1 = ringBufferHead != ringBufferTail - 1'h1 & _backend_io_in_0_valid_T;	// PipelineVector.scala:13:45, :14:45, :39:46, :42:54, :44:{46,66}
  wire        _dequeueSize_T = _backend_io_in_0_ready & _backend_io_in_0_valid_T;	// Decoupled.scala:52:35, PipelineVector.scala:39:46, TopMain.scala:39:37
  reg  [63:0] c;	// GTimer.scala:8:32
  always @(posedge clock) begin
    if (reset) begin
      dataBuffer_0_cf_instr <= 64'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_cf_pc <= 64'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_cf_pnpc <= 64'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_cf_exceptionVec_2 <= 1'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_ctrl_srcAType <= 1'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_ctrl_srcBType <= 1'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_ctrl_fuType <= 3'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_ctrl_fuCtrl <= 7'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_ctrl_rfSrcA <= 5'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_ctrl_rfSrcB <= 5'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_ctrl_rfWen <= 1'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_ctrl_rfDest <= 5'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      dataBuffer_0_data_imm <= 64'h0;	// <stdin>:4164:10, PipelineVector.scala:12:41
      ringBufferHead <= 1'h0;	// <stdin>:4164:10, PipelineVector.scala:13:45
      ringBufferTail <= 1'h0;	// <stdin>:4164:10, PipelineVector.scala:14:45
      c <= 64'h0;	// <stdin>:4164:10, GTimer.scala:8:32
    end
    else begin
      automatic logic wen = _frontend_io_out_0_ready_T_1 & _frontend_io_out_0_valid | _frontend_io_out_1_ready_T_1 &
                                                _frontend_io_out_1_valid;	// Decoupled.scala:52:35, PipelineVector.scala:26:36, :33:48, :34:48, TopMain.scala:31:50
      if (wen) begin	// PipelineVector.scala:26:36
        if (enqueueSize[1]) begin	// PipelineVector.scala:23:56, :24:65
          dataBuffer_0_cf_instr <= _frontend_io_out_1_bits_cf_instr;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_cf_pc <= _frontend_io_out_1_bits_cf_pc;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_cf_pnpc <= _frontend_io_out_1_bits_cf_pnpc;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_cf_exceptionVec_2 <= _frontend_io_out_1_bits_cf_exceptionVec_2;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_ctrl_srcAType <= _frontend_io_out_1_bits_ctrl_srcAType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_ctrl_srcBType <= _frontend_io_out_1_bits_ctrl_srcBType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_ctrl_fuType <= _frontend_io_out_1_bits_ctrl_fuType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_ctrl_fuCtrl <= _frontend_io_out_1_bits_ctrl_fuCtrl;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_ctrl_rfSrcA <= _frontend_io_out_1_bits_ctrl_rfSrcA;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_ctrl_rfSrcB <= _frontend_io_out_1_bits_ctrl_rfSrcB;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_ctrl_rfWen <= _frontend_io_out_1_bits_ctrl_rfWen;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_ctrl_rfDest <= _frontend_io_out_1_bits_ctrl_rfDest;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          dataBuffer_0_data_imm <= _frontend_io_out_1_bits_data_imm;	// PipelineVector.scala:12:41, TopMain.scala:31:50
        end
        else if (|enqueueSize) begin	// PipelineVector.scala:23:56, :24:65
          if (_frontend_io_out_0_valid) begin	// TopMain.scala:31:50
            dataBuffer_0_cf_instr <= _frontend_io_out_0_bits_cf_instr;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_cf_pc <= _frontend_io_out_0_bits_cf_pc;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_cf_pnpc <= _frontend_io_out_0_bits_cf_pnpc;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_cf_exceptionVec_2 <= _frontend_io_out_0_bits_cf_exceptionVec_2;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_srcAType <= _frontend_io_out_0_bits_ctrl_srcAType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_srcBType <= _frontend_io_out_0_bits_ctrl_srcBType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_fuType <= _frontend_io_out_0_bits_ctrl_fuType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_fuCtrl <= _frontend_io_out_0_bits_ctrl_fuCtrl;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_rfSrcA <= _frontend_io_out_0_bits_ctrl_rfSrcA;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_rfSrcB <= _frontend_io_out_0_bits_ctrl_rfSrcB;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_rfWen <= _frontend_io_out_0_bits_ctrl_rfWen;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_rfDest <= _frontend_io_out_0_bits_ctrl_rfDest;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_data_imm <= _frontend_io_out_0_bits_data_imm;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          end
          else begin	// TopMain.scala:31:50
            dataBuffer_0_cf_instr <= _frontend_io_out_1_bits_cf_instr;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_cf_pc <= _frontend_io_out_1_bits_cf_pc;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_cf_pnpc <= _frontend_io_out_1_bits_cf_pnpc;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_cf_exceptionVec_2 <= _frontend_io_out_1_bits_cf_exceptionVec_2;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_srcAType <= _frontend_io_out_1_bits_ctrl_srcAType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_srcBType <= _frontend_io_out_1_bits_ctrl_srcBType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_fuType <= _frontend_io_out_1_bits_ctrl_fuType;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_fuCtrl <= _frontend_io_out_1_bits_ctrl_fuCtrl;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_rfSrcA <= _frontend_io_out_1_bits_ctrl_rfSrcA;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_rfSrcB <= _frontend_io_out_1_bits_ctrl_rfSrcB;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_rfWen <= _frontend_io_out_1_bits_ctrl_rfWen;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_ctrl_rfDest <= _frontend_io_out_1_bits_ctrl_rfDest;	// PipelineVector.scala:12:41, TopMain.scala:31:50
            dataBuffer_0_data_imm <= _frontend_io_out_1_bits_data_imm;	// PipelineVector.scala:12:41, TopMain.scala:31:50
          end
        end
      end
      ringBufferHead <= ~(_frontend_io_flushVec[1]) & (wen ? ringBufferHead + enqueueSize[0] : ringBufferHead);	// PipelineVector.scala:13:45, :23:56, :26:36, :27:28, :30:{40,58}, :54:30, :55:36, TopMain.scala:31:50, :42:150
      ringBufferTail <= ~(_frontend_io_flushVec[1]) & (_dequeueSize_T ? ringBufferTail + _dequeueSize_T :
                                                ringBufferTail);	// Decoupled.scala:52:35, PipelineVector.scala:14:45, :27:28, :49:36, :50:{36,54}, :54:30, :55:36, :56:36, TopMain.scala:31:50, :42:150
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:4164:10
    always @(posedge clock) begin	// PipelineVector.scala:60:27
      if ((`PRINTF_COND_) & ~reset)	// PipelineVector.scala:60:27
        $fwrite(32'h80000002, "[DPQ] size %x head %x tail %x enq %x deq %x\n", 1'h0, ringBufferHead, ringBufferTail, enqueueSize, {1'h0, _dequeueSize_T});	// <stdin>:4164:10, Decoupled.scala:52:35, PipelineVector.scala:13:45, :14:45, :23:56, :47:52, :60:27
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:34:43, PipelineVector.scala:60:27
        $fwrite(32'h80000002, "[%d] Core: ", c);	// Debug.scala:34:43, GTimer.scala:8:32, PipelineVector.scala:60:27
      if ((`PRINTF_COND_) & ~reset)	// Debug.scala:35:31, PipelineVector.scala:60:27
        $fwrite(32'h80000002, "flush = %b, 0: frontend:(%d,%d), backend:(%d,%d); 1: frontend:(%d,%d), backend:(%d,%d)\n", _frontend_io_flushVec, _frontend_io_out_0_valid, _frontend_io_out_0_ready_T_1, _backend_io_in_0_valid_T, _backend_io_in_0_ready, _frontend_io_out_1_valid, _frontend_io_out_1_ready_T_1, _backend_io_in_1_valid_T_1, 1'h0);	// <stdin>:4164:10, Debug.scala:35:31, PipelineVector.scala:33:48, :34:48, :39:46, :44:66, :60:27, TopMain.scala:31:50, :39:37
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:4164:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:4164:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_13;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_14;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_15;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_16;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_17;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_18;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_19;	// <stdin>:4164:10
      automatic logic [31:0] _RANDOM_20;	// <stdin>:4164:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:4164:10
        `INIT_RANDOM_PROLOG_	// <stdin>:4164:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:4164:10
        _RANDOM_0 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_1 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_2 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_3 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_4 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_5 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_6 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_7 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_8 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_9 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_10 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_11 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_12 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_13 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_14 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_15 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_16 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_17 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_18 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_19 = `RANDOM;	// <stdin>:4164:10
        _RANDOM_20 = `RANDOM;	// <stdin>:4164:10
        dataBuffer_0_cf_instr = {_RANDOM_0, _RANDOM_1};	// PipelineVector.scala:12:41
        dataBuffer_0_cf_pc = {_RANDOM_2, _RANDOM_3};	// PipelineVector.scala:12:41
        dataBuffer_0_cf_pnpc = {_RANDOM_4, _RANDOM_5};	// PipelineVector.scala:12:41
        dataBuffer_0_cf_exceptionVec_2 = _RANDOM_8[4];	// PipelineVector.scala:12:41
        dataBuffer_0_ctrl_srcAType = _RANDOM_11[5];	// PipelineVector.scala:12:41
        dataBuffer_0_ctrl_srcBType = _RANDOM_11[6];	// PipelineVector.scala:12:41
        dataBuffer_0_ctrl_fuType = _RANDOM_11[9:7];	// PipelineVector.scala:12:41
        dataBuffer_0_ctrl_fuCtrl = _RANDOM_11[16:10];	// PipelineVector.scala:12:41
        dataBuffer_0_ctrl_rfSrcA = _RANDOM_11[21:17];	// PipelineVector.scala:12:41
        dataBuffer_0_ctrl_rfSrcB = _RANDOM_11[26:22];	// PipelineVector.scala:12:41
        dataBuffer_0_ctrl_rfWen = _RANDOM_11[27];	// PipelineVector.scala:12:41
        dataBuffer_0_ctrl_rfDest = {_RANDOM_11[31:28], _RANDOM_12[0]};	// PipelineVector.scala:12:41
        dataBuffer_0_data_imm = {_RANDOM_16[31:6], _RANDOM_17, _RANDOM_18[5:0]};	// PipelineVector.scala:12:41
        ringBufferHead = _RANDOM_18[6];	// PipelineVector.scala:12:41, :13:45
        ringBufferTail = _RANDOM_18[7];	// PipelineVector.scala:12:41, :14:45
        c = {_RANDOM_18[31:8], _RANDOM_19, _RANDOM_20[7:0]};	// GTimer.scala:8:32, PipelineVector.scala:12:41
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:4164:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:4164:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Frontend_embedded frontend (	// TopMain.scala:31:50
    .clock                           (clock),
    .reset                           (reset),
    .io_imem_ar_ready                (io_imem_ar_ready),
    .io_imem_r_valid                 (io_imem_r_valid),
    .io_imem_r_bits_data             (io_imem_r_bits_data),
    .io_out_0_ready                  (_frontend_io_out_0_ready_T_1),	// PipelineVector.scala:33:48
    .io_out_1_ready                  (_frontend_io_out_1_ready_T_1),	// PipelineVector.scala:34:48
    .io_redirect_target              (_backend_io_redirect_target),	// TopMain.scala:39:37
    .io_redirect_valid               (_backend_io_redirect_valid),	// TopMain.scala:39:37
    .io_imem_ar_valid                (io_imem_ar_valid),
    .io_imem_ar_bits_addr            (io_imem_ar_bits_addr),
    .io_imem_r_ready                 (io_imem_r_ready),
    .io_out_0_valid                  (_frontend_io_out_0_valid),
    .io_out_0_bits_cf_instr          (_frontend_io_out_0_bits_cf_instr),
    .io_out_0_bits_cf_pc             (_frontend_io_out_0_bits_cf_pc),
    .io_out_0_bits_cf_pnpc           (_frontend_io_out_0_bits_cf_pnpc),
    .io_out_0_bits_cf_exceptionVec_2 (_frontend_io_out_0_bits_cf_exceptionVec_2),
    .io_out_0_bits_ctrl_srcAType     (_frontend_io_out_0_bits_ctrl_srcAType),
    .io_out_0_bits_ctrl_srcBType     (_frontend_io_out_0_bits_ctrl_srcBType),
    .io_out_0_bits_ctrl_fuType       (_frontend_io_out_0_bits_ctrl_fuType),
    .io_out_0_bits_ctrl_fuCtrl       (_frontend_io_out_0_bits_ctrl_fuCtrl),
    .io_out_0_bits_ctrl_rfSrcA       (_frontend_io_out_0_bits_ctrl_rfSrcA),
    .io_out_0_bits_ctrl_rfSrcB       (_frontend_io_out_0_bits_ctrl_rfSrcB),
    .io_out_0_bits_ctrl_rfWen        (_frontend_io_out_0_bits_ctrl_rfWen),
    .io_out_0_bits_ctrl_rfDest       (_frontend_io_out_0_bits_ctrl_rfDest),
    .io_out_0_bits_data_imm          (_frontend_io_out_0_bits_data_imm),
    .io_out_1_valid                  (_frontend_io_out_1_valid),
    .io_out_1_bits_cf_instr          (_frontend_io_out_1_bits_cf_instr),
    .io_out_1_bits_cf_pc             (_frontend_io_out_1_bits_cf_pc),
    .io_out_1_bits_cf_pnpc           (_frontend_io_out_1_bits_cf_pnpc),
    .io_out_1_bits_cf_exceptionVec_2 (_frontend_io_out_1_bits_cf_exceptionVec_2),
    .io_out_1_bits_ctrl_srcAType     (_frontend_io_out_1_bits_ctrl_srcAType),
    .io_out_1_bits_ctrl_srcBType     (_frontend_io_out_1_bits_ctrl_srcBType),
    .io_out_1_bits_ctrl_fuType       (_frontend_io_out_1_bits_ctrl_fuType),
    .io_out_1_bits_ctrl_fuCtrl       (_frontend_io_out_1_bits_ctrl_fuCtrl),
    .io_out_1_bits_ctrl_rfSrcA       (_frontend_io_out_1_bits_ctrl_rfSrcA),
    .io_out_1_bits_ctrl_rfSrcB       (_frontend_io_out_1_bits_ctrl_rfSrcB),
    .io_out_1_bits_ctrl_rfWen        (_frontend_io_out_1_bits_ctrl_rfWen),
    .io_out_1_bits_ctrl_rfDest       (_frontend_io_out_1_bits_ctrl_rfDest),
    .io_out_1_bits_data_imm          (_frontend_io_out_1_bits_data_imm),
    .io_flushVec                     (_frontend_io_flushVec)
  );
  Backend_inorder backend (	// TopMain.scala:39:37
    .clock                                  (clock),
    .reset                                  (reset),
    .io_in_0_valid                          (_backend_io_in_0_valid_T),	// PipelineVector.scala:39:46
    .io_in_0_bits_cf_instr                  (dataBuffer_0_cf_instr),	// PipelineVector.scala:12:41
    .io_in_0_bits_cf_pc                     (dataBuffer_0_cf_pc),	// PipelineVector.scala:12:41
    .io_in_0_bits_cf_pnpc                   (dataBuffer_0_cf_pnpc),	// PipelineVector.scala:12:41
    .io_in_0_bits_cf_exceptionVec_2         (dataBuffer_0_cf_exceptionVec_2),	// PipelineVector.scala:12:41
    .io_in_0_bits_ctrl_srcAType             (dataBuffer_0_ctrl_srcAType),	// PipelineVector.scala:12:41
    .io_in_0_bits_ctrl_srcBType             (dataBuffer_0_ctrl_srcBType),	// PipelineVector.scala:12:41
    .io_in_0_bits_ctrl_fuType               (dataBuffer_0_ctrl_fuType),	// PipelineVector.scala:12:41
    .io_in_0_bits_ctrl_fuCtrl               (dataBuffer_0_ctrl_fuCtrl),	// PipelineVector.scala:12:41
    .io_in_0_bits_ctrl_rfSrcA               (dataBuffer_0_ctrl_rfSrcA),	// PipelineVector.scala:12:41
    .io_in_0_bits_ctrl_rfSrcB               (dataBuffer_0_ctrl_rfSrcB),	// PipelineVector.scala:12:41
    .io_in_0_bits_ctrl_rfWen                (dataBuffer_0_ctrl_rfWen),	// PipelineVector.scala:12:41
    .io_in_0_bits_ctrl_rfDest               (dataBuffer_0_ctrl_rfDest),	// PipelineVector.scala:12:41
    .io_in_0_bits_data_imm                  (dataBuffer_0_data_imm),	// PipelineVector.scala:12:41
    .io_in_1_valid                          (_backend_io_in_1_valid_T_1),	// PipelineVector.scala:44:66
    .io_flush                               (_frontend_io_flushVec[3:2]),	// TopMain.scala:31:50, :48:57
    .io_dmem_aw_ready                       (io_dmem_aw_ready),
    .io_dmem_w_ready                        (io_dmem_w_ready),
    .io_dmem_b_valid                        (io_dmem_b_valid),
    .io_dmem_ar_ready                       (io_dmem_ar_ready),
    .io_dmem_r_valid                        (io_dmem_r_valid),
    .io_dmem_r_bits_data                    (io_dmem_r_bits_data),
    .io_in_0_ready                          (_backend_io_in_0_ready),
    .io_dmem_aw_valid                       (io_dmem_aw_valid),
    .io_dmem_aw_bits_addr                   (io_dmem_aw_bits_addr),
    .io_dmem_w_valid                        (io_dmem_w_valid),
    .io_dmem_w_bits_data                    (io_dmem_w_bits_data),
    .io_dmem_w_bits_strb                    (io_dmem_w_bits_strb),
    .io_dmem_b_ready                        (io_dmem_b_ready),
    .io_dmem_ar_valid                       (io_dmem_ar_valid),
    .io_dmem_ar_bits_addr                   (io_dmem_ar_bits_addr),
    .io_dmem_r_ready                        (io_dmem_r_ready),
    .io_redirect_target                     (_backend_io_redirect_target),
    .io_redirect_valid                      (_backend_io_redirect_valid),
    .io_gpr_regs_1                          (io_gpr_regs_1),
    .io_gpr_regs_2                          (io_gpr_regs_2),
    .io_gpr_regs_3                          (io_gpr_regs_3),
    .io_gpr_regs_4                          (io_gpr_regs_4),
    .io_gpr_regs_5                          (io_gpr_regs_5),
    .io_gpr_regs_6                          (io_gpr_regs_6),
    .io_gpr_regs_7                          (io_gpr_regs_7),
    .io_gpr_regs_8                          (io_gpr_regs_8),
    .io_gpr_regs_9                          (io_gpr_regs_9),
    .io_gpr_regs_10                         (io_gpr_regs_10),
    .io_gpr_regs_11                         (io_gpr_regs_11),
    .io_gpr_regs_12                         (io_gpr_regs_12),
    .io_gpr_regs_13                         (io_gpr_regs_13),
    .io_gpr_regs_14                         (io_gpr_regs_14),
    .io_gpr_regs_15                         (io_gpr_regs_15),
    .io_gpr_regs_16                         (io_gpr_regs_16),
    .io_gpr_regs_17                         (io_gpr_regs_17),
    .io_gpr_regs_18                         (io_gpr_regs_18),
    .io_gpr_regs_19                         (io_gpr_regs_19),
    .io_gpr_regs_20                         (io_gpr_regs_20),
    .io_gpr_regs_21                         (io_gpr_regs_21),
    .io_gpr_regs_22                         (io_gpr_regs_22),
    .io_gpr_regs_23                         (io_gpr_regs_23),
    .io_gpr_regs_24                         (io_gpr_regs_24),
    .io_gpr_regs_25                         (io_gpr_regs_25),
    .io_gpr_regs_26                         (io_gpr_regs_26),
    .io_gpr_regs_27                         (io_gpr_regs_27),
    .io_gpr_regs_28                         (io_gpr_regs_28),
    .io_gpr_regs_29                         (io_gpr_regs_29),
    .io_gpr_regs_30                         (io_gpr_regs_30),
    .io_gpr_regs_31                         (io_gpr_regs_31),
    .io_csr_regs_0                          (io_csr_regs_0),
    .io_csr_regs_1                          (io_csr_regs_1),
    .io_csr_regs_2                          (io_csr_regs_2),
    .io_csr_regs_3                          (io_csr_regs_3),
    .io_difftest_commit_valid               (io_difftest_commit_valid),
    .io_difftest_commit_bits_decode_cf_pnpc (io_difftest_commit_bits_decode_cf_pnpc),
    .io_difftest_redirect_target            (io_difftest_redirect_target),
    .io_difftest_redirect_valid             (io_difftest_redirect_valid)
  );
endmodule

module AXI4Lite_Arbiter(	// <stdin>:4463:10
  input         clock,
                reset,
                InstFetch_ar_valid,
  input  [31:0] InstFetch_ar_bits_addr,
  input         InstFetch_r_ready,
                LoadStore_aw_valid,
  input  [31:0] LoadStore_aw_bits_addr,
  input         LoadStore_w_valid,
  input  [63:0] LoadStore_w_bits_data,
  input  [7:0]  LoadStore_w_bits_strb,
  input         LoadStore_b_ready,
                LoadStore_ar_valid,
  input  [31:0] LoadStore_ar_bits_addr,
  input         LoadStore_r_ready,
                Arbiter_aw_ready,
                Arbiter_w_ready,
                Arbiter_b_valid,
                Arbiter_ar_ready,
                Arbiter_r_valid,
  input  [63:0] Arbiter_r_bits_data,
  output        InstFetch_ar_ready,
                InstFetch_r_valid,
  output [63:0] InstFetch_r_bits_data,
  output        LoadStore_aw_ready,
                LoadStore_w_ready,
                LoadStore_b_valid,
                LoadStore_ar_ready,
                LoadStore_r_valid,
  output [63:0] LoadStore_r_bits_data,
  output        Arbiter_aw_valid,
  output [31:0] Arbiter_aw_bits_addr,
  output        Arbiter_w_valid,
  output [63:0] Arbiter_w_bits_data,
  output [7:0]  Arbiter_w_bits_strb,
  output        Arbiter_b_ready,
                Arbiter_ar_valid,
  output [31:0] Arbiter_ar_bits_addr,
  output        Arbiter_r_ready);

  reg  [1:0]  state;	// AXI4_Arbiter.scala:30:28
  wire        _T_1 = InstFetch_ar_valid & LoadStore_ar_valid;	// AXI4_Arbiter.scala:34:50
  reg  [63:0] c;	// GTimer.scala:8:32
  wire        _T_8 = InstFetch_ar_valid & ~LoadStore_ar_valid;	// AXI4_Arbiter.scala:44:{56,59}
  reg  [63:0] c_1;	// GTimer.scala:8:32
  wire        _T_15 = ~InstFetch_ar_valid & LoadStore_ar_valid;	// AXI4_Arbiter.scala:54:{37,57}
  reg  [63:0] c_2;	// GTimer.scala:8:32
  wire        _GEN = _T_1 | ~_T_8;	// AXI4_Arbiter.scala:34:{50,73}, :38:46, :44:{56,80}, :50:52, :54:80
  reg  [63:0] c_3;	// GTimer.scala:8:32
  wire        _T_26 = state == 2'h1;	// AXI4_Arbiter.scala:30:28, :32:24, :53:39
  reg  [63:0] c_4;	// GTimer.scala:8:32
  wire        _T_33 = state == 2'h2;	// AXI4_Arbiter.scala:30:28, :32:24, :43:39
  reg  [63:0] c_5;	// GTimer.scala:8:32
  wire        _GEN_0 = (|state) ? ~_T_26 & Arbiter_ar_ready : _GEN & Arbiter_ar_ready;	// AXI4_Arbiter.scala:30:28, :32:24, :34:73, :38:46, :44:80, :73:44
  wire        _GEN_1 = (|state) ? ~_T_26 & Arbiter_r_valid : _GEN & Arbiter_r_valid;	// AXI4_Arbiter.scala:30:28, :32:24, :34:73, :38:46, :39:46, :44:80, :73:44, :74:43
  wire        _GEN_2 = (|state) ? _T_26 & Arbiter_ar_ready : ~_T_1 & _T_8 & Arbiter_ar_ready;	// AXI4_Arbiter.scala:30:28, :32:24, :34:{50,73}, :40:52, :44:{56,80}, :71:38
  wire        _GEN_3 = (|state) ? _T_26 & Arbiter_r_valid : ~_T_1 & _T_8 & Arbiter_r_valid;	// AXI4_Arbiter.scala:30:28, :32:24, :34:{50,73}, :40:52, :41:51, :44:{56,80}, :72:38
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;	// AXI4_Arbiter.scala:21:19, :30:28
      c <= 64'h0;	// GTimer.scala:8:32
      c_1 <= 64'h0;	// GTimer.scala:8:32
      c_2 <= 64'h0;	// GTimer.scala:8:32
      c_3 <= 64'h0;	// GTimer.scala:8:32
      c_4 <= 64'h0;	// GTimer.scala:8:32
      c_5 <= 64'h0;	// GTimer.scala:8:32
    end
    else begin
      if (|state) begin	// AXI4_Arbiter.scala:30:28, :32:24
        if (_T_26) begin	// AXI4_Arbiter.scala:32:24
          if (InstFetch_r_ready & _GEN_3)	// AXI4_Arbiter.scala:32:24, :34:73, Decoupled.scala:52:35
            state <= 2'h0;	// AXI4_Arbiter.scala:21:19, :30:28
        end
        else if (_T_33 & LoadStore_r_ready & _GEN_1)	// AXI4_Arbiter.scala:30:28, :32:24, :34:73, :88:49
          state <= 2'h0;	// AXI4_Arbiter.scala:21:19, :30:28
      end
      else if (_T_1)	// AXI4_Arbiter.scala:30:28, :32:24, :34:50
        state <= 2'h2;	// AXI4_Arbiter.scala:30:28, :43:39
      else if (_T_8)	// AXI4_Arbiter.scala:30:28, :32:24, :34:50, :44:56
        state <= 2'h1;	// AXI4_Arbiter.scala:30:28, :53:39
      else if (_T_15)	// AXI4_Arbiter.scala:30:28, :32:24, :34:50, :44:56, :54:57
        state <= 2'h2;	// AXI4_Arbiter.scala:30:28, :43:39
      c <= c + 64'h1;	// GTimer.scala:8:32, :9:24
      c_1 <= c_1 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_2 <= c_2 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_3 <= c_3 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_4 <= c_4 + 64'h1;	// GTimer.scala:8:32, :9:24
      c_5 <= c_5 + 64'h1;	// GTimer.scala:8:32, :9:24
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:4463:10
    always @(posedge clock) begin	// Debug.scala:34:43
      automatic logic _GEN_4;	// AXI4_Arbiter.scala:34:73
      automatic logic _GEN_5;	// AXI4_Arbiter.scala:34:73
      automatic logic _GEN_6;	// AXI4_Arbiter.scala:44:80
      automatic logic _GEN_7;	// AXI4_Arbiter.scala:44:80
      automatic logic _GEN_8;	// AXI4_Arbiter.scala:54:80
      automatic logic _GEN_9;	// AXI4_Arbiter.scala:54:80
      automatic logic _GEN_10;	// AXI4_Arbiter.scala:32:24
      automatic logic _GEN_11;	// AXI4_Arbiter.scala:32:24
      _GEN_4 = ~(|state) & _T_1;	// AXI4_Arbiter.scala:30:28, :32:24, :34:{50,73}
      _GEN_5 = ~(|state) & ~_T_1;	// AXI4_Arbiter.scala:30:28, :32:24, :34:{50,73}
      _GEN_6 = _GEN_5 & _T_8;	// AXI4_Arbiter.scala:34:73, :44:{56,80}
      _GEN_7 = _GEN_5 & ~_T_8;	// AXI4_Arbiter.scala:34:73, :44:{56,80}
      _GEN_8 = _GEN_7 & _T_15;	// AXI4_Arbiter.scala:44:80, :54:{57,80}
      _GEN_9 = _GEN_7 & ~_T_15;	// AXI4_Arbiter.scala:44:80, :54:{57,80}
      _GEN_10 = (|state) & _T_26;	// AXI4_Arbiter.scala:30:28, :32:24
      _GEN_11 = (|state) & ~_T_26 & _T_33;	// AXI4_Arbiter.scala:30:28, :32:24
      if ((`PRINTF_COND_) & _GEN_4 & ~reset)	// AXI4_Arbiter.scala:34:73, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] AXI4Lite_Arbiter: ", c);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _GEN_4 & ~reset)	// AXI4_Arbiter.scala:34:73, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[LoadStore <===> SRAM] idle ifvr%x,%x lsvr%x,%x\n", InstFetch_ar_valid, _GEN_2, LoadStore_ar_valid, _GEN_0);	// AXI4_Arbiter.scala:32:24, :34:73, Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & _GEN_6 & ~reset)	// AXI4_Arbiter.scala:44:80, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] AXI4Lite_Arbiter: ", c_1);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _GEN_6 & ~reset)	// AXI4_Arbiter.scala:44:80, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[InstFetch <===> SRAM] idle ifvr%x,%x lsvr%x,%x\n", InstFetch_ar_valid, _GEN_2, LoadStore_ar_valid, _GEN_0);	// AXI4_Arbiter.scala:32:24, :34:73, Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & _GEN_8 & ~reset)	// AXI4_Arbiter.scala:54:80, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] AXI4Lite_Arbiter: ", c_2);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _GEN_8 & ~reset)	// AXI4_Arbiter.scala:54:80, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[LoadStore <===> SRAM] idle ifvr%x,%x lsvr%x,%x\n", InstFetch_ar_valid, _GEN_2, LoadStore_ar_valid, _GEN_0);	// AXI4_Arbiter.scala:32:24, :34:73, Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & _GEN_9 & ~reset)	// AXI4_Arbiter.scala:54:80, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] AXI4Lite_Arbiter: ", c_3);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _GEN_9 & ~reset)	// AXI4_Arbiter.scala:54:80, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[DONT CARE <=X=> SRAM] idle");	// Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & _GEN_10 & ~reset)	// AXI4_Arbiter.scala:32:24, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] AXI4Lite_Arbiter: ", c_4);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _GEN_10 & ~reset)	// AXI4_Arbiter.scala:32:24, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[InstFetch <===> SRAM] exec ifvr%x,%x lsvr%x,%x\n", InstFetch_ar_valid, _GEN_2, LoadStore_ar_valid, _GEN_0);	// AXI4_Arbiter.scala:32:24, :34:73, Debug.scala:34:43, :35:31
      if ((`PRINTF_COND_) & _GEN_11 & ~reset)	// AXI4_Arbiter.scala:32:24, Debug.scala:34:43
        $fwrite(32'h80000002, "[%d] AXI4Lite_Arbiter: ", c_5);	// Debug.scala:34:43, GTimer.scala:8:32
      if ((`PRINTF_COND_) & _GEN_11 & ~reset)	// AXI4_Arbiter.scala:32:24, Debug.scala:34:43, :35:31
        $fwrite(32'h80000002, "[LoadStore <===> SRAM] exec ifvr%x,%x lsvr%x,%x\n", InstFetch_ar_valid, _GEN_2, LoadStore_ar_valid, _GEN_0);	// AXI4_Arbiter.scala:32:24, :34:73, Debug.scala:34:43, :35:31
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:4463:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:4463:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_3;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_4;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_5;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_6;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_7;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_8;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_9;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_10;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_11;	// <stdin>:4463:10
      automatic logic [31:0] _RANDOM_12;	// <stdin>:4463:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:4463:10
        `INIT_RANDOM_PROLOG_	// <stdin>:4463:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:4463:10
        _RANDOM_0 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_1 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_2 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_3 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_4 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_5 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_6 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_7 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_8 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_9 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_10 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_11 = `RANDOM;	// <stdin>:4463:10
        _RANDOM_12 = `RANDOM;	// <stdin>:4463:10
        state = _RANDOM_0[1:0];	// AXI4_Arbiter.scala:30:28
        c = {_RANDOM_0[31:2], _RANDOM_1, _RANDOM_2[1:0]};	// AXI4_Arbiter.scala:30:28, GTimer.scala:8:32
        c_1 = {_RANDOM_2[31:2], _RANDOM_3, _RANDOM_4[1:0]};	// GTimer.scala:8:32
        c_2 = {_RANDOM_4[31:2], _RANDOM_5, _RANDOM_6[1:0]};	// GTimer.scala:8:32
        c_3 = {_RANDOM_6[31:2], _RANDOM_7, _RANDOM_8[1:0]};	// GTimer.scala:8:32
        c_4 = {_RANDOM_8[31:2], _RANDOM_9, _RANDOM_10[1:0]};	// GTimer.scala:8:32
        c_5 = {_RANDOM_10[31:2], _RANDOM_11, _RANDOM_12[1:0]};	// GTimer.scala:8:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:4463:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:4463:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign InstFetch_ar_ready = _GEN_2;	// <stdin>:4463:10, AXI4_Arbiter.scala:32:24, :34:73
  assign InstFetch_r_valid = _GEN_3;	// <stdin>:4463:10, AXI4_Arbiter.scala:32:24, :34:73
  assign InstFetch_r_bits_data = (|state) ? (_T_26 ? Arbiter_r_bits_data : 64'h0) : _GEN ? 64'h0 : Arbiter_r_bits_data;	// <stdin>:4463:10, AXI4.scala:96:27, AXI4_Arbiter.scala:30:28, :32:24, :34:73, :38:46, :44:80, :72:38, GTimer.scala:8:32
  assign LoadStore_aw_ready = Arbiter_aw_ready;	// <stdin>:4463:10
  assign LoadStore_w_ready = Arbiter_w_ready;	// <stdin>:4463:10
  assign LoadStore_b_valid = Arbiter_b_valid;	// <stdin>:4463:10
  assign LoadStore_ar_ready = _GEN_0;	// <stdin>:4463:10, AXI4_Arbiter.scala:32:24, :34:73
  assign LoadStore_r_valid = _GEN_1;	// <stdin>:4463:10, AXI4_Arbiter.scala:32:24, :34:73
  assign LoadStore_r_bits_data = (|state) ? (_T_26 ? 64'h0 : Arbiter_r_bits_data) : _GEN ? Arbiter_r_bits_data : 64'h0;	// <stdin>:4463:10, AXI4.scala:96:27, AXI4_Arbiter.scala:30:28, :32:24, :34:73, :38:46, :39:46, :44:80, GTimer.scala:8:32
  assign Arbiter_aw_valid = LoadStore_aw_valid;	// <stdin>:4463:10
  assign Arbiter_aw_bits_addr = LoadStore_aw_bits_addr;	// <stdin>:4463:10
  assign Arbiter_w_valid = LoadStore_w_valid;	// <stdin>:4463:10
  assign Arbiter_w_bits_data = LoadStore_w_bits_data;	// <stdin>:4463:10
  assign Arbiter_w_bits_strb = LoadStore_w_bits_strb;	// <stdin>:4463:10
  assign Arbiter_b_ready = LoadStore_b_ready;	// <stdin>:4463:10
  assign Arbiter_ar_valid = (|state) ? (_T_26 ? InstFetch_ar_valid : LoadStore_ar_valid) : _GEN ? LoadStore_ar_valid :
                InstFetch_ar_valid;	// <stdin>:4463:10, AXI4_Arbiter.scala:30:28, :32:24, :34:73, :38:46, :44:80, :71:38
  assign Arbiter_ar_bits_addr = (|state) ? (_T_26 ? InstFetch_ar_bits_addr : LoadStore_ar_bits_addr) : _GEN ?
                LoadStore_ar_bits_addr : InstFetch_ar_bits_addr;	// <stdin>:4463:10, AXI4_Arbiter.scala:30:28, :32:24, :34:73, :38:46, :44:80, :71:38
  assign Arbiter_r_ready = (|state) ? (_T_26 ? InstFetch_r_ready : LoadStore_r_ready) : _GEN ? LoadStore_r_ready :
                InstFetch_r_ready;	// <stdin>:4463:10, AXI4_Arbiter.scala:30:28, :32:24, :34:73, :38:46, :39:46, :44:80, :72:38
endmodule

// external module MEM

module TP_SRAM(	// <stdin>:4691:10
  input         clock,
                reset,
                io_aw_valid,
  input  [31:0] io_aw_bits_addr,
  input         io_w_valid,
  input  [63:0] io_w_bits_data,
  input  [7:0]  io_w_bits_strb,
  input         io_b_ready,
                io_ar_valid,
  input  [31:0] io_ar_bits_addr,
  input         io_r_ready,
  output        io_aw_ready,
                io_w_ready,
                io_b_valid,
                io_ar_ready,
                io_r_valid,
  output [63:0] io_r_bits_data);

  reg state_load;	// TP_SRAM.scala:31:33
  reg state_store;	// TP_SRAM.scala:32:34
  always @(posedge clock) begin
    if (reset) begin
      state_load <= 1'h0;	// TP_SRAM.scala:31:33
      state_store <= 1'h0;	// TP_SRAM.scala:31:33, :32:34
    end
    else begin
      if (state_load)	// TP_SRAM.scala:31:33
        state_load <= (~state_load | ~(io_r_ready & state_load)) & state_load;	// Decoupled.scala:52:35, TP_SRAM.scala:31:33, :34:29, :40:{42,55}
      else	// TP_SRAM.scala:31:33
        state_load <= ~state_load & io_ar_valid | state_load;	// Decoupled.scala:52:35, TP_SRAM.scala:31:33, :34:29, :36:{43,56}
      if (state_store)	// TP_SRAM.scala:32:34
        state_store <= (~state_store | ~(io_b_ready & state_store)) & state_store;	// Decoupled.scala:52:35, TP_SRAM.scala:32:34, :44:30, :50:{42,56}
      else	// TP_SRAM.scala:32:34
        state_store <= ~state_store & io_aw_valid & io_w_valid | state_store;	// TP_SRAM.scala:32:34, :44:30, :46:{42,56,70}
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:4691:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:4691:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:4691:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:4691:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:4691:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:4691:10
        `INIT_RANDOM_PROLOG_	// <stdin>:4691:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:4691:10
        _RANDOM_0 = `RANDOM;	// <stdin>:4691:10
        state_load = _RANDOM_0[0];	// TP_SRAM.scala:31:33
        state_store = _RANDOM_0[1];	// TP_SRAM.scala:31:33, :32:34
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:4691:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:4691:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  MEM mem (	// TP_SRAM.scala:28:25
    .iRen       (state_load),	// TP_SRAM.scala:31:33
    .iWen       (state_store),	// TP_SRAM.scala:32:34
    .iReadAddr  (io_ar_bits_addr),
    .iWriteAddr (io_aw_bits_addr),
    .iByteMask  (io_w_bits_strb),
    .iWriteData (io_w_bits_data),
    .oReadData  (io_r_bits_data)
  );
  assign io_aw_ready = ~state_store;	// <stdin>:4691:10, TP_SRAM.scala:32:34, :44:30
  assign io_w_ready = ~state_store;	// <stdin>:4691:10, TP_SRAM.scala:32:34, :44:30
  assign io_b_valid = state_store;	// <stdin>:4691:10, TP_SRAM.scala:32:34
  assign io_ar_ready = ~state_load;	// <stdin>:4691:10, TP_SRAM.scala:31:33, :34:29
  assign io_r_valid = state_load;	// <stdin>:4691:10, TP_SRAM.scala:31:33
endmodule

module SimTop(	// <stdin>:4756:10
  input         clock,
                reset,
  output        io_commit,
  output [63:0] io_pc,
                io_gpr_regs_0,
                io_gpr_regs_1,
                io_gpr_regs_2,
                io_gpr_regs_3,
                io_gpr_regs_4,
                io_gpr_regs_5,
                io_gpr_regs_6,
                io_gpr_regs_7,
                io_gpr_regs_8,
                io_gpr_regs_9,
                io_gpr_regs_10,
                io_gpr_regs_11,
                io_gpr_regs_12,
                io_gpr_regs_13,
                io_gpr_regs_14,
                io_gpr_regs_15,
                io_gpr_regs_16,
                io_gpr_regs_17,
                io_gpr_regs_18,
                io_gpr_regs_19,
                io_gpr_regs_20,
                io_gpr_regs_21,
                io_gpr_regs_22,
                io_gpr_regs_23,
                io_gpr_regs_24,
                io_gpr_regs_25,
                io_gpr_regs_26,
                io_gpr_regs_27,
                io_gpr_regs_28,
                io_gpr_regs_29,
                io_gpr_regs_30,
                io_gpr_regs_31,
                io_csr_regs_0,
                io_csr_regs_1,
                io_csr_regs_2,
                io_csr_regs_3);

  wire        _TP_SRAM_io_aw_ready;	// SimTop.scala:29:29
  wire        _TP_SRAM_io_w_ready;	// SimTop.scala:29:29
  wire        _TP_SRAM_io_b_valid;	// SimTop.scala:29:29
  wire        _TP_SRAM_io_ar_ready;	// SimTop.scala:29:29
  wire        _TP_SRAM_io_r_valid;	// SimTop.scala:29:29
  wire [63:0] _TP_SRAM_io_r_bits_data;	// SimTop.scala:29:29
  wire        _arbiter_InstFetch_ar_ready;	// SimTop.scala:28:29
  wire        _arbiter_InstFetch_r_valid;	// SimTop.scala:28:29
  wire [63:0] _arbiter_InstFetch_r_bits_data;	// SimTop.scala:28:29
  wire        _arbiter_LoadStore_aw_ready;	// SimTop.scala:28:29
  wire        _arbiter_LoadStore_w_ready;	// SimTop.scala:28:29
  wire        _arbiter_LoadStore_b_valid;	// SimTop.scala:28:29
  wire        _arbiter_LoadStore_ar_ready;	// SimTop.scala:28:29
  wire        _arbiter_LoadStore_r_valid;	// SimTop.scala:28:29
  wire [63:0] _arbiter_LoadStore_r_bits_data;	// SimTop.scala:28:29
  wire        _arbiter_Arbiter_aw_valid;	// SimTop.scala:28:29
  wire [31:0] _arbiter_Arbiter_aw_bits_addr;	// SimTop.scala:28:29
  wire        _arbiter_Arbiter_w_valid;	// SimTop.scala:28:29
  wire [63:0] _arbiter_Arbiter_w_bits_data;	// SimTop.scala:28:29
  wire [7:0]  _arbiter_Arbiter_w_bits_strb;	// SimTop.scala:28:29
  wire        _arbiter_Arbiter_b_ready;	// SimTop.scala:28:29
  wire        _arbiter_Arbiter_ar_valid;	// SimTop.scala:28:29
  wire [31:0] _arbiter_Arbiter_ar_bits_addr;	// SimTop.scala:28:29
  wire        _arbiter_Arbiter_r_ready;	// SimTop.scala:28:29
  wire        _core_io_imem_ar_valid;	// SimTop.scala:27:26
  wire [31:0] _core_io_imem_ar_bits_addr;	// SimTop.scala:27:26
  wire        _core_io_imem_r_ready;	// SimTop.scala:27:26
  wire        _core_io_dmem_aw_valid;	// SimTop.scala:27:26
  wire [31:0] _core_io_dmem_aw_bits_addr;	// SimTop.scala:27:26
  wire        _core_io_dmem_w_valid;	// SimTop.scala:27:26
  wire [63:0] _core_io_dmem_w_bits_data;	// SimTop.scala:27:26
  wire [7:0]  _core_io_dmem_w_bits_strb;	// SimTop.scala:27:26
  wire        _core_io_dmem_b_ready;	// SimTop.scala:27:26
  wire        _core_io_dmem_ar_valid;	// SimTop.scala:27:26
  wire [31:0] _core_io_dmem_ar_bits_addr;	// SimTop.scala:27:26
  wire        _core_io_dmem_r_ready;	// SimTop.scala:27:26
  wire        _core_io_difftest_commit_valid;	// SimTop.scala:27:26
  wire [63:0] _core_io_difftest_commit_bits_decode_cf_pnpc;	// SimTop.scala:27:26
  wire [63:0] _core_io_difftest_redirect_target;	// SimTop.scala:27:26
  wire        _core_io_difftest_redirect_valid;	// SimTop.scala:27:26
  reg         io_commit_REG;	// SimTop.scala:50:29
  reg  [63:0] io_pc_REG;	// SimTop.scala:51:25
  always @(posedge clock) begin
    io_commit_REG <= _core_io_difftest_commit_valid;	// SimTop.scala:27:26, :50:29
    if (_core_io_difftest_redirect_valid)	// SimTop.scala:27:26
      io_pc_REG <= _core_io_difftest_redirect_target;	// SimTop.scala:27:26, :51:25
    else	// SimTop.scala:27:26
      io_pc_REG <= _core_io_difftest_commit_bits_decode_cf_pnpc;	// SimTop.scala:27:26, :51:25
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:4756:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:4756:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:4756:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:4756:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:4756:10
      automatic logic [31:0] _RANDOM_1;	// <stdin>:4756:10
      automatic logic [31:0] _RANDOM_2;	// <stdin>:4756:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:4756:10
        `INIT_RANDOM_PROLOG_	// <stdin>:4756:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:4756:10
        _RANDOM_0 = `RANDOM;	// <stdin>:4756:10
        _RANDOM_1 = `RANDOM;	// <stdin>:4756:10
        _RANDOM_2 = `RANDOM;	// <stdin>:4756:10
        io_commit_REG = _RANDOM_0[0];	// SimTop.scala:50:29
        io_pc_REG = {_RANDOM_0[31:1], _RANDOM_1, _RANDOM_2[0]};	// SimTop.scala:50:29, :51:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:4756:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:4756:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Core core (	// SimTop.scala:27:26
    .clock                                  (clock),
    .reset                                  (reset),
    .io_imem_ar_ready                       (_arbiter_InstFetch_ar_ready),	// SimTop.scala:28:29
    .io_imem_r_valid                        (_arbiter_InstFetch_r_valid),	// SimTop.scala:28:29
    .io_imem_r_bits_data                    (_arbiter_InstFetch_r_bits_data),	// SimTop.scala:28:29
    .io_dmem_aw_ready                       (_arbiter_LoadStore_aw_ready),	// SimTop.scala:28:29
    .io_dmem_w_ready                        (_arbiter_LoadStore_w_ready),	// SimTop.scala:28:29
    .io_dmem_b_valid                        (_arbiter_LoadStore_b_valid),	// SimTop.scala:28:29
    .io_dmem_ar_ready                       (_arbiter_LoadStore_ar_ready),	// SimTop.scala:28:29
    .io_dmem_r_valid                        (_arbiter_LoadStore_r_valid),	// SimTop.scala:28:29
    .io_dmem_r_bits_data                    (_arbiter_LoadStore_r_bits_data),	// SimTop.scala:28:29
    .io_imem_ar_valid                       (_core_io_imem_ar_valid),
    .io_imem_ar_bits_addr                   (_core_io_imem_ar_bits_addr),
    .io_imem_r_ready                        (_core_io_imem_r_ready),
    .io_dmem_aw_valid                       (_core_io_dmem_aw_valid),
    .io_dmem_aw_bits_addr                   (_core_io_dmem_aw_bits_addr),
    .io_dmem_w_valid                        (_core_io_dmem_w_valid),
    .io_dmem_w_bits_data                    (_core_io_dmem_w_bits_data),
    .io_dmem_w_bits_strb                    (_core_io_dmem_w_bits_strb),
    .io_dmem_b_ready                        (_core_io_dmem_b_ready),
    .io_dmem_ar_valid                       (_core_io_dmem_ar_valid),
    .io_dmem_ar_bits_addr                   (_core_io_dmem_ar_bits_addr),
    .io_dmem_r_ready                        (_core_io_dmem_r_ready),
    .io_gpr_regs_1                          (io_gpr_regs_1),
    .io_gpr_regs_2                          (io_gpr_regs_2),
    .io_gpr_regs_3                          (io_gpr_regs_3),
    .io_gpr_regs_4                          (io_gpr_regs_4),
    .io_gpr_regs_5                          (io_gpr_regs_5),
    .io_gpr_regs_6                          (io_gpr_regs_6),
    .io_gpr_regs_7                          (io_gpr_regs_7),
    .io_gpr_regs_8                          (io_gpr_regs_8),
    .io_gpr_regs_9                          (io_gpr_regs_9),
    .io_gpr_regs_10                         (io_gpr_regs_10),
    .io_gpr_regs_11                         (io_gpr_regs_11),
    .io_gpr_regs_12                         (io_gpr_regs_12),
    .io_gpr_regs_13                         (io_gpr_regs_13),
    .io_gpr_regs_14                         (io_gpr_regs_14),
    .io_gpr_regs_15                         (io_gpr_regs_15),
    .io_gpr_regs_16                         (io_gpr_regs_16),
    .io_gpr_regs_17                         (io_gpr_regs_17),
    .io_gpr_regs_18                         (io_gpr_regs_18),
    .io_gpr_regs_19                         (io_gpr_regs_19),
    .io_gpr_regs_20                         (io_gpr_regs_20),
    .io_gpr_regs_21                         (io_gpr_regs_21),
    .io_gpr_regs_22                         (io_gpr_regs_22),
    .io_gpr_regs_23                         (io_gpr_regs_23),
    .io_gpr_regs_24                         (io_gpr_regs_24),
    .io_gpr_regs_25                         (io_gpr_regs_25),
    .io_gpr_regs_26                         (io_gpr_regs_26),
    .io_gpr_regs_27                         (io_gpr_regs_27),
    .io_gpr_regs_28                         (io_gpr_regs_28),
    .io_gpr_regs_29                         (io_gpr_regs_29),
    .io_gpr_regs_30                         (io_gpr_regs_30),
    .io_gpr_regs_31                         (io_gpr_regs_31),
    .io_csr_regs_0                          (io_csr_regs_0),
    .io_csr_regs_1                          (io_csr_regs_1),
    .io_csr_regs_2                          (io_csr_regs_2),
    .io_csr_regs_3                          (io_csr_regs_3),
    .io_difftest_commit_valid               (_core_io_difftest_commit_valid),
    .io_difftest_commit_bits_decode_cf_pnpc (_core_io_difftest_commit_bits_decode_cf_pnpc),
    .io_difftest_redirect_target            (_core_io_difftest_redirect_target),
    .io_difftest_redirect_valid             (_core_io_difftest_redirect_valid)
  );
  AXI4Lite_Arbiter arbiter (	// SimTop.scala:28:29
    .clock                  (clock),
    .reset                  (reset),
    .InstFetch_ar_valid     (_core_io_imem_ar_valid),	// SimTop.scala:27:26
    .InstFetch_ar_bits_addr (_core_io_imem_ar_bits_addr),	// SimTop.scala:27:26
    .InstFetch_r_ready      (_core_io_imem_r_ready),	// SimTop.scala:27:26
    .LoadStore_aw_valid     (_core_io_dmem_aw_valid),	// SimTop.scala:27:26
    .LoadStore_aw_bits_addr (_core_io_dmem_aw_bits_addr),	// SimTop.scala:27:26
    .LoadStore_w_valid      (_core_io_dmem_w_valid),	// SimTop.scala:27:26
    .LoadStore_w_bits_data  (_core_io_dmem_w_bits_data),	// SimTop.scala:27:26
    .LoadStore_w_bits_strb  (_core_io_dmem_w_bits_strb),	// SimTop.scala:27:26
    .LoadStore_b_ready      (_core_io_dmem_b_ready),	// SimTop.scala:27:26
    .LoadStore_ar_valid     (_core_io_dmem_ar_valid),	// SimTop.scala:27:26
    .LoadStore_ar_bits_addr (_core_io_dmem_ar_bits_addr),	// SimTop.scala:27:26
    .LoadStore_r_ready      (_core_io_dmem_r_ready),	// SimTop.scala:27:26
    .Arbiter_aw_ready       (_TP_SRAM_io_aw_ready),	// SimTop.scala:29:29
    .Arbiter_w_ready        (_TP_SRAM_io_w_ready),	// SimTop.scala:29:29
    .Arbiter_b_valid        (_TP_SRAM_io_b_valid),	// SimTop.scala:29:29
    .Arbiter_ar_ready       (_TP_SRAM_io_ar_ready),	// SimTop.scala:29:29
    .Arbiter_r_valid        (_TP_SRAM_io_r_valid),	// SimTop.scala:29:29
    .Arbiter_r_bits_data    (_TP_SRAM_io_r_bits_data),	// SimTop.scala:29:29
    .InstFetch_ar_ready     (_arbiter_InstFetch_ar_ready),
    .InstFetch_r_valid      (_arbiter_InstFetch_r_valid),
    .InstFetch_r_bits_data  (_arbiter_InstFetch_r_bits_data),
    .LoadStore_aw_ready     (_arbiter_LoadStore_aw_ready),
    .LoadStore_w_ready      (_arbiter_LoadStore_w_ready),
    .LoadStore_b_valid      (_arbiter_LoadStore_b_valid),
    .LoadStore_ar_ready     (_arbiter_LoadStore_ar_ready),
    .LoadStore_r_valid      (_arbiter_LoadStore_r_valid),
    .LoadStore_r_bits_data  (_arbiter_LoadStore_r_bits_data),
    .Arbiter_aw_valid       (_arbiter_Arbiter_aw_valid),
    .Arbiter_aw_bits_addr   (_arbiter_Arbiter_aw_bits_addr),
    .Arbiter_w_valid        (_arbiter_Arbiter_w_valid),
    .Arbiter_w_bits_data    (_arbiter_Arbiter_w_bits_data),
    .Arbiter_w_bits_strb    (_arbiter_Arbiter_w_bits_strb),
    .Arbiter_b_ready        (_arbiter_Arbiter_b_ready),
    .Arbiter_ar_valid       (_arbiter_Arbiter_ar_valid),
    .Arbiter_ar_bits_addr   (_arbiter_Arbiter_ar_bits_addr),
    .Arbiter_r_ready        (_arbiter_Arbiter_r_ready)
  );
  TP_SRAM TP_SRAM (	// SimTop.scala:29:29
    .clock           (clock),
    .reset           (reset),
    .io_aw_valid     (_arbiter_Arbiter_aw_valid),	// SimTop.scala:28:29
    .io_aw_bits_addr (_arbiter_Arbiter_aw_bits_addr),	// SimTop.scala:28:29
    .io_w_valid      (_arbiter_Arbiter_w_valid),	// SimTop.scala:28:29
    .io_w_bits_data  (_arbiter_Arbiter_w_bits_data),	// SimTop.scala:28:29
    .io_w_bits_strb  (_arbiter_Arbiter_w_bits_strb),	// SimTop.scala:28:29
    .io_b_ready      (_arbiter_Arbiter_b_ready),	// SimTop.scala:28:29
    .io_ar_valid     (_arbiter_Arbiter_ar_valid),	// SimTop.scala:28:29
    .io_ar_bits_addr (_arbiter_Arbiter_ar_bits_addr),	// SimTop.scala:28:29
    .io_r_ready      (_arbiter_Arbiter_r_ready),	// SimTop.scala:28:29
    .io_aw_ready     (_TP_SRAM_io_aw_ready),
    .io_w_ready      (_TP_SRAM_io_w_ready),
    .io_b_valid      (_TP_SRAM_io_b_valid),
    .io_ar_ready     (_TP_SRAM_io_ar_ready),
    .io_r_valid      (_TP_SRAM_io_r_valid),
    .io_r_bits_data  (_TP_SRAM_io_r_bits_data)
  );
  assign io_commit = io_commit_REG;	// <stdin>:4756:10, SimTop.scala:50:29
  assign io_pc = io_pc_REG;	// <stdin>:4756:10, SimTop.scala:51:25
  assign io_gpr_regs_0 = 64'h0;	// <stdin>:4756:10, SimTop.scala:28:29
endmodule

