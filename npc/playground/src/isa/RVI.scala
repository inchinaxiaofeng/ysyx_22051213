package isa

import chisel3._
import chisel3.util._

import defs._
import module.fu.ALUCtrl
import module.fu.LSUCtrl

object RV32I_ALUInstr extends HasInstrType {
	def ADDI	= BitPat("b???????_?????_?????_000_?????_00100_11")
	def SLLI	= if (XLEN == 32) BitPat("b0000000_?????_?????_001_?????_00100_11")
							else  BitPat("b000000?_?????_?????_001_?????_00100_11")
	def SLTI	= BitPat("b???????_?????_?????_010_?????_00100_11")
	def SLTIU	= BitPat("b???????_?????_?????_011_?????_00100_11")
	def XORI	= BitPat("b???????_?????_?????_100_?????_00100_11")
	def SRLI	= if (XLEN == 32) BitPat("b0000000_?????_?????_101_?????_00100_11")
							else  BitPat("b000000?_?????_?????_101_?????_00100_11")
	def SRAI	= if (XLEN == 32) BitPat("b0100000_?????_?????_101_?????_00100_11")
							else  BitPat("b010000?_?????_?????_101_?????_00100_11")
	def ORI		= BitPat("b???????_?????_?????_110_?????_00100_11")
	def ANDI	= BitPat("b???????_?????_?????_111_?????_00100_11")
	
	def ADD		= BitPat("b0000000_?????_?????_000_?????_01100_11")
	def SUB		= BitPat("b0100000_?????_?????_000_?????_01100_11")
	def SLL		= BitPat("b0000000_?????_?????_001_?????_01100_11")
	def SLT		= BitPat("b0000000_?????_?????_010_?????_01100_11")
	def SLTU	= BitPat("b0000000_?????_?????_011_?????_01100_11")
	def XOR		= BitPat("b0000000_?????_?????_100_?????_01100_11")
	def SRL		= BitPat("b0000000_?????_?????_101_?????_01100_11")
	def SRA		= BitPat("b0100000_?????_?????_101_?????_01100_11")
	def OR		= BitPat("b0000000_?????_?????_110_?????_01100_11")
	def AND		= BitPat("b0000000_?????_?????_111_?????_01100_11")
	
	def LUI		= BitPat("b???????_?????_?????_???_?????_01101_11")
	def AUIPC	= BitPat("b???????_?????_?????_???_?????_00101_11")
	
	val table	= Array (
		ADDI	-> List(InstrI, FuType.alu, ALUCtrl.add ),
		SLLI	-> List(InstrI, FuType.alu, ALUCtrl.sll ),
		SLTI	-> List(InstrI, FuType.alu, ALUCtrl.slt ),
		SLTIU	-> List(InstrI, FuType.alu, ALUCtrl.sltu),
		XORI	-> List(InstrI, FuType.alu, ALUCtrl.xor ),
		SRLI	-> List(InstrI, FuType.alu, ALUCtrl.srl ),
		SRAI	-> List(InstrI, FuType.alu, ALUCtrl.sra ),
		ORI		-> List(InstrI, FuType.alu, ALUCtrl.or	),
		ANDI	-> List(InstrI, FuType.alu, ALUCtrl.and ),
		
		ADD		-> List(InstrR, FuType.alu, ALUCtrl.add ),
		SUB		-> List(InstrR, FuType.alu, ALUCtrl.sub ),
		SLL		-> List(InstrR, FuType.alu, ALUCtrl.sll ),
		SLT		-> List(InstrR, FuType.alu, ALUCtrl.slt ),
		SLTU	-> List(InstrR, FuType.alu, ALUCtrl.sltu),
		XOR		-> List(InstrR, FuType.alu, ALUCtrl.xor ),
		SRL		-> List(InstrR, FuType.alu, ALUCtrl.srl ),
		OR		-> List(InstrR, FuType.alu, ALUCtrl.or	),
		AND		-> List(InstrR, FuType.alu, ALUCtrl.and ),
		
		LUI		-> List(InstrU, FuType.alu, ALUCtrl.add	),
		AUIPC	-> List(InstrU, FuType.alu, ALUCtrl.add )
	)
}

object RV32I_BRUInstr extends HasInstrType {
	def JAL		= BitPat("b?_??????????_?_????????_?????_11011_11")
	def JALR	= BitPat("b???????_?????_?????_000_?????_11001_11")
	
	def BEQ		= BitPat("b???????_?????_?????_000_?????_11000_11")
	def BNE		= BitPat("b???????_?????_?????_001_?????_11000_11")
	def BLT		= BitPat("b???????_?????_?????_100_?????_11000_11")
	def BGE		= BitPat("b???????_?????_?????_101_?????_11000_11")
	def BLTU	= BitPat("b???????_?????_?????_110_?????_11000_11")
	def BGEU	= BitPat("b???????_?????_?????_111_?????_11000_11")

	val table   = Array (
		JAL		-> List(InstrJ, FuType.bru, ALUCtrl.jal	),
		JALR	-> List(InstrI, FuType.bru, ALUCtrl.jalr),
		
		BEQ		-> List(InstrB, FuType.bru, ALUCtrl.beq	),
		BNE		-> List(InstrB, FuType.bru, ALUCtrl.bne ),
		BLT		-> List(InstrB, FuType.bru, ALUCtrl.blt ),
		BGE		-> List(InstrB, FuType.bru, ALUCtrl.bge ),
		BLTU	-> List(InstrB, FuType.bru, ALUCtrl.bltu),
		BGEU	-> List(InstrB, FuType.bru, ALUCtrl.bgeu)
	)
}

object RV32I_LSUInstr extends HasInstrType {
	def LB		= BitPat("b???????_?????_?????_000_?????_00000_11")
	def LH		= BitPat("b???????_?????_?????_001_?????_00000_11")
	def LW		= BitPat("b???????_?????_?????_010_?????_00000_11")
	def LBU		= BitPat("b???????_?????_?????_100_?????_00000_11")
	def LHU		= BitPat("b???????_?????_?????_101_?????_00000_11")
	
	def SB		= BitPat("b???????_?????_?????_000_?????_01000_11")
	def SH		= BitPat("b???????_?????_?????_001_?????_01000_11")
	def SW		= BitPat("b???????_?????_?????_010_?????_01000_11")

	val table	= Array (
	LB		-> List(InstrI, FuType.lsu, LSUCtrl.lb	),
	LH		-> List(InstrI, FuType.lsu, LSUCtrl.lh	),
	LW		-> List(InstrI, FuType.lsu, LSUCtrl.lw	),
	LBU		-> List(InstrI, FuType.lsu, LSUCtrl.lbu	),
	LHU		-> List(InstrI, FuType.lsu, LSUCtrl.lhu	),
	
	SB		-> List(InstrS, FuType.lsu, LSUCtrl.sb	),
	SH		-> List(InstrS, FuType.lsu, LSUCtrl.sh	),
	SW		-> List(InstrS, FuType.lsu, LSUCtrl.sw	)
	)
}

object RV64I_Instr extends HasInstrType {
	def ADDIW	= BitPat("b???????_?????_?????_000_?????_00110_11")
	def SLLIW	= BitPat("b0000000_?????_?????_001_?????_00110_11")
	def SRLIW	= BitPat("b0000000_?????_?????_101_?????_00110_11")
	def SRAIW	= BitPat("b0100000 ????? ????? 101 ????? 00110 11")
	
	def ADDW	= BitPat("b0000000_?????_?????_000_?????_01110_11")
	def SUBW	= BitPat("b0100000_?????_?????_000_?????_01110_11")
	def SLLW	= BitPat("b0000000_?????_?????_001_?????_01110_11")
	def SRLW	= BitPat("b0000000_?????_?????_101_?????_01110_11")
	def SRAW	= BitPat("b0100000_?????_?????_101_?????_01110_11")
	
	def LWU		= BitPat("b???????_?????_?????_110_?????_00000_11")
	def LD		= BitPat("b???????_?????_?????_011_?????_00000_11")
	def SD		= BitPat("b???????_?????_?????_011_?????_01000_11")

	val table	= Array (
		// 64 only
		ADDIW	-> List(InstrI, FuType.alu, ALUCtrl.addw),
		SLLIW	-> List(InstrI, FuType.alu, ALUCtrl.sllw),
		SRLIW	-> List(InstrI, FuType.alu, ALUCtrl.srlw),
		SRAIW	-> List(InstrI, FuType.alu, ALUCtrl.sraw),
		
		ADDW	-> List(InstrR, FuType.alu, ALUCtrl.addw),
		SUBW	-> List(InstrR, FuType.alu, ALUCtrl.subw),
		SLLW	-> List(InstrR, FuType.alu, ALUCtrl.sllw),
		SRLW	-> List(InstrR, FuType.alu, ALUCtrl.srlw),
		SRAW	-> List(InstrR, FuType.alu, ALUCtrl.sraw),
		
		LWU		-> List(InstrI, FuType.lsu, LSUCtrl.lwu	),
		LD		-> List(InstrI, FuType.lsu, LSUCtrl.ld	),
		SD		-> List(InstrS, FuType.lsu, LSUCtrl.sd	)
	)
}

object RVIInstr extends HasMarCoreParameter {
	val table = RV32I_ALUInstr.table ++ RV32I_BRUInstr.table ++ RV32I_LSUInstr.table ++
		(if (XLEN == 64) RV64I_Instr.table else Array.empty)
}